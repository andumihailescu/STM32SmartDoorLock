
SmartDoorLock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050d0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08005190  08005190  00006190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054a8  080054a8  00007080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080054a8  080054a8  00007080  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080054a8  080054a8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054ac  080054ac  000064ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080054b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  20000080  08005530  00007080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08005530  000074b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108a7  00000000  00000000  000070a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029ae  00000000  00000000  0001794f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  0001b040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001590e  00000000  00000000  0001ba79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001259c  00000000  00000000  00031387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007c2f3  00000000  00000000  00043923  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bfc16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035dc  00000000  00000000  000bfc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000c3238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000080 	.word	0x20000080
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005178 	.word	0x08005178

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000084 	.word	0x20000084
 8000104:	08005178 	.word	0x08005178

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <Application_Init>:
uint8_t buff[255];
uint8_t uid[MIFARE_UID_MAX_LENGTH];
int32_t uid_len = 0;

void Application_Init()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	printf("Welcome to STM32 world!\r\n");
 800040c:	4b15      	ldr	r3, [pc, #84]	@ (8000464 <Application_Init+0x5c>)
 800040e:	0018      	movs	r0, r3
 8000410:	f004 f81c 	bl	800444c <puts>
	PN532_I2C_Init(&pn532);
 8000414:	4b14      	ldr	r3, [pc, #80]	@ (8000468 <Application_Init+0x60>)
 8000416:	0018      	movs	r0, r3
 8000418:	f001 faca 	bl	80019b0 <PN532_I2C_Init>
	PN532_GetFirmwareVersion(&pn532, buff);
 800041c:	4a13      	ldr	r2, [pc, #76]	@ (800046c <Application_Init+0x64>)
 800041e:	4b12      	ldr	r3, [pc, #72]	@ (8000468 <Application_Init+0x60>)
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f001 f90e 	bl	8001644 <PN532_GetFirmwareVersion>
	if (PN532_GetFirmwareVersion(&pn532, buff) == PN532_STATUS_OK)
 8000428:	4a10      	ldr	r2, [pc, #64]	@ (800046c <Application_Init+0x64>)
 800042a:	4b0f      	ldr	r3, [pc, #60]	@ (8000468 <Application_Init+0x60>)
 800042c:	0011      	movs	r1, r2
 800042e:	0018      	movs	r0, r3
 8000430:	f001 f908 	bl	8001644 <PN532_GetFirmwareVersion>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d109      	bne.n	800044c <Application_Init+0x44>
	{
		printf("Found PN532 with firmware version: %d.%d\r\n", buff[1], buff[2]);
 8000438:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <Application_Init+0x64>)
 800043a:	785b      	ldrb	r3, [r3, #1]
 800043c:	0019      	movs	r1, r3
 800043e:	4b0b      	ldr	r3, [pc, #44]	@ (800046c <Application_Init+0x64>)
 8000440:	789b      	ldrb	r3, [r3, #2]
 8000442:	001a      	movs	r2, r3
 8000444:	4b0a      	ldr	r3, [pc, #40]	@ (8000470 <Application_Init+0x68>)
 8000446:	0018      	movs	r0, r3
 8000448:	f003 ff9a 	bl	8004380 <iprintf>
	}
	PN532_SamConfiguration(&pn532);
 800044c:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <Application_Init+0x60>)
 800044e:	0018      	movs	r0, r3
 8000450:	f001 f91c 	bl	800168c <PN532_SamConfiguration>
	printf("Waiting for RFID/NFC card...\r\n");
 8000454:	4b07      	ldr	r3, [pc, #28]	@ (8000474 <Application_Init+0x6c>)
 8000456:	0018      	movs	r0, r3
 8000458:	f003 fff8 	bl	800444c <puts>
}
 800045c:	46c0      	nop			@ (mov r8, r8)
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	08005190 	.word	0x08005190
 8000468:	2000009c 	.word	0x2000009c
 800046c:	200000b4 	.word	0x200000b4
 8000470:	080051ac 	.word	0x080051ac
 8000474:	080051d8 	.word	0x080051d8

08000478 <ReadNFCTag>:

void ReadNFCTag()
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
	// Check if a card is available to read
	uid_len = PN532_ReadPassiveTarget(&pn532, uid, PN532_MIFARE_ISO14443A, 1000);
 800047e:	23fa      	movs	r3, #250	@ 0xfa
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	491b      	ldr	r1, [pc, #108]	@ (80004f0 <ReadNFCTag+0x78>)
 8000484:	481b      	ldr	r0, [pc, #108]	@ (80004f4 <ReadNFCTag+0x7c>)
 8000486:	2200      	movs	r2, #0
 8000488:	f001 f920 	bl	80016cc <PN532_ReadPassiveTarget>
 800048c:	0002      	movs	r2, r0
 800048e:	4b1a      	ldr	r3, [pc, #104]	@ (80004f8 <ReadNFCTag+0x80>)
 8000490:	601a      	str	r2, [r3, #0]
	if (uid_len == PN532_STATUS_ERROR)
 8000492:	4b19      	ldr	r3, [pc, #100]	@ (80004f8 <ReadNFCTag+0x80>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	3301      	adds	r3, #1
 8000498:	d104      	bne.n	80004a4 <ReadNFCTag+0x2c>
	{
	  printf("Error...");
 800049a:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <ReadNFCTag+0x84>)
 800049c:	0018      	movs	r0, r3
 800049e:	f003 ff6f 	bl	8004380 <iprintf>
	  {
		printf("%02x ", uid[i]);
	  }
	  printf("\r\n");
	}
}
 80004a2:	e020      	b.n	80004e6 <ReadNFCTag+0x6e>
	  printf("Found card with UID: ");
 80004a4:	4b16      	ldr	r3, [pc, #88]	@ (8000500 <ReadNFCTag+0x88>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f003 ff6a 	bl	8004380 <iprintf>
	  for (uint8_t i = 0; i < uid_len; i++)
 80004ac:	1dfb      	adds	r3, r7, #7
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e00e      	b.n	80004d2 <ReadNFCTag+0x5a>
		printf("%02x ", uid[i]);
 80004b4:	1dfb      	adds	r3, r7, #7
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	4a0d      	ldr	r2, [pc, #52]	@ (80004f0 <ReadNFCTag+0x78>)
 80004ba:	5cd3      	ldrb	r3, [r2, r3]
 80004bc:	001a      	movs	r2, r3
 80004be:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <ReadNFCTag+0x8c>)
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 ff5c 	bl	8004380 <iprintf>
	  for (uint8_t i = 0; i < uid_len; i++)
 80004c8:	1dfb      	adds	r3, r7, #7
 80004ca:	781a      	ldrb	r2, [r3, #0]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	3201      	adds	r2, #1
 80004d0:	701a      	strb	r2, [r3, #0]
 80004d2:	1dfb      	adds	r3, r7, #7
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <ReadNFCTag+0x80>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	dbea      	blt.n	80004b4 <ReadNFCTag+0x3c>
	  printf("\r\n");
 80004de:	4b0a      	ldr	r3, [pc, #40]	@ (8000508 <ReadNFCTag+0x90>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f003 ffb3 	bl	800444c <puts>
}
 80004e6:	46c0      	nop			@ (mov r8, r8)
 80004e8:	46bd      	mov	sp, r7
 80004ea:	b002      	add	sp, #8
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	200001b4 	.word	0x200001b4
 80004f4:	2000009c 	.word	0x2000009c
 80004f8:	200001c0 	.word	0x200001c0
 80004fc:	080051f8 	.word	0x080051f8
 8000500:	08005204 	.word	0x08005204
 8000504:	0800521c 	.word	0x0800521c
 8000508:	08005224 	.word	0x08005224

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fa6a 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f842 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f916 	bl	8000748 <MX_GPIO_Init>
  MX_I2C1_Init();
 800051c:	f000 f886 	bl	800062c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000520:	f000 f8c4 	bl	80006ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fb2f 	bl	8000b88 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800052a:	2101      	movs	r1, #1
 800052c:	2000      	movs	r0, #0
 800052e:	f000 fbfd 	bl	8000d2c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000532:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <main+0x84>)
 8000534:	22e1      	movs	r2, #225	@ 0xe1
 8000536:	0252      	lsls	r2, r2, #9
 8000538:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800053a:	4b15      	ldr	r3, [pc, #84]	@ (8000590 <main+0x84>)
 800053c:	2200      	movs	r2, #0
 800053e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000540:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <main+0x84>)
 8000542:	2200      	movs	r2, #0
 8000544:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000546:	4b12      	ldr	r3, [pc, #72]	@ (8000590 <main+0x84>)
 8000548:	2200      	movs	r2, #0
 800054a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800054c:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <main+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000552:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <main+0x84>)
 8000554:	0019      	movs	r1, r3
 8000556:	2000      	movs	r0, #0
 8000558:	f000 fc84 	bl	8000e64 <BSP_COM_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <main+0x58>
  {
    Error_Handler();
 8000560:	f000 f934 	bl	80007cc <Error_Handler>

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */

  Application_Init();
 8000564:	f7ff ff50 	bl	8000408 <Application_Init>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 8000568:	2000      	movs	r0, #0
 800056a:	f000 fb77 	bl	8000c5c <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <main+0x88>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d1fb      	bne.n	800056e <main+0x62>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 8000576:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <main+0x88>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 800057c:	2000      	movs	r0, #0
 800057e:	f000 fbab 	bl	8000cd8 <BSP_LED_Toggle>
      printf("Button pressed. Led toggled!\r\n");
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <main+0x8c>)
 8000584:	0018      	movs	r0, r3
 8000586:	f003 ff61 	bl	800444c <puts>
      /* ..... Perform your action ..... */
      ReadNFCTag();
 800058a:	f7ff ff75 	bl	8000478 <ReadNFCTag>
    if (BspButtonState == BUTTON_PRESSED)
 800058e:	e7ee      	b.n	800056e <main+0x62>
 8000590:	200001c4 	.word	0x200001c4
 8000594:	200001d4 	.word	0x200001d4
 8000598:	08005228 	.word	0x08005228

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b08d      	sub	sp, #52	@ 0x34
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	2414      	movs	r4, #20
 80005a4:	193b      	adds	r3, r7, r4
 80005a6:	0018      	movs	r0, r3
 80005a8:	231c      	movs	r3, #28
 80005aa:	001a      	movs	r2, r3
 80005ac:	2100      	movs	r1, #0
 80005ae:	f004 f843 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b2:	003b      	movs	r3, r7
 80005b4:	0018      	movs	r0, r3
 80005b6:	2314      	movs	r3, #20
 80005b8:	001a      	movs	r2, r3
 80005ba:	2100      	movs	r1, #0
 80005bc:	f004 f83c 	bl	8004638 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80005c0:	4b19      	ldr	r3, [pc, #100]	@ (8000628 <SystemClock_Config+0x8c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2207      	movs	r2, #7
 80005c6:	4393      	bics	r3, r2
 80005c8:	001a      	movs	r2, r3
 80005ca:	4b17      	ldr	r3, [pc, #92]	@ (8000628 <SystemClock_Config+0x8c>)
 80005cc:	2101      	movs	r1, #1
 80005ce:	430a      	orrs	r2, r1
 80005d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	2201      	movs	r2, #1
 80005d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d8:	193b      	adds	r3, r7, r4
 80005da:	2280      	movs	r2, #128	@ 0x80
 80005dc:	0252      	lsls	r2, r2, #9
 80005de:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 fbfc 	bl	8002de0 <HAL_RCC_OscConfig>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80005ec:	f000 f8ee 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	003b      	movs	r3, r7
 80005f2:	2207      	movs	r2, #7
 80005f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2201      	movs	r2, #1
 80005fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000608:	003b      	movs	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800060e:	003b      	movs	r3, r7
 8000610:	2101      	movs	r1, #1
 8000612:	0018      	movs	r0, r3
 8000614:	f002 fdc8 	bl	80031a8 <HAL_RCC_ClockConfig>
 8000618:	1e03      	subs	r3, r0, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800061c:	f000 f8d6 	bl	80007cc <Error_Handler>
  }
}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b00d      	add	sp, #52	@ 0x34
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	40022000 	.word	0x40022000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000632:	4a1c      	ldr	r2, [pc, #112]	@ (80006a4 <MX_I2C1_Init+0x78>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10805D88;
 8000636:	4b1a      	ldr	r3, [pc, #104]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <MX_I2C1_Init+0x7c>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063c:	4b18      	ldr	r3, [pc, #96]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000642:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000644:	2201      	movs	r2, #1
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000648:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000668:	0018      	movs	r0, r3
 800066a:	f001 fd75 	bl	8002158 <HAL_I2C_Init>
 800066e:	1e03      	subs	r3, r0, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000672:	f000 f8ab 	bl	80007cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000676:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_I2C1_Init+0x74>)
 8000678:	2100      	movs	r1, #0
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fb18 	bl	8002cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000684:	f000 f8a2 	bl	80007cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000688:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <MX_I2C1_Init+0x74>)
 800068a:	2100      	movs	r1, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fb5b 	bl	8002d48 <HAL_I2CEx_ConfigDigitalFilter>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 f899 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200001d8 	.word	0x200001d8
 80006a4:	40005400 	.word	0x40005400
 80006a8:	10805d88 	.word	0x10805d88

080006ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006b0:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006b2:	4a24      	ldr	r2, [pc, #144]	@ (8000744 <MX_USART1_UART_Init+0x98>)
 80006b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006b6:	4b22      	ldr	r3, [pc, #136]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006b8:	22e1      	movs	r2, #225	@ 0xe1
 80006ba:	0252      	lsls	r2, r2, #9
 80006bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006d2:	220c      	movs	r2, #12
 80006d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f002 ffb8 	bl	800366c <HAL_UART_Init>
 80006fc:	1e03      	subs	r3, r0, #0
 80006fe:	d001      	beq.n	8000704 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000700:	f000 f864 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 8000706:	2100      	movs	r1, #0
 8000708:	0018      	movs	r0, r3
 800070a:	f003 fc95 	bl	8004038 <HAL_UARTEx_SetTxFifoThreshold>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000712:	f000 f85b 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000716:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 8000718:	2100      	movs	r1, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f003 fccc 	bl	80040b8 <HAL_UARTEx_SetRxFifoThreshold>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000724:	f000 f852 	bl	80007cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <MX_USART1_UART_Init+0x94>)
 800072a:	0018      	movs	r0, r3
 800072c:	f003 fc4a 	bl	8003fc4 <HAL_UARTEx_DisableFifoMode>
 8000730:	1e03      	subs	r3, r0, #0
 8000732:	d001      	beq.n	8000738 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000734:	f000 f84a 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	46c0      	nop			@ (mov r8, r8)
 8000740:	2000022c 	.word	0x2000022c
 8000744:	40013800 	.word	0x40013800

08000748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b14      	ldr	r3, [pc, #80]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000750:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000752:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000754:	2104      	movs	r1, #4
 8000756:	430a      	orrs	r2, r1
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <MX_GPIO_Init+0x58>)
 800075c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000766:	4b0e      	ldr	r3, [pc, #56]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000768:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_GPIO_Init+0x58>)
 800076c:	2120      	movs	r1, #32
 800076e:	430a      	orrs	r2, r1
 8000770:	635a      	str	r2, [r3, #52]	@ 0x34
 8000772:	4b0b      	ldr	r3, [pc, #44]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000776:	2220      	movs	r2, #32
 8000778:	4013      	ands	r3, r2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000780:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_GPIO_Init+0x58>)
 8000784:	2101      	movs	r1, #1
 8000786:	430a      	orrs	r2, r1
 8000788:	635a      	str	r2, [r3, #52]	@ 0x34
 800078a:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <MX_GPIO_Init+0x58>)
 800078c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800078e:	2201      	movs	r2, #1
 8000790:	4013      	ands	r3, r2
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000796:	46c0      	nop			@ (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b004      	add	sp, #16
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			@ (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0002      	movs	r2, r0
 80007ac:	1dfb      	adds	r3, r7, #7
 80007ae:	701a      	strb	r2, [r3, #0]
  if (Button == BUTTON_USER)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <BSP_PB_Callback+0x1a>
  {
    BspButtonState = BUTTON_PRESSED;
 80007b8:	4b03      	ldr	r3, [pc, #12]	@ (80007c8 <BSP_PB_Callback+0x24>)
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
  }
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	200001d4 	.word	0x200001d4

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	46c0      	nop			@ (mov r8, r8)
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_MspInit+0x44>)
 80007e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <HAL_MspInit+0x44>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	641a      	str	r2, [r3, #64]	@ 0x40
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <HAL_MspInit+0x44>)
 80007ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <HAL_MspInit+0x44>)
 80007f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <HAL_MspInit+0x44>)
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	0549      	lsls	r1, r1, #21
 8000800:	430a      	orrs	r2, r1
 8000802:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_MspInit+0x44>)
 8000806:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000808:	2380      	movs	r3, #128	@ 0x80
 800080a:	055b      	lsls	r3, r3, #21
 800080c:	4013      	ands	r3, r2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	40021000 	.word	0x40021000

08000820 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b091      	sub	sp, #68	@ 0x44
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	232c      	movs	r3, #44	@ 0x2c
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	0018      	movs	r0, r3
 800082e:	2314      	movs	r3, #20
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f003 ff00 	bl	8004638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000838:	2410      	movs	r4, #16
 800083a:	193b      	adds	r3, r7, r4
 800083c:	0018      	movs	r0, r3
 800083e:	231c      	movs	r3, #28
 8000840:	001a      	movs	r2, r3
 8000842:	2100      	movs	r1, #0
 8000844:	f003 fef8 	bl	8004638 <memset>
  if(hi2c->Instance==I2C1)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a23      	ldr	r2, [pc, #140]	@ (80008dc <HAL_I2C_MspInit+0xbc>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d13f      	bne.n	80008d2 <HAL_I2C_MspInit+0xb2>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000852:	193b      	adds	r3, r7, r4
 8000854:	2202      	movs	r2, #2
 8000856:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000858:	193b      	adds	r3, r7, r4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fe17 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800086a:	f7ff ffaf 	bl	80007cc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 8000870:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000872:	4b1b      	ldr	r3, [pc, #108]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 8000874:	2101      	movs	r1, #1
 8000876:	430a      	orrs	r2, r1
 8000878:	635a      	str	r2, [r3, #52]	@ 0x34
 800087a:	4b19      	ldr	r3, [pc, #100]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 800087c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800087e:	2201      	movs	r2, #1
 8000880:	4013      	ands	r3, r2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000886:	212c      	movs	r1, #44	@ 0x2c
 8000888:	187b      	adds	r3, r7, r1
 800088a:	22c0      	movs	r2, #192	@ 0xc0
 800088c:	00d2      	lsls	r2, r2, #3
 800088e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2212      	movs	r2, #18
 8000894:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089c:	187b      	adds	r3, r7, r1
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80008a2:	187b      	adds	r3, r7, r1
 80008a4:	2206      	movs	r2, #6
 80008a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	187a      	adds	r2, r7, r1
 80008aa:	23a0      	movs	r3, #160	@ 0xa0
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	0011      	movs	r1, r2
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 faa7 	bl	8001e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008bc:	2180      	movs	r1, #128	@ 0x80
 80008be:	0389      	lsls	r1, r1, #14
 80008c0:	430a      	orrs	r2, r1
 80008c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008c4:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_I2C_MspInit+0xc0>)
 80008c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	039b      	lsls	r3, r3, #14
 80008cc:	4013      	ands	r3, r2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b011      	add	sp, #68	@ 0x44
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	40005400 	.word	0x40005400
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b091      	sub	sp, #68	@ 0x44
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	232c      	movs	r3, #44	@ 0x2c
 80008ee:	18fb      	adds	r3, r7, r3
 80008f0:	0018      	movs	r0, r3
 80008f2:	2314      	movs	r3, #20
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f003 fe9e 	bl	8004638 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008fc:	2410      	movs	r4, #16
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	231c      	movs	r3, #28
 8000904:	001a      	movs	r2, r3
 8000906:	2100      	movs	r1, #0
 8000908:	f003 fe96 	bl	8004638 <memset>
  if(huart->Instance==USART1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a22      	ldr	r2, [pc, #136]	@ (800099c <HAL_UART_MspInit+0xb8>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d13e      	bne.n	8000994 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2201      	movs	r2, #1
 800091a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000922:	193b      	adds	r3, r7, r4
 8000924:	0018      	movs	r0, r3
 8000926:	f002 fdb5 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800092e:	f7ff ff4d 	bl	80007cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000932:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 8000934:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 8000938:	2180      	movs	r1, #128	@ 0x80
 800093a:	01c9      	lsls	r1, r1, #7
 800093c:	430a      	orrs	r2, r1
 800093e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 8000942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000944:	2380      	movs	r3, #128	@ 0x80
 8000946:	01db      	lsls	r3, r3, #7
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 8000950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 8000954:	2101      	movs	r1, #1
 8000956:	430a      	orrs	r2, r1
 8000958:	635a      	str	r2, [r3, #52]	@ 0x34
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <HAL_UART_MspInit+0xbc>)
 800095c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800095e:	2201      	movs	r2, #1
 8000960:	4013      	ands	r3, r2
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA0     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000966:	212c      	movs	r1, #44	@ 0x2c
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2203      	movs	r2, #3
 800096c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2202      	movs	r2, #2
 8000972:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	187a      	adds	r2, r7, r1
 8000988:	23a0      	movs	r3, #160	@ 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	0011      	movs	r1, r2
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fa38 	bl	8001e04 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b011      	add	sp, #68	@ 0x44
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	40013800 	.word	0x40013800
 80009a0:	40021000 	.word	0x40021000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f001 f86e 	bl	8001aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}

080009d6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 fa2a 	bl	8000e34 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	60f8      	str	r0, [r7, #12]
 80009ee:	60b9      	str	r1, [r7, #8]
 80009f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	e00a      	b.n	8000a0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009f8:	e000      	b.n	80009fc <_read+0x16>
 80009fa:	bf00      	nop
 80009fc:	0001      	movs	r1, r0
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	1c5a      	adds	r2, r3, #1
 8000a02:	60ba      	str	r2, [r7, #8]
 8000a04:	b2ca      	uxtb	r2, r1
 8000a06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a08:	697b      	ldr	r3, [r7, #20]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	617b      	str	r3, [r7, #20]
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	dbf0      	blt.n	80009f8 <_read+0x12>
  }

  return len;
 8000a16:	687b      	ldr	r3, [r7, #4]
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b006      	add	sp, #24
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	e009      	b.n	8000a46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1c5a      	adds	r2, r3, #1
 8000a36:	60ba      	str	r2, [r7, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fa7a 	bl	8000f34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	dbf1      	blt.n	8000a32 <_write+0x12>
  }
  return len;
 8000a4e:	687b      	ldr	r3, [r7, #4]
}
 8000a50:	0018      	movs	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b006      	add	sp, #24
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_close>:

int _close(int file)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b002      	add	sp, #8
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	2280      	movs	r2, #128	@ 0x80
 8000a7a:	0192      	lsls	r2, r2, #6
 8000a7c:	605a      	str	r2, [r3, #4]
  return 0;
 8000a7e:	2300      	movs	r3, #0
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_isatty>:

int _isatty(int file)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a90:	2301      	movs	r3, #1
}
 8000a92:	0018      	movs	r0, r3
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	60f8      	str	r0, [r7, #12]
 8000aa2:	60b9      	str	r1, [r7, #8]
 8000aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b004      	add	sp, #16
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	@ (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	@ (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	@ (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	@ (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	@ (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	18d3      	adds	r3, r2, r3
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f003 fe00 	bl	80046e4 <__errno>
 8000ae4:	0003      	movs	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	2301      	movs	r3, #1
 8000aec:	425b      	negs	r3, r3
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	@ (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	18d2      	adds	r2, r2, r3
 8000afe:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <_sbrk+0x64>)
 8000b00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b006      	add	sp, #24
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20003000 	.word	0x20003000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	200002c0 	.word	0x200002c0
 8000b18:	200004b8 	.word	0x200004b8

08000b1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <SystemInit+0x14>)
 8000b22:	2280      	movs	r2, #128	@ 0x80
 8000b24:	0512      	lsls	r2, r2, #20
 8000b26:	609a      	str	r2, [r3, #8]
#endif
}
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b34:	480d      	ldr	r0, [pc, #52]	@ (8000b6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b36:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b38:	f7ff fff0 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b3c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b3e:	e003      	b.n	8000b48 <LoopCopyDataInit>

08000b40 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b42:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b44:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b46:	3104      	adds	r1, #4

08000b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b48:	480a      	ldr	r0, [pc, #40]	@ (8000b74 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <LoopForever+0xe>)
  adds r2, r0, r1
 8000b4c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b4e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b50:	d3f6      	bcc.n	8000b40 <CopyDataInit>
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <LoopForever+0x12>)
  b LoopFillZerobss
 8000b54:	e002      	b.n	8000b5c <LoopFillZerobss>

08000b56 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b58:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5a:	3204      	adds	r2, #4

08000b5c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b5c:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <LoopForever+0x16>)
  cmp r2, r3
 8000b5e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b60:	d3f9      	bcc.n	8000b56 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b62:	f003 fdc5 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b66:	f7ff fcd1 	bl	800050c <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   r0, =_estack
 8000b6c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000b70:	080054b0 	.word	0x080054b0
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b78:	20000080 	.word	0x20000080
  ldr r2, =_sbss
 8000b7c:	20000080 	.word	0x20000080
  ldr r3, = _ebss
 8000b80:	200004b8 	.word	0x200004b8

08000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>
	...

08000b88 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	@ 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  gpio_init_structure;

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d007      	beq.n	8000bb0 <BSP_LED_Init+0x28>
      && (Led != LED2))
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d003      	beq.n	8000bb0 <BSP_LED_Init+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	425b      	negs	r3, r3
 8000bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bae:	e04a      	b.n	8000c46 <BSP_LED_Init+0xbe>
  }
  else
  {
    /* Enable the GPIO LED Clock */
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d10c      	bne.n	8000bd2 <BSP_LED_Init+0x4a>
    {
      LED1_GPIO_CLK_ENABLE();
 8000bb8:	4b25      	ldr	r3, [pc, #148]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000bba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bbc:	4b24      	ldr	r3, [pc, #144]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bc4:	4b22      	ldr	r3, [pc, #136]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4013      	ands	r3, r2
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	e00b      	b.n	8000bea <BSP_LED_Init+0x62>
    }
    else
    {
      LED2_GPIO_CLK_ENABLE();
 8000bd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000bd8:	2104      	movs	r1, #4
 8000bda:	430a      	orrs	r2, r1
 8000bdc:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bde:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <BSP_LED_Init+0xc8>)
 8000be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be2:	2204      	movs	r2, #4
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
      LED4_GPIO_CLK_ENABLE();
    }
#endif /* defined (USE_NUCLEO_64) */

    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781a      	ldrb	r2, [r3, #0]
 8000bee:	4b19      	ldr	r3, [pc, #100]	@ (8000c54 <BSP_LED_Init+0xcc>)
 8000bf0:	0052      	lsls	r2, r2, #1
 8000bf2:	5ad3      	ldrh	r3, [r2, r3]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	2110      	movs	r1, #16
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	601a      	str	r2, [r3, #0]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2201      	movs	r2, #1
 8000c00:	605a      	str	r2, [r3, #4]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2203      	movs	r2, #3
 8000c0c:	60da      	str	r2, [r3, #12]

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	781a      	ldrb	r2, [r3, #0]
 8000c12:	4b11      	ldr	r3, [pc, #68]	@ (8000c58 <BSP_LED_Init+0xd0>)
 8000c14:	0092      	lsls	r2, r2, #2
 8000c16:	58d3      	ldr	r3, [r2, r3]
 8000c18:	187a      	adds	r2, r7, r1
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 f8f1 	bl	8001e04 <HAL_GPIO_Init>
#if defined (USE_NUCLEO_64)
    if (Led == LED2)
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d10d      	bne.n	8000c46 <BSP_LED_Init+0xbe>
    {
     HAL_GPIO_WritePin(LED_PORT [Led], (uint16_t)LED_PIN[Led], GPIO_PIN_SET);
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781a      	ldrb	r2, [r3, #0]
 8000c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c58 <BSP_LED_Init+0xd0>)
 8000c30:	0092      	lsls	r2, r2, #2
 8000c32:	58d0      	ldr	r0, [r2, r3]
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <BSP_LED_Init+0xcc>)
 8000c3a:	0052      	lsls	r2, r2, #1
 8000c3c:	5ad3      	ldrh	r3, [r2, r3]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	0019      	movs	r1, r3
 8000c42:	f001 fa51 	bl	80020e8 <HAL_GPIO_WritePin>
    }
#endif
  }
  return ret;
 8000c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b00a      	add	sp, #40	@ 0x28
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40021000 	.word	0x40021000
 8000c54:	0800543c 	.word	0x0800543c
 8000c58:	20000008 	.word	0x20000008

08000c5c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	0002      	movs	r2, r0
 8000c64:	1dfb      	adds	r3, r7, #7
 8000c66:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000c6c:	1dfb      	adds	r3, r7, #7
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d007      	beq.n	8000c84 <BSP_LED_On+0x28>
      && (Led != LED2))
 8000c74:	1dfb      	adds	r3, r7, #7
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d003      	beq.n	8000c84 <BSP_LED_On+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	425b      	negs	r3, r3
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	e020      	b.n	8000cc6 <BSP_LED_On+0x6a>
  }
  else
  {
#if defined (USE_NUCLEO_64)
    if (Led == LED1)
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d10e      	bne.n	8000caa <BSP_LED_On+0x4e>
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd0 <BSP_LED_On+0x74>)
 8000c92:	0092      	lsls	r2, r2, #2
 8000c94:	58d0      	ldr	r0, [r2, r3]
 8000c96:	1dfb      	adds	r3, r7, #7
 8000c98:	781a      	ldrb	r2, [r3, #0]
 8000c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd4 <BSP_LED_On+0x78>)
 8000c9c:	0052      	lsls	r2, r2, #1
 8000c9e:	5ad3      	ldrh	r3, [r2, r3]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	0019      	movs	r1, r3
 8000ca4:	f001 fa20 	bl	80020e8 <HAL_GPIO_WritePin>
 8000ca8:	e00d      	b.n	8000cc6 <BSP_LED_On+0x6a>
    }
    else
    {
      HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	781a      	ldrb	r2, [r3, #0]
 8000cae:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <BSP_LED_On+0x74>)
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	58d0      	ldr	r0, [r2, r3]
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <BSP_LED_On+0x78>)
 8000cba:	0052      	lsls	r2, r2, #1
 8000cbc:	5ad3      	ldrh	r3, [r2, r3]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	0019      	movs	r1, r3
 8000cc2:	f001 fa11 	bl	80020e8 <HAL_GPIO_WritePin>

     HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
#endif
  }

  return ret;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	0018      	movs	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	0800543c 	.word	0x0800543c

08000cd8 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED4
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]

#if defined (USE_NUCLEO_64)
  if ((Led != LED1)
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d007      	beq.n	8000d00 <BSP_LED_Toggle+0x28>
      && (Led != LED2))
 8000cf0:	1dfb      	adds	r3, r7, #7
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d003      	beq.n	8000d00 <BSP_LED_Toggle+0x28>
#else
  if (Led != LED4)
#endif /* defined (USE_NUCLEO_64) */
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	60fb      	str	r3, [r7, #12]
 8000cfe:	e00c      	b.n	8000d1a <BSP_LED_Toggle+0x42>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000d00:	1dfb      	adds	r3, r7, #7
 8000d02:	781a      	ldrb	r2, [r3, #0]
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <BSP_LED_Toggle+0x4c>)
 8000d06:	0092      	lsls	r2, r2, #2
 8000d08:	58d0      	ldr	r0, [r2, r3]
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781a      	ldrb	r2, [r3, #0]
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <BSP_LED_Toggle+0x50>)
 8000d10:	0052      	lsls	r2, r2, #1
 8000d12:	5ad3      	ldrh	r3, [r2, r3]
 8000d14:	0019      	movs	r1, r3
 8000d16:	f001 fa04 	bl	8002122 <HAL_GPIO_TogglePin>
  }

  return ret;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b004      	add	sp, #16
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000008 	.word	0x20000008
 8000d28:	0800543c 	.word	0x0800543c

08000d2c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b088      	sub	sp, #32
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	0002      	movs	r2, r0
 8000d34:	1dfb      	adds	r3, r7, #7
 8000d36:	701a      	strb	r2, [r3, #0]
 8000d38:	1dbb      	adds	r3, r7, #6
 8000d3a:	1c0a      	adds	r2, r1, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000d3e:	4b36      	ldr	r3, [pc, #216]	@ (8000e18 <BSP_PB_Init+0xec>)
 8000d40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d42:	4b35      	ldr	r3, [pc, #212]	@ (8000e18 <BSP_PB_Init+0xec>)
 8000d44:	2104      	movs	r1, #4
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d4a:	4b33      	ldr	r3, [pc, #204]	@ (8000e18 <BSP_PB_Init+0xec>)
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4e:	2204      	movs	r2, #4
 8000d50:	4013      	ands	r3, r2
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000d56:	2380      	movs	r3, #128	@ 0x80
 8000d58:	019b      	lsls	r3, r3, #6
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	210c      	movs	r1, #12
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2201      	movs	r2, #1
 8000d66:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	60da      	str	r2, [r3, #12]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8000d6e:	1dbb      	adds	r3, r7, #6
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10d      	bne.n	8000d92 <BSP_PB_Init+0x66>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2200      	movs	r2, #0
 8000d7a:	605a      	str	r2, [r3, #4]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	4b26      	ldr	r3, [pc, #152]	@ (8000e1c <BSP_PB_Init+0xf0>)
 8000d82:	0092      	lsls	r2, r2, #2
 8000d84:	58d3      	ldr	r3, [r2, r3]
 8000d86:	187a      	adds	r2, r7, r1
 8000d88:	0011      	movs	r1, r2
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f001 f83a 	bl	8001e04 <HAL_GPIO_Init>
 8000d90:	e03c      	b.n	8000e0c <BSP_PB_Init+0xe0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 8000d92:	210c      	movs	r1, #12
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	4a22      	ldr	r2, [pc, #136]	@ (8000e20 <BSP_PB_Init+0xf4>)
 8000d98:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <BSP_PB_Init+0xf0>)
 8000da0:	0092      	lsls	r2, r2, #2
 8000da2:	58d3      	ldr	r3, [r2, r3]
 8000da4:	187a      	adds	r2, r7, r1
 8000da6:	0011      	movs	r1, r2
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 f82b 	bl	8001e04 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781a      	ldrb	r2, [r3, #0]
 8000db2:	0013      	movs	r3, r2
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	189b      	adds	r3, r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4a1a      	ldr	r2, [pc, #104]	@ (8000e24 <BSP_PB_Init+0xf8>)
 8000dbc:	1898      	adds	r0, r3, r2
 8000dbe:	1dfb      	adds	r3, r7, #7
 8000dc0:	781a      	ldrb	r2, [r3, #0]
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <BSP_PB_Init+0xfc>)
 8000dc4:	0092      	lsls	r2, r2, #2
 8000dc6:	58d3      	ldr	r3, [r2, r3]
 8000dc8:	0019      	movs	r1, r3
 8000dca:	f000 ffbf 	bl	8001d4c <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781a      	ldrb	r2, [r3, #0]
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	4a12      	ldr	r2, [pc, #72]	@ (8000e24 <BSP_PB_Init+0xf8>)
 8000ddc:	1898      	adds	r0, r3, r2
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	781a      	ldrb	r2, [r3, #0]
 8000de2:	4b12      	ldr	r3, [pc, #72]	@ (8000e2c <BSP_PB_Init+0x100>)
 8000de4:	0092      	lsls	r2, r2, #2
 8000de6:	58d3      	ldr	r3, [r2, r3]
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f000 ff7c 	bl	8001ce8 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000df0:	2007      	movs	r0, #7
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <BSP_PB_Init+0x104>)
 8000df8:	0092      	lsls	r2, r2, #2
 8000dfa:	58d3      	ldr	r3, [r2, r3]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f000 ff40 	bl	8001c84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000e04:	2307      	movs	r3, #7
 8000e06:	0018      	movs	r0, r3
 8000e08:	f000 ff51 	bl	8001cae <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b008      	add	sp, #32
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	20000010 	.word	0x20000010
 8000e20:	10210000 	.word	0x10210000
 8000e24:	200002c4 	.word	0x200002c4
 8000e28:	08005440 	.word	0x08005440
 8000e2c:	20000014 	.word	0x20000014
 8000e30:	20000018 	.word	0x20000018

08000e34 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	0013      	movs	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	189b      	adds	r3, r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <BSP_PB_IRQHandler+0x2c>)
 8000e4e:	189b      	adds	r3, r3, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 ff8d 	bl	8001d70 <HAL_EXTI_IRQHandler>
}
 8000e56:	46c0      	nop			@ (mov r8, r8)
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	b002      	add	sp, #8
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			@ (mov r8, r8)
 8000e60:	200002c4 	.word	0x200002c4

08000e64 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	0002      	movs	r2, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	1dfb      	adds	r3, r7, #7
 8000e70:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]

  if (COM >= COMn)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <BSP_COM_Init+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	425b      	negs	r3, r3
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	e018      	b.n	8000eb8 <BSP_COM_Init+0x54>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2294      	movs	r2, #148	@ 0x94
 8000e8c:	435a      	muls	r2, r3
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <BSP_COM_Init+0x60>)
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	0018      	movs	r0, r3
 8000e94:	f000 f870 	bl	8000f78 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS == 0) */

    if (MX_USART2_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2294      	movs	r2, #148	@ 0x94
 8000e9e:	435a      	muls	r2, r3
 8000ea0:	4b08      	ldr	r3, [pc, #32]	@ (8000ec4 <BSP_COM_Init+0x60>)
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f000 f80d 	bl	8000ec8 <MX_USART2_Init>
 8000eae:	1e03      	subs	r3, r0, #0
 8000eb0:	d002      	beq.n	8000eb8 <BSP_COM_Init+0x54>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	425b      	negs	r3, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	200002d0 	.word	0x200002d0

08000ec8 <MX_USART2_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART2_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
  huart->Instance                = COM_USART[COM1];
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_USART2_Init+0x68>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate           = COM_Init->BaudRate;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	605a      	str	r2, [r3, #4]
  huart->Init.Mode               = UART_MODE_TX_RX;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	220c      	movs	r2, #12
 8000ee6:	615a      	str	r2, [r3, #20]
  huart->Init.Parity             = (uint32_t)COM_Init->Parity;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	895b      	ldrh	r3, [r3, #10]
 8000eec:	001a      	movs	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	611a      	str	r2, [r3, #16]
  huart->Init.WordLength         = (uint32_t)COM_Init->WordLength;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits           = (uint32_t)COM_Init->StopBits;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	891b      	ldrh	r3, [r3, #8]
 8000efe:	001a      	movs	r2, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	60da      	str	r2, [r3, #12]
  huart->Init.HwFlowCtl          = (uint32_t)COM_Init->HwFlowCtl;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	899b      	ldrh	r3, [r3, #12]
 8000f08:	001a      	movs	r2, r3
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling       = UART_OVERSAMPLING_8;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2280      	movs	r2, #128	@ 0x80
 8000f12:	0212      	lsls	r2, r2, #8
 8000f14:	61da      	str	r2, [r3, #28]
  huart->Init.ClockPrescaler     = UART_PRESCALER_DIV1;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	@ 0x24
  return HAL_UART_Init(huart);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f002 fba4 	bl	800366c <HAL_UART_Init>
 8000f24:	0003      	movs	r3, r0
}
 8000f26:	0018      	movs	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			@ (mov r8, r8)
 8000f30:	20000004 	.word	0x20000004

08000f34 <__io_putchar>:
/**
  * @brief  Redirect console output to COM
  */

PUTCHAR_PROTOTYPE
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8000f3c:	4b08      	ldr	r3, [pc, #32]	@ (8000f60 <__io_putchar+0x2c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	001a      	movs	r2, r3
 8000f42:	2394      	movs	r3, #148	@ 0x94
 8000f44:	435a      	muls	r2, r3
 8000f46:	4b07      	ldr	r3, [pc, #28]	@ (8000f64 <__io_putchar+0x30>)
 8000f48:	18d0      	adds	r0, r2, r3
 8000f4a:	23fa      	movs	r3, #250	@ 0xfa
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	1d39      	adds	r1, r7, #4
 8000f50:	2201      	movs	r2, #1
 8000f52:	f002 fbe1 	bl	8003718 <HAL_UART_Transmit>
  return ch;
 8000f56:	687b      	ldr	r3, [r7, #4]
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20000364 	.word	0x20000364
 8000f64:	200002d0 	.word	0x200002d0

08000f68 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f7ff fc19 	bl	80007a4 <BSP_PB_Callback>
}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b08b      	sub	sp, #44	@ 0x2c
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000f80:	4b28      	ldr	r3, [pc, #160]	@ (8001024 <COM1_MspInit+0xac>)
 8000f82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f84:	4b27      	ldr	r3, [pc, #156]	@ (8001024 <COM1_MspInit+0xac>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8c:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <COM1_MspInit+0xac>)
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f90:	2201      	movs	r2, #1
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000f98:	4b22      	ldr	r3, [pc, #136]	@ (8001024 <COM1_MspInit+0xac>)
 8000f9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f9c:	4b21      	ldr	r3, [pc, #132]	@ (8001024 <COM1_MspInit+0xac>)
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <COM1_MspInit+0xac>)
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4013      	ands	r3, r2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8001024 <COM1_MspInit+0xac>)
 8000fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001024 <COM1_MspInit+0xac>)
 8000fb6:	2180      	movs	r1, #128	@ 0x80
 8000fb8:	0289      	lsls	r1, r1, #10
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fbe:	4b19      	ldr	r3, [pc, #100]	@ (8001024 <COM1_MspInit+0xac>)
 8000fc0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fc2:	2380      	movs	r3, #128	@ 0x80
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8000fcc:	2414      	movs	r4, #20
 8000fce:	193b      	adds	r3, r7, r4
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8000fd4:	193b      	adds	r3, r7, r4
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	2202      	movs	r2, #2
 8000fde:	60da      	str	r2, [r3, #12]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8000fe0:	193b      	adds	r3, r7, r4
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	609a      	str	r2, [r3, #8]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000fe6:	193b      	adds	r3, r7, r4
 8000fe8:	2201      	movs	r2, #1
 8000fea:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000fec:	193a      	adds	r2, r7, r4
 8000fee:	23a0      	movs	r3, #160	@ 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 ff05 	bl	8001e04 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin       = COM1_RX_PIN;
 8000ffa:	193b      	adds	r3, r7, r4
 8000ffc:	2208      	movs	r2, #8
 8000ffe:	601a      	str	r2, [r3, #0]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001000:	193b      	adds	r3, r7, r4
 8001002:	2202      	movs	r2, #2
 8001004:	605a      	str	r2, [r3, #4]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001006:	193b      	adds	r3, r7, r4
 8001008:	2201      	movs	r2, #1
 800100a:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800100c:	193a      	adds	r2, r7, r4
 800100e:	23a0      	movs	r3, #160	@ 0xa0
 8001010:	05db      	lsls	r3, r3, #23
 8001012:	0011      	movs	r1, r2
 8001014:	0018      	movs	r0, r3
 8001016:	f000 fef5 	bl	8001e04 <HAL_GPIO_Init>
}
 800101a:	46c0      	nop			@ (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b00b      	add	sp, #44	@ 0x2c
 8001020:	bd90      	pop	{r4, r7, pc}
 8001022:	46c0      	nop			@ (mov r8, r8)
 8001024:	40021000 	.word	0x40021000

08001028 <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b0c9      	sub	sp, #292	@ 0x124
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	4b63      	ldr	r3, [pc, #396]	@ (80011c0 <PN532_WriteFrame+0x198>)
 8001034:	2190      	movs	r1, #144	@ 0x90
 8001036:	0049      	lsls	r1, r1, #1
 8001038:	185b      	adds	r3, r3, r1
 800103a:	19db      	adds	r3, r3, r7
 800103c:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 800103e:	4b60      	ldr	r3, [pc, #384]	@ (80011c0 <PN532_WriteFrame+0x198>)
 8001040:	000a      	movs	r2, r1
 8001042:	189b      	adds	r3, r3, r2
 8001044:	19db      	adds	r3, r3, r7
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	2bff      	cmp	r3, #255	@ 0xff
 800104a:	d805      	bhi.n	8001058 <PN532_WriteFrame+0x30>
 800104c:	4b5c      	ldr	r3, [pc, #368]	@ (80011c0 <PN532_WriteFrame+0x198>)
 800104e:	189b      	adds	r3, r3, r2
 8001050:	19db      	adds	r3, r3, r7
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <PN532_WriteFrame+0x36>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8001058:	2301      	movs	r3, #1
 800105a:	425b      	negs	r3, r3
 800105c:	e0ac      	b.n	80011b8 <PN532_WriteFrame+0x190>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 800105e:	2320      	movs	r3, #32
 8001060:	33ff      	adds	r3, #255	@ 0xff
 8001062:	18fb      	adds	r3, r7, r3
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
    frame[0] = PN532_PREAMBLE;
 8001068:	4b56      	ldr	r3, [pc, #344]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 800106a:	2190      	movs	r1, #144	@ 0x90
 800106c:	0049      	lsls	r1, r1, #1
 800106e:	185b      	adds	r3, r3, r1
 8001070:	19db      	adds	r3, r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8001076:	4b53      	ldr	r3, [pc, #332]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 8001078:	185b      	adds	r3, r3, r1
 800107a:	19db      	adds	r3, r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8001080:	4b50      	ldr	r3, [pc, #320]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 8001082:	185b      	adds	r3, r3, r1
 8001084:	19db      	adds	r3, r3, r7
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 800108a:	238f      	movs	r3, #143	@ 0x8f
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	18fb      	adds	r3, r7, r3
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
 8001094:	e015      	b.n	80010c2 <PN532_WriteFrame+0x9a>
        checksum += frame[i];
 8001096:	208f      	movs	r0, #143	@ 0x8f
 8001098:	0040      	lsls	r0, r0, #1
 800109a:	183b      	adds	r3, r7, r0
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4a49      	ldr	r2, [pc, #292]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 80010a0:	2190      	movs	r1, #144	@ 0x90
 80010a2:	0049      	lsls	r1, r1, #1
 80010a4:	1852      	adds	r2, r2, r1
 80010a6:	19d2      	adds	r2, r2, r7
 80010a8:	5cd1      	ldrb	r1, [r2, r3]
 80010aa:	2220      	movs	r2, #32
 80010ac:	32ff      	adds	r2, #255	@ 0xff
 80010ae:	18bb      	adds	r3, r7, r2
 80010b0:	18ba      	adds	r2, r7, r2
 80010b2:	7812      	ldrb	r2, [r2, #0]
 80010b4:	188a      	adds	r2, r1, r2
 80010b6:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 3; i++) {
 80010b8:	183b      	adds	r3, r7, r0
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	183b      	adds	r3, r7, r0
 80010be:	3201      	adds	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	238f      	movs	r3, #143	@ 0x8f
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d9e3      	bls.n	8001096 <PN532_WriteFrame+0x6e>
    }
    frame[3] = length & 0xFF;
 80010ce:	4b3c      	ldr	r3, [pc, #240]	@ (80011c0 <PN532_WriteFrame+0x198>)
 80010d0:	2190      	movs	r1, #144	@ 0x90
 80010d2:	0049      	lsls	r1, r1, #1
 80010d4:	185b      	adds	r3, r3, r1
 80010d6:	19db      	adds	r3, r3, r7
 80010d8:	881b      	ldrh	r3, [r3, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b39      	ldr	r3, [pc, #228]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 80010de:	185b      	adds	r3, r3, r1
 80010e0:	19db      	adds	r3, r3, r7
 80010e2:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 80010e4:	4b36      	ldr	r3, [pc, #216]	@ (80011c0 <PN532_WriteFrame+0x198>)
 80010e6:	185b      	adds	r3, r3, r1
 80010e8:	19db      	adds	r3, r3, r7
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	425b      	negs	r3, r3
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4b34      	ldr	r3, [pc, #208]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 80010f4:	185b      	adds	r3, r3, r1
 80010f6:	19db      	adds	r3, r3, r7
 80010f8:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 80010fa:	231e      	movs	r3, #30
 80010fc:	33ff      	adds	r3, #255	@ 0xff
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
 8001104:	e020      	b.n	8001148 <PN532_WriteFrame+0x120>
        frame[5 + i] = data[i];
 8001106:	201e      	movs	r0, #30
 8001108:	30ff      	adds	r0, #255	@ 0xff
 800110a:	183b      	adds	r3, r7, r0
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	18d2      	adds	r2, r2, r3
 8001112:	183b      	adds	r3, r7, r0
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	3305      	adds	r3, #5
 8001118:	7811      	ldrb	r1, [r2, #0]
 800111a:	4a2a      	ldr	r2, [pc, #168]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 800111c:	2490      	movs	r4, #144	@ 0x90
 800111e:	0064      	lsls	r4, r4, #1
 8001120:	1912      	adds	r2, r2, r4
 8001122:	19d2      	adds	r2, r2, r7
 8001124:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8001126:	183b      	adds	r3, r7, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	18d3      	adds	r3, r2, r3
 800112e:	7819      	ldrb	r1, [r3, #0]
 8001130:	2220      	movs	r2, #32
 8001132:	32ff      	adds	r2, #255	@ 0xff
 8001134:	18bb      	adds	r3, r7, r2
 8001136:	18ba      	adds	r2, r7, r2
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	188a      	adds	r2, r1, r2
 800113c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < length; i++) {
 800113e:	183b      	adds	r3, r7, r0
 8001140:	781a      	ldrb	r2, [r3, #0]
 8001142:	183b      	adds	r3, r7, r0
 8001144:	3201      	adds	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
 8001148:	231e      	movs	r3, #30
 800114a:	33ff      	adds	r3, #255	@ 0xff
 800114c:	18fb      	adds	r3, r7, r3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b29b      	uxth	r3, r3
 8001152:	4a1b      	ldr	r2, [pc, #108]	@ (80011c0 <PN532_WriteFrame+0x198>)
 8001154:	2090      	movs	r0, #144	@ 0x90
 8001156:	0040      	lsls	r0, r0, #1
 8001158:	1812      	adds	r2, r2, r0
 800115a:	19d2      	adds	r2, r2, r7
 800115c:	8812      	ldrh	r2, [r2, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d8d1      	bhi.n	8001106 <PN532_WriteFrame+0xde>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8001162:	4b17      	ldr	r3, [pc, #92]	@ (80011c0 <PN532_WriteFrame+0x198>)
 8001164:	181b      	adds	r3, r3, r0
 8001166:	19db      	adds	r3, r3, r7
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	3305      	adds	r3, #5
 800116c:	2220      	movs	r2, #32
 800116e:	32ff      	adds	r2, #255	@ 0xff
 8001170:	18ba      	adds	r2, r7, r2
 8001172:	7812      	ldrb	r2, [r2, #0]
 8001174:	43d2      	mvns	r2, r2
 8001176:	b2d1      	uxtb	r1, r2
 8001178:	4a12      	ldr	r2, [pc, #72]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 800117a:	1812      	adds	r2, r2, r0
 800117c:	19d2      	adds	r2, r2, r7
 800117e:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8001180:	4b0f      	ldr	r3, [pc, #60]	@ (80011c0 <PN532_WriteFrame+0x198>)
 8001182:	181b      	adds	r3, r3, r0
 8001184:	19db      	adds	r3, r3, r7
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	3306      	adds	r3, #6
 800118a:	4a0e      	ldr	r2, [pc, #56]	@ (80011c4 <PN532_WriteFrame+0x19c>)
 800118c:	1812      	adds	r2, r2, r0
 800118e:	19d2      	adds	r2, r2, r7
 8001190:	2100      	movs	r1, #0
 8001192:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4a09      	ldr	r2, [pc, #36]	@ (80011c0 <PN532_WriteFrame+0x198>)
 800119a:	1812      	adds	r2, r2, r0
 800119c:	19d2      	adds	r2, r2, r7
 800119e:	8812      	ldrh	r2, [r2, #0]
 80011a0:	3207      	adds	r2, #7
 80011a2:	b291      	uxth	r1, r2
 80011a4:	2214      	movs	r2, #20
 80011a6:	18ba      	adds	r2, r7, r2
 80011a8:	0010      	movs	r0, r2
 80011aa:	4798      	blx	r3
 80011ac:	1e03      	subs	r3, r0, #0
 80011ae:	d002      	beq.n	80011b6 <PN532_WriteFrame+0x18e>
        return PN532_STATUS_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	425b      	negs	r3, r3
 80011b4:	e000      	b.n	80011b8 <PN532_WriteFrame+0x190>
    }
    return PN532_STATUS_OK;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	0018      	movs	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b049      	add	sp, #292	@ 0x124
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	fffffee6 	.word	0xfffffee6
 80011c4:	fffffef4 	.word	0xfffffef4

080011c8 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	b0c8      	sub	sp, #288	@ 0x120
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4b7f      	ldr	r3, [pc, #508]	@ (80013d0 <PN532_ReadFrame+0x208>)
 80011d4:	2190      	movs	r1, #144	@ 0x90
 80011d6:	0049      	lsls	r1, r1, #1
 80011d8:	185b      	adds	r3, r3, r1
 80011da:	19db      	adds	r3, r3, r7
 80011dc:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 80011de:	2320      	movs	r3, #32
 80011e0:	33ff      	adds	r3, #255	@ 0xff
 80011e2:	18fb      	adds	r3, r7, r3
 80011e4:	2200      	movs	r2, #0
 80011e6:	701a      	strb	r2, [r3, #0]
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	4a78      	ldr	r2, [pc, #480]	@ (80013d0 <PN532_ReadFrame+0x208>)
 80011ee:	1852      	adds	r2, r2, r1
 80011f0:	19d2      	adds	r2, r2, r7
 80011f2:	8812      	ldrh	r2, [r2, #0]
 80011f4:	3207      	adds	r2, #7
 80011f6:	b291      	uxth	r1, r2
 80011f8:	2214      	movs	r2, #20
 80011fa:	18ba      	adds	r2, r7, r2
 80011fc:	0010      	movs	r0, r2
 80011fe:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8001200:	238f      	movs	r3, #143	@ 0x8f
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	18fb      	adds	r3, r7, r3
 8001206:	2200      	movs	r2, #0
 8001208:	701a      	strb	r2, [r3, #0]
    while (buff[offset] == 0x00) {
 800120a:	e019      	b.n	8001240 <PN532_ReadFrame+0x78>
        offset += 1;
 800120c:	218f      	movs	r1, #143	@ 0x8f
 800120e:	0049      	lsls	r1, r1, #1
 8001210:	187b      	adds	r3, r7, r1
 8001212:	187a      	adds	r2, r7, r1
 8001214:	7812      	ldrb	r2, [r2, #0]
 8001216:	3201      	adds	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
        if (offset >= length + 8){
 800121a:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <PN532_ReadFrame+0x208>)
 800121c:	2290      	movs	r2, #144	@ 0x90
 800121e:	0052      	lsls	r2, r2, #1
 8001220:	189b      	adds	r3, r3, r2
 8001222:	19db      	adds	r3, r3, r7
 8001224:	881b      	ldrh	r3, [r3, #0]
 8001226:	1dda      	adds	r2, r3, #7
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	da07      	bge.n	8001240 <PN532_ReadFrame+0x78>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4a67      	ldr	r2, [pc, #412]	@ (80013d4 <PN532_ReadFrame+0x20c>)
 8001236:	0010      	movs	r0, r2
 8001238:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	e0c2      	b.n	80013c6 <PN532_ReadFrame+0x1fe>
    while (buff[offset] == 0x00) {
 8001240:	218f      	movs	r1, #143	@ 0x8f
 8001242:	0049      	lsls	r1, r1, #1
 8001244:	187b      	adds	r3, r7, r1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	4a63      	ldr	r2, [pc, #396]	@ (80013d8 <PN532_ReadFrame+0x210>)
 800124a:	2090      	movs	r0, #144	@ 0x90
 800124c:	0040      	lsls	r0, r0, #1
 800124e:	1812      	adds	r2, r2, r0
 8001250:	19d2      	adds	r2, r2, r7
 8001252:	5cd3      	ldrb	r3, [r2, r3]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0d9      	beq.n	800120c <PN532_ReadFrame+0x44>
        }
    }
    if (buff[offset] != 0xFF) {
 8001258:	187b      	adds	r3, r7, r1
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	4a5e      	ldr	r2, [pc, #376]	@ (80013d8 <PN532_ReadFrame+0x210>)
 800125e:	1812      	adds	r2, r2, r0
 8001260:	19d2      	adds	r2, r2, r7
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	2bff      	cmp	r3, #255	@ 0xff
 8001266:	d007      	beq.n	8001278 <PN532_ReadFrame+0xb0>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a59      	ldr	r2, [pc, #356]	@ (80013d4 <PN532_ReadFrame+0x20c>)
 800126e:	0010      	movs	r0, r2
 8001270:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	425b      	negs	r3, r3
 8001276:	e0a6      	b.n	80013c6 <PN532_ReadFrame+0x1fe>
    }
    offset += 1;
 8001278:	218f      	movs	r1, #143	@ 0x8f
 800127a:	0049      	lsls	r1, r1, #1
 800127c:	187b      	adds	r3, r7, r1
 800127e:	187a      	adds	r2, r7, r1
 8001280:	7812      	ldrb	r2, [r2, #0]
 8001282:	3201      	adds	r2, #1
 8001284:	701a      	strb	r2, [r3, #0]
    if (offset >= length + 8) {
 8001286:	4b52      	ldr	r3, [pc, #328]	@ (80013d0 <PN532_ReadFrame+0x208>)
 8001288:	2290      	movs	r2, #144	@ 0x90
 800128a:	0052      	lsls	r2, r2, #1
 800128c:	189b      	adds	r3, r3, r2
 800128e:	19db      	adds	r3, r3, r7
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	1dda      	adds	r2, r3, #7
 8001294:	187b      	adds	r3, r7, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	429a      	cmp	r2, r3
 800129a:	da07      	bge.n	80012ac <PN532_ReadFrame+0xe4>
        pn532->log("Response contains no data!");
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	4a4e      	ldr	r2, [pc, #312]	@ (80013dc <PN532_ReadFrame+0x214>)
 80012a2:	0010      	movs	r0, r2
 80012a4:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	425b      	negs	r3, r3
 80012aa:	e08c      	b.n	80013c6 <PN532_ReadFrame+0x1fe>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 80012ac:	208f      	movs	r0, #143	@ 0x8f
 80012ae:	0040      	lsls	r0, r0, #1
 80012b0:	183b      	adds	r3, r7, r0
 80012b2:	781a      	ldrb	r2, [r3, #0]
 80012b4:	241c      	movs	r4, #28
 80012b6:	34ff      	adds	r4, #255	@ 0xff
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	4947      	ldr	r1, [pc, #284]	@ (80013d8 <PN532_ReadFrame+0x210>)
 80012bc:	2590      	movs	r5, #144	@ 0x90
 80012be:	006d      	lsls	r5, r5, #1
 80012c0:	1949      	adds	r1, r1, r5
 80012c2:	19c9      	adds	r1, r1, r7
 80012c4:	5c8a      	ldrb	r2, [r1, r2]
 80012c6:	701a      	strb	r2, [r3, #0]
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 80012c8:	183b      	adds	r3, r7, r0
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a42      	ldr	r2, [pc, #264]	@ (80013d8 <PN532_ReadFrame+0x210>)
 80012d0:	1952      	adds	r2, r2, r5
 80012d2:	19d2      	adds	r2, r2, r7
 80012d4:	5cd2      	ldrb	r2, [r2, r3]
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	18d3      	adds	r3, r2, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <PN532_ReadFrame+0x12a>
        pn532->log("Response length checksum did not match length!");
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	4a3e      	ldr	r2, [pc, #248]	@ (80013e0 <PN532_ReadFrame+0x218>)
 80012e8:	0010      	movs	r0, r2
 80012ea:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	425b      	negs	r3, r3
 80012f0:	e069      	b.n	80013c6 <PN532_ReadFrame+0x1fe>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 80012f2:	231e      	movs	r3, #30
 80012f4:	33ff      	adds	r3, #255	@ 0xff
 80012f6:	18fb      	adds	r3, r7, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	701a      	strb	r2, [r3, #0]
 80012fc:	e01b      	b.n	8001336 <PN532_ReadFrame+0x16e>
        checksum += buff[offset + 2 + i];
 80012fe:	238f      	movs	r3, #143	@ 0x8f
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	1c9a      	adds	r2, r3, #2
 8001308:	201e      	movs	r0, #30
 800130a:	30ff      	adds	r0, #255	@ 0xff
 800130c:	183b      	adds	r3, r7, r0
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	18d3      	adds	r3, r2, r3
 8001312:	4a31      	ldr	r2, [pc, #196]	@ (80013d8 <PN532_ReadFrame+0x210>)
 8001314:	2190      	movs	r1, #144	@ 0x90
 8001316:	0049      	lsls	r1, r1, #1
 8001318:	1852      	adds	r2, r2, r1
 800131a:	19d2      	adds	r2, r2, r7
 800131c:	5cd1      	ldrb	r1, [r2, r3]
 800131e:	2220      	movs	r2, #32
 8001320:	32ff      	adds	r2, #255	@ 0xff
 8001322:	18bb      	adds	r3, r7, r2
 8001324:	18ba      	adds	r2, r7, r2
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	188a      	adds	r2, r1, r2
 800132a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 800132c:	183b      	adds	r3, r7, r0
 800132e:	781a      	ldrb	r2, [r3, #0]
 8001330:	183b      	adds	r3, r7, r0
 8001332:	3201      	adds	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]
 8001336:	231c      	movs	r3, #28
 8001338:	33ff      	adds	r3, #255	@ 0xff
 800133a:	18fa      	adds	r2, r7, r3
 800133c:	231e      	movs	r3, #30
 800133e:	33ff      	adds	r3, #255	@ 0xff
 8001340:	18fb      	adds	r3, r7, r3
 8001342:	7812      	ldrb	r2, [r2, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d2d9      	bcs.n	80012fe <PN532_ReadFrame+0x136>
    }
    checksum &= 0xFF;
 800134a:	2120      	movs	r1, #32
 800134c:	31ff      	adds	r1, #255	@ 0xff
 800134e:	187b      	adds	r3, r7, r1
 8001350:	187a      	adds	r2, r7, r1
 8001352:	7812      	ldrb	r2, [r2, #0]
 8001354:	701a      	strb	r2, [r3, #0]
    if (checksum != 0) {
 8001356:	187b      	adds	r3, r7, r1
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d007      	beq.n	800136e <PN532_ReadFrame+0x1a6>
        pn532->log("Response checksum did not match expected checksum");
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a20      	ldr	r2, [pc, #128]	@ (80013e4 <PN532_ReadFrame+0x21c>)
 8001364:	0010      	movs	r0, r2
 8001366:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	425b      	negs	r3, r3
 800136c:	e02b      	b.n	80013c6 <PN532_ReadFrame+0x1fe>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 800136e:	238e      	movs	r3, #142	@ 0x8e
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
 8001378:	e019      	b.n	80013ae <PN532_ReadFrame+0x1e6>
        response[i] = buff[offset + 2 + i];
 800137a:	238f      	movs	r3, #143	@ 0x8f
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	1c9a      	adds	r2, r3, #2
 8001384:	208e      	movs	r0, #142	@ 0x8e
 8001386:	0040      	lsls	r0, r0, #1
 8001388:	183b      	adds	r3, r7, r0
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	18d2      	adds	r2, r2, r3
 800138e:	183b      	adds	r3, r7, r0
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	68b9      	ldr	r1, [r7, #8]
 8001394:	18cb      	adds	r3, r1, r3
 8001396:	4910      	ldr	r1, [pc, #64]	@ (80013d8 <PN532_ReadFrame+0x210>)
 8001398:	2490      	movs	r4, #144	@ 0x90
 800139a:	0064      	lsls	r4, r4, #1
 800139c:	1909      	adds	r1, r1, r4
 800139e:	19c9      	adds	r1, r1, r7
 80013a0:	5c8a      	ldrb	r2, [r1, r2]
 80013a2:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 80013a4:	183b      	adds	r3, r7, r0
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	183b      	adds	r3, r7, r0
 80013aa:	3201      	adds	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
 80013ae:	238e      	movs	r3, #142	@ 0x8e
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	18fa      	adds	r2, r7, r3
 80013b4:	211c      	movs	r1, #28
 80013b6:	31ff      	adds	r1, #255	@ 0xff
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	7812      	ldrb	r2, [r2, #0]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d3db      	bcc.n	800137a <PN532_ReadFrame+0x1b2>
    }
    return frame_len;
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	781b      	ldrb	r3, [r3, #0]
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b048      	add	sp, #288	@ 0x120
 80013cc:	bdb0      	pop	{r4, r5, r7, pc}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	fffffee6 	.word	0xfffffee6
 80013d4:	08005248 	.word	0x08005248
 80013d8:	fffffef4 	.word	0xfffffef4
 80013dc:	0800527c 	.word	0x0800527c
 80013e0:	08005298 	.word	0x08005298
 80013e4:	080052c8 	.word	0x080052c8

080013e8 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b0c7      	sub	sp, #284	@ 0x11c
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	0008      	movs	r0, r1
 80013f2:	607a      	str	r2, [r7, #4]
 80013f4:	0019      	movs	r1, r3
 80013f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001628 <PN532_CallFunction+0x240>)
 80013f8:	248c      	movs	r4, #140	@ 0x8c
 80013fa:	0064      	lsls	r4, r4, #1
 80013fc:	191b      	adds	r3, r3, r4
 80013fe:	19db      	adds	r3, r3, r7
 8001400:	1c02      	adds	r2, r0, #0
 8001402:	701a      	strb	r2, [r3, #0]
 8001404:	4b89      	ldr	r3, [pc, #548]	@ (800162c <PN532_CallFunction+0x244>)
 8001406:	0020      	movs	r0, r4
 8001408:	181b      	adds	r3, r3, r0
 800140a:	19db      	adds	r3, r3, r7
 800140c:	1c0a      	adds	r2, r1, #0
 800140e:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8001410:	4b87      	ldr	r3, [pc, #540]	@ (8001630 <PN532_CallFunction+0x248>)
 8001412:	0001      	movs	r1, r0
 8001414:	185b      	adds	r3, r3, r1
 8001416:	19db      	adds	r3, r3, r7
 8001418:	22d4      	movs	r2, #212	@ 0xd4
 800141a:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 800141c:	4b84      	ldr	r3, [pc, #528]	@ (8001630 <PN532_CallFunction+0x248>)
 800141e:	185b      	adds	r3, r3, r1
 8001420:	19db      	adds	r3, r3, r7
 8001422:	4a81      	ldr	r2, [pc, #516]	@ (8001628 <PN532_CallFunction+0x240>)
 8001424:	1852      	adds	r2, r2, r1
 8001426:	19d2      	adds	r2, r2, r7
 8001428:	7812      	ldrb	r2, [r2, #0]
 800142a:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 800142c:	2318      	movs	r3, #24
 800142e:	33ff      	adds	r3, #255	@ 0xff
 8001430:	18fb      	adds	r3, r7, r3
 8001432:	2200      	movs	r2, #0
 8001434:	701a      	strb	r2, [r3, #0]
 8001436:	e019      	b.n	800146c <PN532_CallFunction+0x84>
        buff[2 + i] = params[i];
 8001438:	2018      	movs	r0, #24
 800143a:	30ff      	adds	r0, #255	@ 0xff
 800143c:	183b      	adds	r3, r7, r0
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2290      	movs	r2, #144	@ 0x90
 8001442:	0052      	lsls	r2, r2, #1
 8001444:	2108      	movs	r1, #8
 8001446:	1852      	adds	r2, r2, r1
 8001448:	19d2      	adds	r2, r2, r7
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	18d2      	adds	r2, r2, r3
 800144e:	183b      	adds	r3, r7, r0
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	3302      	adds	r3, #2
 8001454:	7811      	ldrb	r1, [r2, #0]
 8001456:	4a76      	ldr	r2, [pc, #472]	@ (8001630 <PN532_CallFunction+0x248>)
 8001458:	248c      	movs	r4, #140	@ 0x8c
 800145a:	0064      	lsls	r4, r4, #1
 800145c:	1912      	adds	r2, r2, r4
 800145e:	19d2      	adds	r2, r2, r7
 8001460:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8001462:	183b      	adds	r3, r7, r0
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	183b      	adds	r3, r7, r0
 8001468:	3201      	adds	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
 800146c:	2318      	movs	r3, #24
 800146e:	33ff      	adds	r3, #255	@ 0xff
 8001470:	18fb      	adds	r3, r7, r3
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	b29b      	uxth	r3, r3
 8001476:	2192      	movs	r1, #146	@ 0x92
 8001478:	0049      	lsls	r1, r1, #1
 800147a:	2008      	movs	r0, #8
 800147c:	180a      	adds	r2, r1, r0
 800147e:	19d2      	adds	r2, r2, r7
 8001480:	8812      	ldrh	r2, [r2, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d8d8      	bhi.n	8001438 <PN532_CallFunction+0x50>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8001486:	180b      	adds	r3, r1, r0
 8001488:	19db      	adds	r3, r3, r7
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	3302      	adds	r3, #2
 800148e:	b29a      	uxth	r2, r3
 8001490:	2310      	movs	r3, #16
 8001492:	18f9      	adds	r1, r7, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	0018      	movs	r0, r3
 8001498:	f7ff fdc6 	bl	8001028 <PN532_WriteFrame>
 800149c:	1e03      	subs	r3, r0, #0
 800149e:	d00a      	beq.n	80014b6 <PN532_CallFunction+0xce>
        pn532->wakeup();
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	4a62      	ldr	r2, [pc, #392]	@ (8001634 <PN532_CallFunction+0x24c>)
 80014ac:	0010      	movs	r0, r2
 80014ae:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	425b      	negs	r3, r3
 80014b4:	e0b3      	b.n	800161e <PN532_CallFunction+0x236>
    }
    if (!pn532->wait_ready(timeout)) {
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	2294      	movs	r2, #148	@ 0x94
 80014bc:	0052      	lsls	r2, r2, #1
 80014be:	2108      	movs	r1, #8
 80014c0:	1852      	adds	r2, r2, r1
 80014c2:	19d2      	adds	r2, r2, r7
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	0010      	movs	r0, r2
 80014c8:	4798      	blx	r3
 80014ca:	0003      	movs	r3, r0
 80014cc:	001a      	movs	r2, r3
 80014ce:	2301      	movs	r3, #1
 80014d0:	4053      	eors	r3, r2
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d002      	beq.n	80014de <PN532_CallFunction+0xf6>
        return PN532_STATUS_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	425b      	negs	r3, r3
 80014dc:	e09f      	b.n	800161e <PN532_CallFunction+0x236>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2210      	movs	r2, #16
 80014e4:	18ba      	adds	r2, r7, r2
 80014e6:	2106      	movs	r1, #6
 80014e8:	0010      	movs	r0, r2
 80014ea:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80014ec:	238b      	movs	r3, #139	@ 0x8b
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	18fb      	adds	r3, r7, r3
 80014f2:	2200      	movs	r2, #0
 80014f4:	701a      	strb	r2, [r3, #0]
 80014f6:	e01e      	b.n	8001536 <PN532_CallFunction+0x14e>
        if (PN532_ACK[i] != buff[i]) {
 80014f8:	218b      	movs	r1, #139	@ 0x8b
 80014fa:	0049      	lsls	r1, r1, #1
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	4a4d      	ldr	r2, [pc, #308]	@ (8001638 <PN532_CallFunction+0x250>)
 8001502:	5cd2      	ldrb	r2, [r2, r3]
 8001504:	187b      	adds	r3, r7, r1
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	4949      	ldr	r1, [pc, #292]	@ (8001630 <PN532_CallFunction+0x248>)
 800150a:	208c      	movs	r0, #140	@ 0x8c
 800150c:	0040      	lsls	r0, r0, #1
 800150e:	1809      	adds	r1, r1, r0
 8001510:	19c9      	adds	r1, r1, r7
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	429a      	cmp	r2, r3
 8001516:	d007      	beq.n	8001528 <PN532_CallFunction+0x140>
            pn532->log("Did not receive expected ACK from PN532!");
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	4a47      	ldr	r2, [pc, #284]	@ (800163c <PN532_CallFunction+0x254>)
 800151e:	0010      	movs	r0, r2
 8001520:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	425b      	negs	r3, r3
 8001526:	e07a      	b.n	800161e <PN532_CallFunction+0x236>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 8001528:	218b      	movs	r1, #139	@ 0x8b
 800152a:	0049      	lsls	r1, r1, #1
 800152c:	187b      	adds	r3, r7, r1
 800152e:	781a      	ldrb	r2, [r3, #0]
 8001530:	187b      	adds	r3, r7, r1
 8001532:	3201      	adds	r2, #1
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	238b      	movs	r3, #139	@ 0x8b
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	18fb      	adds	r3, r7, r3
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d9da      	bls.n	80014f8 <PN532_CallFunction+0x110>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	2294      	movs	r2, #148	@ 0x94
 8001548:	0052      	lsls	r2, r2, #1
 800154a:	2108      	movs	r1, #8
 800154c:	1852      	adds	r2, r2, r1
 800154e:	19d2      	adds	r2, r2, r7
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	0010      	movs	r0, r2
 8001554:	4798      	blx	r3
 8001556:	0003      	movs	r3, r0
 8001558:	001a      	movs	r2, r3
 800155a:	2301      	movs	r3, #1
 800155c:	4053      	eors	r3, r2
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <PN532_CallFunction+0x182>
        return PN532_STATUS_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	425b      	negs	r3, r3
 8001568:	e059      	b.n	800161e <PN532_CallFunction+0x236>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 800156a:	4b30      	ldr	r3, [pc, #192]	@ (800162c <PN532_CallFunction+0x244>)
 800156c:	248c      	movs	r4, #140	@ 0x8c
 800156e:	0064      	lsls	r4, r4, #1
 8001570:	191b      	adds	r3, r3, r4
 8001572:	19db      	adds	r3, r3, r7
 8001574:	881b      	ldrh	r3, [r3, #0]
 8001576:	3302      	adds	r3, #2
 8001578:	b29a      	uxth	r2, r3
 800157a:	2310      	movs	r3, #16
 800157c:	18f9      	adds	r1, r7, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff fe21 	bl	80011c8 <PN532_ReadFrame>
 8001586:	0003      	movs	r3, r0
 8001588:	2288      	movs	r2, #136	@ 0x88
 800158a:	0052      	lsls	r2, r2, #1
 800158c:	18ba      	adds	r2, r7, r2
 800158e:	6013      	str	r3, [r2, #0]

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8001590:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <PN532_CallFunction+0x248>)
 8001592:	191b      	adds	r3, r3, r4
 8001594:	19db      	adds	r3, r3, r7
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2bd5      	cmp	r3, #213	@ 0xd5
 800159a:	d10b      	bne.n	80015b4 <PN532_CallFunction+0x1cc>
 800159c:	4b24      	ldr	r3, [pc, #144]	@ (8001630 <PN532_CallFunction+0x248>)
 800159e:	191b      	adds	r3, r3, r4
 80015a0:	19db      	adds	r3, r3, r7
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	001a      	movs	r2, r3
 80015a6:	4b20      	ldr	r3, [pc, #128]	@ (8001628 <PN532_CallFunction+0x240>)
 80015a8:	191b      	adds	r3, r3, r4
 80015aa:	19db      	adds	r3, r3, r7
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d007      	beq.n	80015c4 <PN532_CallFunction+0x1dc>
        pn532->log("Received unexpected command response!");
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	4a21      	ldr	r2, [pc, #132]	@ (8001640 <PN532_CallFunction+0x258>)
 80015ba:	0010      	movs	r0, r2
 80015bc:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	425b      	negs	r3, r3
 80015c2:	e02c      	b.n	800161e <PN532_CallFunction+0x236>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 80015c4:	2316      	movs	r3, #22
 80015c6:	33ff      	adds	r3, #255	@ 0xff
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
 80015ce:	e014      	b.n	80015fa <PN532_CallFunction+0x212>
        response[i] = buff[i + 2];
 80015d0:	2016      	movs	r0, #22
 80015d2:	30ff      	adds	r0, #255	@ 0xff
 80015d4:	183b      	adds	r3, r7, r0
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	1c9a      	adds	r2, r3, #2
 80015da:	183b      	adds	r3, r7, r0
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	18cb      	adds	r3, r1, r3
 80015e2:	4913      	ldr	r1, [pc, #76]	@ (8001630 <PN532_CallFunction+0x248>)
 80015e4:	248c      	movs	r4, #140	@ 0x8c
 80015e6:	0064      	lsls	r4, r4, #1
 80015e8:	1909      	adds	r1, r1, r4
 80015ea:	19c9      	adds	r1, r1, r7
 80015ec:	5c8a      	ldrb	r2, [r1, r2]
 80015ee:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 80015f0:	183b      	adds	r3, r7, r0
 80015f2:	781a      	ldrb	r2, [r3, #0]
 80015f4:	183b      	adds	r3, r7, r0
 80015f6:	3201      	adds	r2, #1
 80015f8:	701a      	strb	r2, [r3, #0]
 80015fa:	2316      	movs	r3, #22
 80015fc:	33ff      	adds	r3, #255	@ 0xff
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	4a09      	ldr	r2, [pc, #36]	@ (800162c <PN532_CallFunction+0x244>)
 8001606:	218c      	movs	r1, #140	@ 0x8c
 8001608:	0049      	lsls	r1, r1, #1
 800160a:	1852      	adds	r2, r2, r1
 800160c:	19d2      	adds	r2, r2, r7
 800160e:	8812      	ldrh	r2, [r2, #0]
 8001610:	429a      	cmp	r2, r3
 8001612:	d8dd      	bhi.n	80015d0 <PN532_CallFunction+0x1e8>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001614:	2388      	movs	r3, #136	@ 0x88
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3b02      	subs	r3, #2
}
 800161e:	0018      	movs	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	b047      	add	sp, #284	@ 0x11c
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	46c0      	nop			@ (mov r8, r8)
 8001628:	fffffef3 	.word	0xfffffef3
 800162c:	fffffef0 	.word	0xfffffef0
 8001630:	fffffef8 	.word	0xfffffef8
 8001634:	080052fc 	.word	0x080052fc
 8001638:	08005444 	.word	0x08005444
 800163c:	08005310 	.word	0x08005310
 8001640:	0800533c 	.word	0x0800533c

08001644 <PN532_GetFirmwareVersion>:

/**
  * @brief: Call PN532 GetFirmwareVersion function and return a buff with the IC,
  *  Ver, Rev, and Support values.
  */
int PN532_GetFirmwareVersion(PN532* pn532, uint8_t* version) {
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af04      	add	r7, sp, #16
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
    // length of version: 4
    if (PN532_CallFunction(pn532, PN532_COMMAND_GETFIRMWAREVERSION,
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	23fa      	movs	r3, #250	@ 0xfa
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	2304      	movs	r3, #4
 8001662:	2102      	movs	r1, #2
 8001664:	f7ff fec0 	bl	80013e8 <PN532_CallFunction>
 8001668:	0003      	movs	r3, r0
 800166a:	3301      	adds	r3, #1
 800166c:	d107      	bne.n	800167e <PN532_GetFirmwareVersion+0x3a>
                           version, 4, NULL, 0, 500) == PN532_STATUS_ERROR) {
        pn532->log("Failed to detect the PN532");
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <PN532_GetFirmwareVersion+0x44>)
 8001674:	0010      	movs	r0, r2
 8001676:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	425b      	negs	r3, r3
 800167c:	e000      	b.n	8001680 <PN532_GetFirmwareVersion+0x3c>
    }
    return PN532_STATUS_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b002      	add	sp, #8
 8001686:	bd80      	pop	{r7, pc}
 8001688:	08005364 	.word	0x08005364

0800168c <PN532_SamConfiguration>:

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af04      	add	r7, sp, #16
 8001692:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 8001694:	240c      	movs	r4, #12
 8001696:	193b      	adds	r3, r7, r4
 8001698:	4a0b      	ldr	r2, [pc, #44]	@ (80016c8 <PN532_SamConfiguration+0x3c>)
 800169a:	8811      	ldrh	r1, [r2, #0]
 800169c:	8019      	strh	r1, [r3, #0]
 800169e:	7892      	ldrb	r2, [r2, #2]
 80016a0:	709a      	strb	r2, [r3, #2]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	23fa      	movs	r3, #250	@ 0xfa
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2303      	movs	r3, #3
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	193b      	adds	r3, r7, r4
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2200      	movs	r2, #0
 80016b6:	2114      	movs	r1, #20
 80016b8:	f7ff fe96 	bl	80013e8 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b005      	add	sp, #20
 80016c4:	bd90      	pop	{r4, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	08005380 	.word	0x08005380

080016cc <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b090      	sub	sp, #64	@ 0x40
 80016d0:	af04      	add	r7, sp, #16
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	701a      	strb	r2, [r3, #0]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80016dc:	2124      	movs	r1, #36	@ 0x24
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	1dfa      	adds	r2, r7, #7
 80016e8:	7812      	ldrb	r2, [r2, #0]
 80016ea:	705a      	strb	r2, [r3, #1]
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80016ec:	2310      	movs	r3, #16
 80016ee:	18fa      	adds	r2, r7, r3
 80016f0:	68f8      	ldr	r0, [r7, #12]
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	9302      	str	r3, [sp, #8]
 80016f6:	2302      	movs	r3, #2
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	187b      	adds	r3, r7, r1
 80016fc:	9300      	str	r3, [sp, #0]
 80016fe:	2313      	movs	r3, #19
 8001700:	214a      	movs	r1, #74	@ 0x4a
 8001702:	f7ff fe71 	bl	80013e8 <PN532_CallFunction>
 8001706:	0003      	movs	r3, r0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 800170a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170c:	2b00      	cmp	r3, #0
 800170e:	da02      	bge.n	8001716 <PN532_ReadPassiveTarget+0x4a>
        return PN532_STATUS_ERROR; // No card found
 8001710:	2301      	movs	r3, #1
 8001712:	425b      	negs	r3, r3
 8001714:	e039      	b.n	800178a <PN532_ReadPassiveTarget+0xbe>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 8001716:	2310      	movs	r3, #16
 8001718:	18fb      	adds	r3, r7, r3
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d007      	beq.n	8001730 <PN532_ReadPassiveTarget+0x64>
        pn532->log("More than one card detected!");
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	4a1b      	ldr	r2, [pc, #108]	@ (8001794 <PN532_ReadPassiveTarget+0xc8>)
 8001726:	0010      	movs	r0, r2
 8001728:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	425b      	negs	r3, r3
 800172e:	e02c      	b.n	800178a <PN532_ReadPassiveTarget+0xbe>
    }
    if (buff[5] > 7) {
 8001730:	2310      	movs	r3, #16
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	795b      	ldrb	r3, [r3, #5]
 8001736:	2b07      	cmp	r3, #7
 8001738:	d907      	bls.n	800174a <PN532_ReadPassiveTarget+0x7e>
        pn532->log("Found card with unexpectedly long UID!");
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	4a16      	ldr	r2, [pc, #88]	@ (8001798 <PN532_ReadPassiveTarget+0xcc>)
 8001740:	0010      	movs	r0, r2
 8001742:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	425b      	negs	r3, r3
 8001748:	e01f      	b.n	800178a <PN532_ReadPassiveTarget+0xbe>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 800174a:	232f      	movs	r3, #47	@ 0x2f
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
 8001752:	e010      	b.n	8001776 <PN532_ReadPassiveTarget+0xaa>
        response[i] = buff[6 + i];
 8001754:	202f      	movs	r0, #47	@ 0x2f
 8001756:	183b      	adds	r3, r7, r0
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	1d9a      	adds	r2, r3, #6
 800175c:	183b      	adds	r3, r7, r0
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	68b9      	ldr	r1, [r7, #8]
 8001762:	18cb      	adds	r3, r1, r3
 8001764:	2110      	movs	r1, #16
 8001766:	1879      	adds	r1, r7, r1
 8001768:	5c8a      	ldrb	r2, [r1, r2]
 800176a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 800176c:	183b      	adds	r3, r7, r0
 800176e:	781a      	ldrb	r2, [r3, #0]
 8001770:	183b      	adds	r3, r7, r0
 8001772:	3201      	adds	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	2110      	movs	r1, #16
 8001778:	187b      	adds	r3, r7, r1
 800177a:	795b      	ldrb	r3, [r3, #5]
 800177c:	222f      	movs	r2, #47	@ 0x2f
 800177e:	18ba      	adds	r2, r7, r2
 8001780:	7812      	ldrb	r2, [r2, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d3e6      	bcc.n	8001754 <PN532_ReadPassiveTarget+0x88>
    }
    return buff[5];
 8001786:	187b      	adds	r3, r7, r1
 8001788:	795b      	ldrb	r3, [r3, #5]
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b00c      	add	sp, #48	@ 0x30
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	08005384 	.word	0x08005384
 8001798:	080053a4 	.word	0x080053a4

0800179c <PN532_Log>:
    HAL_GPIO_WritePin(PN532_RST_GPIO_Port, PN532_RST_Pin, GPIO_PIN_SET);
    HAL_Delay(100);
    return PN532_STATUS_OK;
}

void PN532_Log(const char* log) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <PN532_Log+0x1c>)
 80017a8:	0011      	movs	r1, r2
 80017aa:	0018      	movs	r0, r3
 80017ac:	f002 fde8 	bl	8004380 <iprintf>
}
 80017b0:	46c0      	nop			@ (mov r8, r8)
 80017b2:	46bd      	mov	sp, r7
 80017b4:	b002      	add	sp, #8
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	080053d0 	.word	0x080053d0

080017bc <i2c_read>:

void i2c_read(uint8_t* data, uint16_t count) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	000a      	movs	r2, r1
 80017c6:	1cbb      	adds	r3, r7, #2
 80017c8:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Master_Receive(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80017ca:	1cbb      	adds	r3, r7, #2
 80017cc:	881b      	ldrh	r3, [r3, #0]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	4804      	ldr	r0, [pc, #16]	@ (80017e4 <i2c_read+0x28>)
 80017d2:	210a      	movs	r1, #10
 80017d4:	9100      	str	r1, [sp, #0]
 80017d6:	2148      	movs	r1, #72	@ 0x48
 80017d8:	f000 fe8e 	bl	80024f8 <HAL_I2C_Master_Receive>
}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b002      	add	sp, #8
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	200001d8 	.word	0x200001d8

080017e8 <i2c_write>:

void i2c_write(uint8_t* data, uint16_t count) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	000a      	movs	r2, r1
 80017f2:	1cbb      	adds	r3, r7, #2
 80017f4:	801a      	strh	r2, [r3, #0]
    HAL_I2C_Master_Transmit(&hi2c1, _I2C_ADDRESS, data, count, _I2C_TIMEOUT);
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4804      	ldr	r0, [pc, #16]	@ (8001810 <i2c_write+0x28>)
 80017fe:	210a      	movs	r1, #10
 8001800:	9100      	str	r1, [sp, #0]
 8001802:	2148      	movs	r1, #72	@ 0x48
 8001804:	f000 fd4e 	bl	80022a4 <HAL_I2C_Master_Transmit>
}
 8001808:	46c0      	nop			@ (mov r8, r8)
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	200001d8 	.word	0x200001d8

08001814 <PN532_I2C_ReadData>:

int PN532_I2C_ReadData(uint8_t* data, uint16_t count) {
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	b08d      	sub	sp, #52	@ 0x34
 8001818:	af00      	add	r7, sp, #0
 800181a:	61f8      	str	r0, [r7, #28]
 800181c:	0008      	movs	r0, r1
 800181e:	231a      	movs	r3, #26
 8001820:	18f9      	adds	r1, r7, r3
 8001822:	8008      	strh	r0, [r1, #0]
 8001824:	4669      	mov	r1, sp
 8001826:	000e      	movs	r6, r1
    uint8_t status[] = {0x00};
 8001828:	2108      	movs	r1, #8
 800182a:	2318      	movs	r3, #24
 800182c:	18cb      	adds	r3, r1, r3
 800182e:	19d9      	adds	r1, r3, r7
 8001830:	483e      	ldr	r0, [pc, #248]	@ (800192c <PN532_I2C_ReadData+0x118>)
 8001832:	7800      	ldrb	r0, [r0, #0]
 8001834:	7008      	strb	r0, [r1, #0]
    uint8_t frame[count + 1];
 8001836:	231a      	movs	r3, #26
 8001838:	18f9      	adds	r1, r7, r3
 800183a:	8809      	ldrh	r1, [r1, #0]
 800183c:	3101      	adds	r1, #1
 800183e:	1e48      	subs	r0, r1, #1
 8001840:	62b8      	str	r0, [r7, #40]	@ 0x28
 8001842:	0008      	movs	r0, r1
 8001844:	6138      	str	r0, [r7, #16]
 8001846:	2000      	movs	r0, #0
 8001848:	6178      	str	r0, [r7, #20]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	0010      	movs	r0, r2
 8001850:	0f40      	lsrs	r0, r0, #29
 8001852:	613a      	str	r2, [r7, #16]
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	00dd      	lsls	r5, r3, #3
 8001858:	4305      	orrs	r5, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	00dc      	lsls	r4, r3, #3
 800185e:	0008      	movs	r0, r1
 8001860:	6038      	str	r0, [r7, #0]
 8001862:	2000      	movs	r0, #0
 8001864:	6078      	str	r0, [r7, #4]
 8001866:	683c      	ldr	r4, [r7, #0]
 8001868:	687d      	ldr	r5, [r7, #4]
 800186a:	0023      	movs	r3, r4
 800186c:	0f58      	lsrs	r0, r3, #29
 800186e:	002b      	movs	r3, r5
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4303      	orrs	r3, r0
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	0023      	movs	r3, r4
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	000b      	movs	r3, r1
 8001882:	3307      	adds	r3, #7
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	466a      	mov	r2, sp
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	469d      	mov	sp, r3
 800188e:	466b      	mov	r3, sp
 8001890:	3300      	adds	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
    i2c_read(status, sizeof(status));
 8001894:	2408      	movs	r4, #8
 8001896:	2318      	movs	r3, #24
 8001898:	18e3      	adds	r3, r4, r3
 800189a:	19db      	adds	r3, r3, r7
 800189c:	2101      	movs	r1, #1
 800189e:	0018      	movs	r0, r3
 80018a0:	f7ff ff8c 	bl	80017bc <i2c_read>
    if (status[0] != PN532_I2C_READY) {
 80018a4:	2318      	movs	r3, #24
 80018a6:	18e3      	adds	r3, r4, r3
 80018a8:	19db      	adds	r3, r3, r7
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d002      	beq.n	80018b6 <PN532_I2C_ReadData+0xa2>
        return PN532_STATUS_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	425b      	negs	r3, r3
 80018b4:	e034      	b.n	8001920 <PN532_I2C_ReadData+0x10c>
    }
    i2c_read(frame, count + 1);
 80018b6:	231a      	movs	r3, #26
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	881b      	ldrh	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	b29a      	uxth	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c2:	0011      	movs	r1, r2
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff ff79 	bl	80017bc <i2c_read>
    for (uint8_t i = 0; i < count; i++) {
 80018ca:	2317      	movs	r3, #23
 80018cc:	2218      	movs	r2, #24
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	19db      	adds	r3, r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e017      	b.n	8001908 <PN532_I2C_ReadData+0xf4>
        data[i] = frame[i + 1];
 80018d8:	2017      	movs	r0, #23
 80018da:	2318      	movs	r3, #24
 80018dc:	18c3      	adds	r3, r0, r3
 80018de:	19db      	adds	r3, r3, r7
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	2318      	movs	r3, #24
 80018e6:	18c3      	adds	r3, r0, r3
 80018e8:	19db      	adds	r3, r3, r7
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	69f9      	ldr	r1, [r7, #28]
 80018ee:	18cb      	adds	r3, r1, r3
 80018f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80018f2:	5c8a      	ldrb	r2, [r1, r2]
 80018f4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80018f6:	2318      	movs	r3, #24
 80018f8:	18c3      	adds	r3, r0, r3
 80018fa:	19db      	adds	r3, r3, r7
 80018fc:	781a      	ldrb	r2, [r3, #0]
 80018fe:	2318      	movs	r3, #24
 8001900:	18c3      	adds	r3, r0, r3
 8001902:	19db      	adds	r3, r3, r7
 8001904:	3201      	adds	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	2317      	movs	r3, #23
 800190a:	2218      	movs	r2, #24
 800190c:	189b      	adds	r3, r3, r2
 800190e:	19db      	adds	r3, r3, r7
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b29b      	uxth	r3, r3
 8001914:	221a      	movs	r2, #26
 8001916:	18ba      	adds	r2, r7, r2
 8001918:	8812      	ldrh	r2, [r2, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d8dc      	bhi.n	80018d8 <PN532_I2C_ReadData+0xc4>
    }
    return PN532_STATUS_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	46b5      	mov	sp, r6
}
 8001922:	0018      	movs	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	b00d      	add	sp, #52	@ 0x34
 8001928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	080053d8 	.word	0x080053d8

08001930 <PN532_I2C_WriteData>:

int PN532_I2C_WriteData(uint8_t *data, uint16_t count) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	000a      	movs	r2, r1
 800193a:	1cbb      	adds	r3, r7, #2
 800193c:	801a      	strh	r2, [r3, #0]
    i2c_write(data, count);
 800193e:	1cbb      	adds	r3, r7, #2
 8001940:	881a      	ldrh	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	0011      	movs	r1, r2
 8001946:	0018      	movs	r0, r3
 8001948:	f7ff ff4e 	bl	80017e8 <i2c_write>
    return PN532_STATUS_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	b002      	add	sp, #8
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <PN532_I2C_WaitReady>:

bool PN532_I2C_WaitReady(uint32_t timeout) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {0x00};
 8001960:	2308      	movs	r3, #8
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	4a11      	ldr	r2, [pc, #68]	@ (80019ac <PN532_I2C_WaitReady+0x54>)
 8001966:	7812      	ldrb	r2, [r2, #0]
 8001968:	701a      	strb	r2, [r3, #0]
    uint32_t tickstart = HAL_GetTick();
 800196a:	f000 f8b1 	bl	8001ad0 <HAL_GetTick>
 800196e:	0003      	movs	r3, r0
 8001970:	60fb      	str	r3, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 8001972:	e00e      	b.n	8001992 <PN532_I2C_WaitReady+0x3a>
        i2c_read(status, sizeof(status));
 8001974:	2408      	movs	r4, #8
 8001976:	193b      	adds	r3, r7, r4
 8001978:	2101      	movs	r1, #1
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff ff1e 	bl	80017bc <i2c_read>
        if (status[0] == PN532_I2C_READY) {
 8001980:	193b      	adds	r3, r7, r4
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d101      	bne.n	800198c <PN532_I2C_WaitReady+0x34>
            return true;
 8001988:	2301      	movs	r3, #1
 800198a:	e00b      	b.n	80019a4 <PN532_I2C_WaitReady+0x4c>
        } else {
            HAL_Delay(5);
 800198c:	2005      	movs	r0, #5
 800198e:	f000 f8a9 	bl	8001ae4 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 8001992:	f000 f89d 	bl	8001ad0 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d8e8      	bhi.n	8001974 <PN532_I2C_WaitReady+0x1c>
        }
    }
    return false;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	0018      	movs	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b005      	add	sp, #20
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	080053d8 	.word	0x080053d8

080019b0 <PN532_I2C_Init>:
    HAL_GPIO_WritePin(PN532_REQ_GPIO_Port, PN532_REQ_Pin, GPIO_PIN_SET);
    HAL_Delay(500);
    return PN532_STATUS_OK;
}

void PN532_I2C_Init(PN532* pn532) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    //pn532->reset =  PN532_Reset;
    pn532->read_data = PN532_I2C_ReadData;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <PN532_I2C_Init+0x28>)
 80019bc:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_I2C_WriteData;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a06      	ldr	r2, [pc, #24]	@ (80019dc <PN532_I2C_Init+0x2c>)
 80019c2:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_I2C_WaitReady;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a06      	ldr	r2, [pc, #24]	@ (80019e0 <PN532_I2C_Init+0x30>)
 80019c8:	60da      	str	r2, [r3, #12]
    //pn532->wakeup = PN532_I2C_Wakeup;
    pn532->log = PN532_Log;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a05      	ldr	r2, [pc, #20]	@ (80019e4 <PN532_I2C_Init+0x34>)
 80019ce:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    //pn532->wakeup();
}
 80019d0:	46c0      	nop			@ (mov r8, r8)
 80019d2:	46bd      	mov	sp, r7
 80019d4:	b002      	add	sp, #8
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	08001815 	.word	0x08001815
 80019dc:	08001931 	.word	0x08001931
 80019e0:	08001959 	.word	0x08001959
 80019e4:	0800179d 	.word	0x0800179d

080019e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019ee:	1dfb      	adds	r3, r7, #7
 80019f0:	2200      	movs	r2, #0
 80019f2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f80f 	bl	8001a18 <HAL_InitTick>
 80019fa:	1e03      	subs	r3, r0, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e001      	b.n	8001a0a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a06:	f7fe fee7 	bl	80007d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a20:	230f      	movs	r3, #15
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001a28:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa0 <HAL_InitTick+0x88>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d02b      	beq.n	8001a88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001a30:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_InitTick+0x8c>)
 8001a32:	681c      	ldr	r4, [r3, #0]
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <HAL_InitTick+0x88>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	0019      	movs	r1, r3
 8001a3a:	23fa      	movs	r3, #250	@ 0xfa
 8001a3c:	0098      	lsls	r0, r3, #2
 8001a3e:	f7fe fb6d 	bl	800011c <__udivsi3>
 8001a42:	0003      	movs	r3, r0
 8001a44:	0019      	movs	r1, r3
 8001a46:	0020      	movs	r0, r4
 8001a48:	f7fe fb68 	bl	800011c <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f93d 	bl	8001cce <HAL_SYSTICK_Config>
 8001a54:	1e03      	subs	r3, r0, #0
 8001a56:	d112      	bne.n	8001a7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d80a      	bhi.n	8001a74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	2301      	movs	r3, #1
 8001a62:	425b      	negs	r3, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	0018      	movs	r0, r3
 8001a68:	f000 f90c 	bl	8001c84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa8 <HAL_InitTick+0x90>)
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	601a      	str	r2, [r3, #0]
 8001a72:	e00d      	b.n	8001a90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001a74:	230f      	movs	r3, #15
 8001a76:	18fb      	adds	r3, r7, r3
 8001a78:	2201      	movs	r2, #1
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e008      	b.n	8001a90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a7e:	230f      	movs	r3, #15
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	2201      	movs	r2, #1
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	e003      	b.n	8001a90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a88:	230f      	movs	r3, #15
 8001a8a:	18fb      	adds	r3, r7, r3
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001a90:	230f      	movs	r3, #15
 8001a92:	18fb      	adds	r3, r7, r3
 8001a94:	781b      	ldrb	r3, [r3, #0]
}
 8001a96:	0018      	movs	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b005      	add	sp, #20
 8001a9c:	bd90      	pop	{r4, r7, pc}
 8001a9e:	46c0      	nop			@ (mov r8, r8)
 8001aa0:	20000020 	.word	0x20000020
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	2000001c 	.word	0x2000001c

08001aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_IncTick+0x1c>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	001a      	movs	r2, r3
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_IncTick+0x20>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	18d2      	adds	r2, r2, r3
 8001abc:	4b03      	ldr	r3, [pc, #12]	@ (8001acc <HAL_IncTick+0x20>)
 8001abe:	601a      	str	r2, [r3, #0]
}
 8001ac0:	46c0      	nop			@ (mov r8, r8)
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	20000020 	.word	0x20000020
 8001acc:	20000368 	.word	0x20000368

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b02      	ldr	r3, [pc, #8]	@ (8001ae0 <HAL_GetTick+0x10>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	0018      	movs	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	46c0      	nop			@ (mov r8, r8)
 8001ae0:	20000368 	.word	0x20000368

08001ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff fff0 	bl	8001ad0 <HAL_GetTick>
 8001af0:	0003      	movs	r3, r0
 8001af2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	d005      	beq.n	8001b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_Delay+0x44>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	001a      	movs	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	189b      	adds	r3, r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	f7ff ffe0 	bl	8001ad0 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d8f7      	bhi.n	8001b0c <HAL_Delay+0x28>
  {
  }
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b004      	add	sp, #16
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	20000020 	.word	0x20000020

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	0002      	movs	r2, r0
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b38:	1dfb      	adds	r3, r7, #7
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b3e:	d809      	bhi.n	8001b54 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b40:	1dfb      	adds	r3, r7, #7
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	001a      	movs	r2, r3
 8001b46:	231f      	movs	r3, #31
 8001b48:	401a      	ands	r2, r3
 8001b4a:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_EnableIRQ+0x30>)
 8001b4c:	2101      	movs	r1, #1
 8001b4e:	4091      	lsls	r1, r2
 8001b50:	000a      	movs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001b54:	46c0      	nop			@ (mov r8, r8)
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	0002      	movs	r2, r0
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	1dfb      	adds	r3, r7, #7
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b74:	d828      	bhi.n	8001bc8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b76:	4a2f      	ldr	r2, [pc, #188]	@ (8001c34 <__NVIC_SetPriority+0xd4>)
 8001b78:	1dfb      	adds	r3, r7, #7
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	089b      	lsrs	r3, r3, #2
 8001b80:	33c0      	adds	r3, #192	@ 0xc0
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	589b      	ldr	r3, [r3, r2]
 8001b86:	1dfa      	adds	r2, r7, #7
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	0011      	movs	r1, r2
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	400a      	ands	r2, r1
 8001b90:	00d2      	lsls	r2, r2, #3
 8001b92:	21ff      	movs	r1, #255	@ 0xff
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	43d2      	mvns	r2, r2
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	019b      	lsls	r3, r3, #6
 8001ba2:	22ff      	movs	r2, #255	@ 0xff
 8001ba4:	401a      	ands	r2, r3
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	0018      	movs	r0, r3
 8001bac:	2303      	movs	r3, #3
 8001bae:	4003      	ands	r3, r0
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb4:	481f      	ldr	r0, [pc, #124]	@ (8001c34 <__NVIC_SetPriority+0xd4>)
 8001bb6:	1dfb      	adds	r3, r7, #7
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	089b      	lsrs	r3, r3, #2
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	33c0      	adds	r3, #192	@ 0xc0
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bc6:	e031      	b.n	8001c2c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c38 <__NVIC_SetPriority+0xd8>)
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	0019      	movs	r1, r3
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	400b      	ands	r3, r1
 8001bd4:	3b08      	subs	r3, #8
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3306      	adds	r3, #6
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	18d3      	adds	r3, r2, r3
 8001bde:	3304      	adds	r3, #4
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1dfa      	adds	r2, r7, #7
 8001be4:	7812      	ldrb	r2, [r2, #0]
 8001be6:	0011      	movs	r1, r2
 8001be8:	2203      	movs	r2, #3
 8001bea:	400a      	ands	r2, r1
 8001bec:	00d2      	lsls	r2, r2, #3
 8001bee:	21ff      	movs	r1, #255	@ 0xff
 8001bf0:	4091      	lsls	r1, r2
 8001bf2:	000a      	movs	r2, r1
 8001bf4:	43d2      	mvns	r2, r2
 8001bf6:	401a      	ands	r2, r3
 8001bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	22ff      	movs	r2, #255	@ 0xff
 8001c00:	401a      	ands	r2, r3
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	2303      	movs	r3, #3
 8001c0a:	4003      	ands	r3, r0
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c10:	4809      	ldr	r0, [pc, #36]	@ (8001c38 <__NVIC_SetPriority+0xd8>)
 8001c12:	1dfb      	adds	r3, r7, #7
 8001c14:	781b      	ldrb	r3, [r3, #0]
 8001c16:	001c      	movs	r4, r3
 8001c18:	230f      	movs	r3, #15
 8001c1a:	4023      	ands	r3, r4
 8001c1c:	3b08      	subs	r3, #8
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	430a      	orrs	r2, r1
 8001c22:	3306      	adds	r3, #6
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	18c3      	adds	r3, r0, r3
 8001c28:	3304      	adds	r3, #4
 8001c2a:	601a      	str	r2, [r3, #0]
}
 8001c2c:	46c0      	nop			@ (mov r8, r8)
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b003      	add	sp, #12
 8001c32:	bd90      	pop	{r4, r7, pc}
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1e5a      	subs	r2, r3, #1
 8001c48:	2380      	movs	r3, #128	@ 0x80
 8001c4a:	045b      	lsls	r3, r3, #17
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d301      	bcc.n	8001c54 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c50:	2301      	movs	r3, #1
 8001c52:	e010      	b.n	8001c76 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c54:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <SysTick_Config+0x44>)
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	3a01      	subs	r2, #1
 8001c5a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	425b      	negs	r3, r3
 8001c60:	2103      	movs	r1, #3
 8001c62:	0018      	movs	r0, r3
 8001c64:	f7ff ff7c 	bl	8001b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x44>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x44>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	b002      	add	sp, #8
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	46c0      	nop			@ (mov r8, r8)
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	607a      	str	r2, [r7, #4]
 8001c8e:	210f      	movs	r1, #15
 8001c90:	187b      	adds	r3, r7, r1
 8001c92:	1c02      	adds	r2, r0, #0
 8001c94:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	b25b      	sxtb	r3, r3
 8001c9e:	0011      	movs	r1, r2
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	f7ff ff5d 	bl	8001b60 <__NVIC_SetPriority>
}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	b004      	add	sp, #16
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b082      	sub	sp, #8
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7ff ff33 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	b002      	add	sp, #8
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f7ff ffaf 	bl	8001c3c <SysTick_Config>
 8001cde:	0003      	movs	r3, r0
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b002      	add	sp, #8
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	200b      	movs	r0, #11
 8001cf4:	183b      	adds	r3, r7, r0
 8001cf6:	1c0a      	adds	r2, r1, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cfa:	2317      	movs	r3, #23
 8001cfc:	18fb      	adds	r3, r7, r3
 8001cfe:	2200      	movs	r2, #0
 8001d00:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d010      	beq.n	8001d2c <HAL_EXTI_RegisterCallback+0x44>
 8001d0a:	dc13      	bgt.n	8001d34 <HAL_EXTI_RegisterCallback+0x4c>
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d002      	beq.n	8001d16 <HAL_EXTI_RegisterCallback+0x2e>
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d007      	beq.n	8001d24 <HAL_EXTI_RegisterCallback+0x3c>
 8001d14:	e00e      	b.n	8001d34 <HAL_EXTI_RegisterCallback+0x4c>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	605a      	str	r2, [r3, #4]
      hexti->FallingCallback = pPendingCbfn;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	609a      	str	r2, [r3, #8]
      break;
 8001d22:	e00c      	b.n	8001d3e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_RISING_CB_ID:
      hexti->RisingCallback = pPendingCbfn;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]
      break;
 8001d2a:	e008      	b.n	8001d3e <HAL_EXTI_RegisterCallback+0x56>

    case  HAL_EXTI_FALLING_CB_ID:
      hexti->FallingCallback = pPendingCbfn;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	609a      	str	r2, [r3, #8]
      break;
 8001d32:	e004      	b.n	8001d3e <HAL_EXTI_RegisterCallback+0x56>

    default:
      status = HAL_ERROR;
 8001d34:	2317      	movs	r3, #23
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
      break;
 8001d3c:	46c0      	nop			@ (mov r8, r8)
  }

  return status;
 8001d3e:	2317      	movs	r3, #23
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
}
 8001d44:	0018      	movs	r0, r3
 8001d46:	46bd      	mov	sp, r7
 8001d48:	b006      	add	sp, #24
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e003      	b.n	8001d68 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	683a      	ldr	r2, [r7, #0]
 8001d64:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d66:	2300      	movs	r3, #0
  }
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b002      	add	sp, #8
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	0c1b      	lsrs	r3, r3, #16
 8001d7e:	2201      	movs	r2, #1
 8001d80:	4013      	ands	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	221f      	movs	r2, #31
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	0013      	movs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]

  /* Get rising edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->RPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	015b      	lsls	r3, r3, #5
 8001d98:	4a18      	ldr	r2, [pc, #96]	@ (8001dfc <HAL_EXTI_IRQHandler+0x8c>)
 8001d9a:	4694      	mov	ip, r2
 8001d9c:	4463      	add	r3, ip
 8001d9e:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <HAL_EXTI_IRQHandler+0x54>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->RisingCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d002      	beq.n	8001dc4 <HAL_EXTI_IRQHandler+0x54>
    {
      hexti->RisingCallback();
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4798      	blx	r3
    }
  }

  /* Get falling edge pending bit  */
  regaddr = (__IO uint32_t *)(&EXTI->FPR1 + (EXTI_CONFIG_OFFSET * offset));
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	015b      	lsls	r3, r3, #5
 8001dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e00 <HAL_EXTI_IRQHandler+0x90>)
 8001dca:	4694      	mov	ip, r2
 8001dcc:	4463      	add	r3, ip
 8001dce:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60bb      	str	r3, [r7, #8]

  if (regval != 0U)
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d009      	beq.n	8001df4 <HAL_EXTI_IRQHandler+0x84>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	601a      	str	r2, [r3, #0]

    /* Call rising callback */
    if (hexti->FallingCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_EXTI_IRQHandler+0x84>
    {
      hexti->FallingCallback();
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	4798      	blx	r3
    }
  }
}
 8001df4:	46c0      	nop			@ (mov r8, r8)
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b006      	add	sp, #24
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	4002180c 	.word	0x4002180c
 8001e00:	40021810 	.word	0x40021810

08001e04 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e12:	e153      	b.n	80020bc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	4091      	lsls	r1, r2
 8001e1e:	000a      	movs	r2, r1
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d100      	bne.n	8001e2c <HAL_GPIO_Init+0x28>
 8001e2a:	e144      	b.n	80020b6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x38>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	2b12      	cmp	r3, #18
 8001e3a:	d125      	bne.n	8001e88 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	58d3      	ldr	r3, [r2, r3]
 8001e48:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	4013      	ands	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	220f      	movs	r2, #15
 8001e54:	409a      	lsls	r2, r3
 8001e56:	0013      	movs	r3, r2
 8001e58:	43da      	mvns	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	691b      	ldr	r3, [r3, #16]
 8001e64:	220f      	movs	r2, #15
 8001e66:	401a      	ands	r2, r3
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	2107      	movs	r1, #7
 8001e6c:	400b      	ands	r3, r1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	409a      	lsls	r2, r3
 8001e72:	0013      	movs	r3, r2
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	0092      	lsls	r2, r2, #2
 8001e84:	6979      	ldr	r1, [r7, #20]
 8001e86:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	409a      	lsls	r2, r3
 8001e96:	0013      	movs	r3, r2
 8001e98:	43da      	mvns	r2, r3
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	409a      	lsls	r2, r3
 8001eae:	0013      	movs	r3, r2
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d130      	bne.n	8001f3e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	409a      	lsls	r2, r3
 8001eea:	0013      	movs	r3, r2
 8001eec:	43da      	mvns	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	409a      	lsls	r2, r3
 8001efe:	0013      	movs	r3, r2
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f12:	2201      	movs	r2, #1
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	409a      	lsls	r2, r3
 8001f18:	0013      	movs	r3, r2
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	2201      	movs	r2, #1
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	409a      	lsls	r2, r3
 8001f30:	0013      	movs	r3, r2
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d017      	beq.n	8001f76 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	409a      	lsls	r2, r3
 8001f54:	0013      	movs	r3, r2
 8001f56:	43da      	mvns	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	0013      	movs	r3, r2
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	055b      	lsls	r3, r3, #21
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d100      	bne.n	8001f84 <HAL_GPIO_Init+0x180>
 8001f82:	e098      	b.n	80020b6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001f84:	4a53      	ldr	r2, [pc, #332]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3318      	adds	r3, #24
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	589b      	ldr	r3, [r3, r2]
 8001f90:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	2203      	movs	r2, #3
 8001f96:	4013      	ands	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	220f      	movs	r2, #15
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	23a0      	movs	r3, #160	@ 0xa0
 8001fac:	05db      	lsls	r3, r3, #23
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x1e2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a48      	ldr	r2, [pc, #288]	@ (80020d8 <HAL_GPIO_Init+0x2d4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x1de>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a47      	ldr	r2, [pc, #284]	@ (80020dc <HAL_GPIO_Init+0x2d8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x1da>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a46      	ldr	r2, [pc, #280]	@ (80020e0 <HAL_GPIO_Init+0x2dc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x1d6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a45      	ldr	r2, [pc, #276]	@ (80020e4 <HAL_GPIO_Init+0x2e0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x1d2>
 8001fd2:	2305      	movs	r3, #5
 8001fd4:	e008      	b.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fd6:	2306      	movs	r3, #6
 8001fd8:	e006      	b.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e004      	b.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fde:	2302      	movs	r3, #2
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <HAL_GPIO_Init+0x1e4>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	2103      	movs	r1, #3
 8001fec:	400a      	ands	r2, r1
 8001fee:	00d2      	lsls	r2, r2, #3
 8001ff0:	4093      	lsls	r3, r2
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001ff8:	4936      	ldr	r1, [pc, #216]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	089b      	lsrs	r3, r3, #2
 8001ffe:	3318      	adds	r3, #24
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	697a      	ldr	r2, [r7, #20]
 8002004:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002006:	4a33      	ldr	r2, [pc, #204]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	58d3      	ldr	r3, [r2, r3]
 800200c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	43da      	mvns	r2, r3
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	2380      	movs	r3, #128	@ 0x80
 800201e:	025b      	lsls	r3, r3, #9
 8002020:	4013      	ands	r3, r2
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4313      	orrs	r3, r2
 800202a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 800202c:	4929      	ldr	r1, [pc, #164]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800202e:	2280      	movs	r2, #128	@ 0x80
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8002034:	4a27      	ldr	r2, [pc, #156]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002036:	2384      	movs	r3, #132	@ 0x84
 8002038:	58d3      	ldr	r3, [r2, r3]
 800203a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	43da      	mvns	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	4013      	ands	r3, r2
 8002044:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	2380      	movs	r3, #128	@ 0x80
 800204c:	029b      	lsls	r3, r3, #10
 800204e:	4013      	ands	r3, r2
 8002050:	d003      	beq.n	800205a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4313      	orrs	r3, r2
 8002058:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800205a:	491e      	ldr	r1, [pc, #120]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800205c:	2284      	movs	r2, #132	@ 0x84
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002062:	4b1c      	ldr	r3, [pc, #112]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43da      	mvns	r2, r3
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	4013      	ands	r3, r2
 8002070:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	035b      	lsls	r3, r3, #13
 800207a:	4013      	ands	r3, r2
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 8002088:	697a      	ldr	r2, [r7, #20]
 800208a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800208c:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43da      	mvns	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	4013      	ands	r3, r2
 800209a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	039b      	lsls	r3, r3, #14
 80020a4:	4013      	ands	r3, r2
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80020a8:	697a      	ldr	r2, [r7, #20]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_GPIO_Init+0x2d0>)
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	3301      	adds	r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	40da      	lsrs	r2, r3
 80020c4:	1e13      	subs	r3, r2, #0
 80020c6:	d000      	beq.n	80020ca <HAL_GPIO_Init+0x2c6>
 80020c8:	e6a4      	b.n	8001e14 <HAL_GPIO_Init+0x10>
  }
}
 80020ca:	46c0      	nop			@ (mov r8, r8)
 80020cc:	46c0      	nop			@ (mov r8, r8)
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b006      	add	sp, #24
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021800 	.word	0x40021800
 80020d8:	50000400 	.word	0x50000400
 80020dc:	50000800 	.word	0x50000800
 80020e0:	50000c00 	.word	0x50000c00
 80020e4:	50001400 	.word	0x50001400

080020e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	0008      	movs	r0, r1
 80020f2:	0011      	movs	r1, r2
 80020f4:	1cbb      	adds	r3, r7, #2
 80020f6:	1c02      	adds	r2, r0, #0
 80020f8:	801a      	strh	r2, [r3, #0]
 80020fa:	1c7b      	adds	r3, r7, #1
 80020fc:	1c0a      	adds	r2, r1, #0
 80020fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002100:	1c7b      	adds	r3, r7, #1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d004      	beq.n	8002112 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002108:	1cbb      	adds	r3, r7, #2
 800210a:	881a      	ldrh	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002110:	e003      	b.n	800211a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002112:	1cbb      	adds	r3, r7, #2
 8002114:	881a      	ldrh	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800211a:	46c0      	nop			@ (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..I) to select the GPIO peripheral for STM32C0 family
  * @param  GPIO_Pin: specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	000a      	movs	r2, r1
 800212c:	1cbb      	adds	r3, r7, #2
 800212e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002136:	1cbb      	adds	r3, r7, #2
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	4013      	ands	r3, r2
 800213e:	041a      	lsls	r2, r3, #16
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	43db      	mvns	r3, r3
 8002144:	1cb9      	adds	r1, r7, #2
 8002146:	8809      	ldrh	r1, [r1, #0]
 8002148:	400b      	ands	r3, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	619a      	str	r2, [r3, #24]
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b004      	add	sp, #16
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e08f      	b.n	800228a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2241      	movs	r2, #65	@ 0x41
 800216e:	5c9b      	ldrb	r3, [r3, r2]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d107      	bne.n	8002186 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	@ 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0018      	movs	r0, r3
 8002182:	f7fe fb4d 	bl	8000820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2241      	movs	r2, #65	@ 0x41
 800218a:	2124      	movs	r1, #36	@ 0x24
 800218c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2101      	movs	r1, #1
 800219a:	438a      	bics	r2, r1
 800219c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685a      	ldr	r2, [r3, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	493b      	ldr	r1, [pc, #236]	@ (8002294 <HAL_I2C_Init+0x13c>)
 80021a8:	400a      	ands	r2, r1
 80021aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4938      	ldr	r1, [pc, #224]	@ (8002298 <HAL_I2C_Init+0x140>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d108      	bne.n	80021d6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2180      	movs	r1, #128	@ 0x80
 80021ce:	0209      	lsls	r1, r1, #8
 80021d0:	430a      	orrs	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	e007      	b.n	80021e6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2184      	movs	r1, #132	@ 0x84
 80021e0:	0209      	lsls	r1, r1, #8
 80021e2:	430a      	orrs	r2, r1
 80021e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d109      	bne.n	8002202 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2180      	movs	r1, #128	@ 0x80
 80021fa:	0109      	lsls	r1, r1, #4
 80021fc:	430a      	orrs	r2, r1
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	e007      	b.n	8002212 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4923      	ldr	r1, [pc, #140]	@ (800229c <HAL_I2C_Init+0x144>)
 800220e:	400a      	ands	r2, r1
 8002210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4920      	ldr	r1, [pc, #128]	@ (80022a0 <HAL_I2C_Init+0x148>)
 800221e:	430a      	orrs	r2, r1
 8002220:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	491a      	ldr	r1, [pc, #104]	@ (8002298 <HAL_I2C_Init+0x140>)
 800222e:	400a      	ands	r2, r1
 8002230:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	431a      	orrs	r2, r3
 800223c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	699b      	ldr	r3, [r3, #24]
 8002242:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69d9      	ldr	r1, [r3, #28]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a1a      	ldr	r2, [r3, #32]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2241      	movs	r2, #65	@ 0x41
 8002276:	2120      	movs	r1, #32
 8002278:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2242      	movs	r2, #66	@ 0x42
 8002284:	2100      	movs	r1, #0
 8002286:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b002      	add	sp, #8
 8002290:	bd80      	pop	{r7, pc}
 8002292:	46c0      	nop			@ (mov r8, r8)
 8002294:	f0ffffff 	.word	0xf0ffffff
 8002298:	ffff7fff 	.word	0xffff7fff
 800229c:	fffff7ff 	.word	0xfffff7ff
 80022a0:	02008000 	.word	0x02008000

080022a4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b089      	sub	sp, #36	@ 0x24
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	0008      	movs	r0, r1
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	0019      	movs	r1, r3
 80022b2:	230a      	movs	r3, #10
 80022b4:	18fb      	adds	r3, r7, r3
 80022b6:	1c02      	adds	r2, r0, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	2308      	movs	r3, #8
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	1c0a      	adds	r2, r1, #0
 80022c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2241      	movs	r2, #65	@ 0x41
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b20      	cmp	r3, #32
 80022cc:	d000      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x2c>
 80022ce:	e10a      	b.n	80024e6 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	@ 0x40
 80022d4:	5c9b      	ldrb	r3, [r3, r2]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_I2C_Master_Transmit+0x3a>
 80022da:	2302      	movs	r3, #2
 80022dc:	e104      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2240      	movs	r2, #64	@ 0x40
 80022e2:	2101      	movs	r1, #1
 80022e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022e6:	f7ff fbf3 	bl	8001ad0 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	0219      	lsls	r1, r3, #8
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2319      	movs	r3, #25
 80022fa:	2201      	movs	r2, #1
 80022fc:	f000 fa26 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002300:	1e03      	subs	r3, r0, #0
 8002302:	d001      	beq.n	8002308 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0ef      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2241      	movs	r2, #65	@ 0x41
 800230c:	2121      	movs	r1, #33	@ 0x21
 800230e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2242      	movs	r2, #66	@ 0x42
 8002314:	2110      	movs	r1, #16
 8002316:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2208      	movs	r2, #8
 8002328:	18ba      	adds	r2, r7, r2
 800232a:	8812      	ldrh	r2, [r2, #0]
 800232c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	2bff      	cmp	r3, #255	@ 0xff
 800233c:	d906      	bls.n	800234c <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	22ff      	movs	r2, #255	@ 0xff
 8002342:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	045b      	lsls	r3, r3, #17
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e007      	b.n	800235c <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002356:	2380      	movs	r3, #128	@ 0x80
 8002358:	049b      	lsls	r3, r3, #18
 800235a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d027      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	697c      	ldr	r4, [r7, #20]
 80023a0:	230a      	movs	r3, #10
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	8819      	ldrh	r1, [r3, #0]
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	4b51      	ldr	r3, [pc, #324]	@ (80024f0 <HAL_I2C_Master_Transmit+0x24c>)
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	0023      	movs	r3, r4
 80023ae:	f000 fc45 	bl	8002c3c <I2C_TransferConfig>
 80023b2:	e06f      	b.n	8002494 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	697c      	ldr	r4, [r7, #20]
 80023bc:	230a      	movs	r3, #10
 80023be:	18fb      	adds	r3, r7, r3
 80023c0:	8819      	ldrh	r1, [r3, #0]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	4b4a      	ldr	r3, [pc, #296]	@ (80024f0 <HAL_I2C_Master_Transmit+0x24c>)
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	0023      	movs	r3, r4
 80023ca:	f000 fc37 	bl	8002c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80023ce:	e061      	b.n	8002494 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fa10 	bl	80027fc <I2C_WaitOnTXISFlagUntilTimeout>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e081      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023fe:	b29b      	uxth	r3, r3
 8002400:	3b01      	subs	r3, #1
 8002402:	b29a      	uxth	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800240c:	3b01      	subs	r3, #1
 800240e:	b29a      	uxth	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002418:	b29b      	uxth	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d03a      	beq.n	8002494 <HAL_I2C_Master_Transmit+0x1f0>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002422:	2b00      	cmp	r3, #0
 8002424:	d136      	bne.n	8002494 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002426:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	0013      	movs	r3, r2
 8002430:	2200      	movs	r2, #0
 8002432:	2180      	movs	r1, #128	@ 0x80
 8002434:	f000 f98a 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002438:	1e03      	subs	r3, r0, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e053      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002444:	b29b      	uxth	r3, r3
 8002446:	2bff      	cmp	r3, #255	@ 0xff
 8002448:	d911      	bls.n	800246e <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	22ff      	movs	r2, #255	@ 0xff
 800244e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002454:	b2da      	uxtb	r2, r3
 8002456:	2380      	movs	r3, #128	@ 0x80
 8002458:	045c      	lsls	r4, r3, #17
 800245a:	230a      	movs	r3, #10
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	8819      	ldrh	r1, [r3, #0]
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	2300      	movs	r3, #0
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	0023      	movs	r3, r4
 8002468:	f000 fbe8 	bl	8002c3c <I2C_TransferConfig>
 800246c:	e012      	b.n	8002494 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002472:	b29a      	uxth	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	049c      	lsls	r4, r3, #18
 8002482:	230a      	movs	r3, #10
 8002484:	18fb      	adds	r3, r7, r3
 8002486:	8819      	ldrh	r1, [r3, #0]
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	2300      	movs	r3, #0
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	0023      	movs	r3, r4
 8002490:	f000 fbd4 	bl	8002c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	d198      	bne.n	80023d0 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 f9ef 	bl	8002888 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024aa:	1e03      	subs	r3, r0, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e01a      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2220      	movs	r2, #32
 80024b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	490b      	ldr	r1, [pc, #44]	@ (80024f4 <HAL_I2C_Master_Transmit+0x250>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2241      	movs	r2, #65	@ 0x41
 80024ce:	2120      	movs	r1, #32
 80024d0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2242      	movs	r2, #66	@ 0x42
 80024d6:	2100      	movs	r1, #0
 80024d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2240      	movs	r2, #64	@ 0x40
 80024de:	2100      	movs	r1, #0
 80024e0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	e000      	b.n	80024e8 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80024e6:	2302      	movs	r3, #2
  }
}
 80024e8:	0018      	movs	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	b007      	add	sp, #28
 80024ee:	bd90      	pop	{r4, r7, pc}
 80024f0:	80002000 	.word	0x80002000
 80024f4:	fe00e800 	.word	0xfe00e800

080024f8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af02      	add	r7, sp, #8
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	0008      	movs	r0, r1
 8002502:	607a      	str	r2, [r7, #4]
 8002504:	0019      	movs	r1, r3
 8002506:	230a      	movs	r3, #10
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	1c02      	adds	r2, r0, #0
 800250c:	801a      	strh	r2, [r3, #0]
 800250e:	2308      	movs	r3, #8
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	1c0a      	adds	r2, r1, #0
 8002514:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2241      	movs	r2, #65	@ 0x41
 800251a:	5c9b      	ldrb	r3, [r3, r2]
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b20      	cmp	r3, #32
 8002520:	d000      	beq.n	8002524 <HAL_I2C_Master_Receive+0x2c>
 8002522:	e0e8      	b.n	80026f6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2240      	movs	r2, #64	@ 0x40
 8002528:	5c9b      	ldrb	r3, [r3, r2]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Master_Receive+0x3a>
 800252e:	2302      	movs	r3, #2
 8002530:	e0e2      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2240      	movs	r2, #64	@ 0x40
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800253a:	f7ff fac9 	bl	8001ad0 <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	0219      	lsls	r1, r3, #8
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2319      	movs	r3, #25
 800254e:	2201      	movs	r2, #1
 8002550:	f000 f8fc 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002554:	1e03      	subs	r3, r0, #0
 8002556:	d001      	beq.n	800255c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0cd      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2241      	movs	r2, #65	@ 0x41
 8002560:	2122      	movs	r1, #34	@ 0x22
 8002562:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2242      	movs	r2, #66	@ 0x42
 8002568:	2110      	movs	r1, #16
 800256a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2208      	movs	r2, #8
 800257c:	18ba      	adds	r2, r7, r2
 800257e:	8812      	ldrh	r2, [r2, #0]
 8002580:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2200      	movs	r2, #0
 8002586:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258c:	b29b      	uxth	r3, r3
 800258e:	2bff      	cmp	r3, #255	@ 0xff
 8002590:	d911      	bls.n	80025b6 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	22ff      	movs	r2, #255	@ 0xff
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800259c:	b2da      	uxtb	r2, r3
 800259e:	2380      	movs	r3, #128	@ 0x80
 80025a0:	045c      	lsls	r4, r3, #17
 80025a2:	230a      	movs	r3, #10
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	8819      	ldrh	r1, [r3, #0]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	4b55      	ldr	r3, [pc, #340]	@ (8002700 <HAL_I2C_Master_Receive+0x208>)
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	0023      	movs	r3, r4
 80025b0:	f000 fb44 	bl	8002c3c <I2C_TransferConfig>
 80025b4:	e076      	b.n	80026a4 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	2380      	movs	r3, #128	@ 0x80
 80025c8:	049c      	lsls	r4, r3, #18
 80025ca:	230a      	movs	r3, #10
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	8819      	ldrh	r1, [r3, #0]
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <HAL_I2C_Master_Receive+0x208>)
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	0023      	movs	r3, r4
 80025d8:	f000 fb30 	bl	8002c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80025dc:	e062      	b.n	80026a4 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025de:	697a      	ldr	r2, [r7, #20]
 80025e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	0018      	movs	r0, r3
 80025e6:	f000 f993 	bl	8002910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ea:	1e03      	subs	r3, r0, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e082      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002604:	1c5a      	adds	r2, r3, #1
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260e:	3b01      	subs	r3, #1
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261a:	b29b      	uxth	r3, r3
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d03a      	beq.n	80026a4 <HAL_I2C_Master_Receive+0x1ac>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002632:	2b00      	cmp	r3, #0
 8002634:	d136      	bne.n	80026a4 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	0013      	movs	r3, r2
 8002640:	2200      	movs	r2, #0
 8002642:	2180      	movs	r1, #128	@ 0x80
 8002644:	f000 f882 	bl	800274c <I2C_WaitOnFlagUntilTimeout>
 8002648:	1e03      	subs	r3, r0, #0
 800264a:	d001      	beq.n	8002650 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e053      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002654:	b29b      	uxth	r3, r3
 8002656:	2bff      	cmp	r3, #255	@ 0xff
 8002658:	d911      	bls.n	800267e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	22ff      	movs	r2, #255	@ 0xff
 800265e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	2380      	movs	r3, #128	@ 0x80
 8002668:	045c      	lsls	r4, r3, #17
 800266a:	230a      	movs	r3, #10
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	8819      	ldrh	r1, [r3, #0]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	2300      	movs	r3, #0
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	0023      	movs	r3, r4
 8002678:	f000 fae0 	bl	8002c3c <I2C_TransferConfig>
 800267c:	e012      	b.n	80026a4 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800268c:	b2da      	uxtb	r2, r3
 800268e:	2380      	movs	r3, #128	@ 0x80
 8002690:	049c      	lsls	r4, r3, #18
 8002692:	230a      	movs	r3, #10
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	8819      	ldrh	r1, [r3, #0]
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	0023      	movs	r3, r4
 80026a0:	f000 facc 	bl	8002c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d197      	bne.n	80025de <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 f8e7 	bl	8002888 <I2C_WaitOnSTOPFlagUntilTimeout>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d001      	beq.n	80026c2 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e01a      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2220      	movs	r2, #32
 80026c8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	490b      	ldr	r1, [pc, #44]	@ (8002704 <HAL_I2C_Master_Receive+0x20c>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2241      	movs	r2, #65	@ 0x41
 80026de:	2120      	movs	r1, #32
 80026e0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2242      	movs	r2, #66	@ 0x42
 80026e6:	2100      	movs	r1, #0
 80026e8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2240      	movs	r2, #64	@ 0x40
 80026ee:	2100      	movs	r1, #0
 80026f0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b007      	add	sp, #28
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	80002400 	.word	0x80002400
 8002704:	fe00e800 	.word	0xfe00e800

08002708 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	2202      	movs	r2, #2
 8002718:	4013      	ands	r3, r2
 800271a:	2b02      	cmp	r3, #2
 800271c:	d103      	bne.n	8002726 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	2201      	movs	r2, #1
 800272e:	4013      	ands	r3, r2
 8002730:	2b01      	cmp	r3, #1
 8002732:	d007      	beq.n	8002744 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	699a      	ldr	r2, [r3, #24]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2101      	movs	r1, #1
 8002740:	430a      	orrs	r2, r1
 8002742:	619a      	str	r2, [r3, #24]
  }
}
 8002744:	46c0      	nop			@ (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800275c:	e03a      	b.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	6839      	ldr	r1, [r7, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	0018      	movs	r0, r3
 8002766:	f000 f971 	bl	8002a4c <I2C_IsErrorOccurred>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d001      	beq.n	8002772 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e040      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	d02d      	beq.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002778:	f7ff f9aa 	bl	8001ad0 <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d302      	bcc.n	800278e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d122      	bne.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	68ba      	ldr	r2, [r7, #8]
 8002796:	4013      	ands	r3, r2
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	425a      	negs	r2, r3
 800279e:	4153      	adcs	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	001a      	movs	r2, r3
 80027a4:	1dfb      	adds	r3, r7, #7
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d113      	bne.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b0:	2220      	movs	r2, #32
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2241      	movs	r2, #65	@ 0x41
 80027bc:	2120      	movs	r1, #32
 80027be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2242      	movs	r2, #66	@ 0x42
 80027c4:	2100      	movs	r1, #0
 80027c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2240      	movs	r2, #64	@ 0x40
 80027cc:	2100      	movs	r1, #0
 80027ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e00f      	b.n	80027f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	4013      	ands	r3, r2
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	425a      	negs	r2, r3
 80027e4:	4153      	adcs	r3, r2
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	001a      	movs	r2, r3
 80027ea:	1dfb      	adds	r3, r7, #7
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d0b5      	beq.n	800275e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f2:	2300      	movs	r3, #0
}
 80027f4:	0018      	movs	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	b004      	add	sp, #16
 80027fa:	bd80      	pop	{r7, pc}

080027fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	60b9      	str	r1, [r7, #8]
 8002806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002808:	e032      	b.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 f91b 	bl	8002a4c <I2C_IsErrorOccurred>
 8002816:	1e03      	subs	r3, r0, #0
 8002818:	d001      	beq.n	800281e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e030      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3301      	adds	r3, #1
 8002822:	d025      	beq.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7ff f954 	bl	8001ad0 <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11a      	bne.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2202      	movs	r2, #2
 8002842:	4013      	ands	r3, r2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d013      	beq.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	2220      	movs	r2, #32
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2241      	movs	r2, #65	@ 0x41
 8002858:	2120      	movs	r1, #32
 800285a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2242      	movs	r2, #66	@ 0x42
 8002860:	2100      	movs	r1, #0
 8002862:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	2100      	movs	r1, #0
 800286a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e007      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	2202      	movs	r2, #2
 8002878:	4013      	ands	r3, r2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d1c5      	bne.n	800280a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b004      	add	sp, #16
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002894:	e02f      	b.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	0018      	movs	r0, r3
 800289e:	f000 f8d5 	bl	8002a4c <I2C_IsErrorOccurred>
 80028a2:	1e03      	subs	r3, r0, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02d      	b.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7ff f911 	bl	8001ad0 <HAL_GetTick>
 80028ae:	0002      	movs	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11a      	bne.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	2220      	movs	r2, #32
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d013      	beq.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	2220      	movs	r2, #32
 80028d4:	431a      	orrs	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2241      	movs	r2, #65	@ 0x41
 80028de:	2120      	movs	r1, #32
 80028e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2242      	movs	r2, #66	@ 0x42
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2240      	movs	r2, #64	@ 0x40
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2220      	movs	r2, #32
 80028fe:	4013      	ands	r3, r2
 8002900:	2b20      	cmp	r3, #32
 8002902:	d1c8      	bne.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	0018      	movs	r0, r3
 8002908:	46bd      	mov	sp, r7
 800290a:	b004      	add	sp, #16
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2317      	movs	r3, #23
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002924:	e07b      	b.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	0018      	movs	r0, r3
 800292e:	f000 f88d 	bl	8002a4c <I2C_IsErrorOccurred>
 8002932:	1e03      	subs	r3, r0, #0
 8002934:	d003      	beq.n	800293e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002936:	2317      	movs	r3, #23
 8002938:	18fb      	adds	r3, r7, r3
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2220      	movs	r2, #32
 8002946:	4013      	ands	r3, r2
 8002948:	2b20      	cmp	r3, #32
 800294a:	d140      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800294c:	2117      	movs	r1, #23
 800294e:	187b      	adds	r3, r7, r1
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d13b      	bne.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2204      	movs	r2, #4
 800295e:	4013      	ands	r3, r2
 8002960:	2b04      	cmp	r3, #4
 8002962:	d106      	bne.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800296c:	187b      	adds	r3, r7, r1
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	2210      	movs	r2, #16
 800297a:	4013      	ands	r3, r2
 800297c:	2b10      	cmp	r3, #16
 800297e:	d123      	bne.n	80029c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2210      	movs	r2, #16
 8002986:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2204      	movs	r2, #4
 800298c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2220      	movs	r2, #32
 8002994:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4929      	ldr	r1, [pc, #164]	@ (8002a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80029a2:	400a      	ands	r2, r1
 80029a4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2241      	movs	r2, #65	@ 0x41
 80029aa:	2120      	movs	r1, #32
 80029ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2242      	movs	r2, #66	@ 0x42
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2240      	movs	r2, #64	@ 0x40
 80029ba:	2100      	movs	r1, #0
 80029bc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2201      	movs	r2, #1
 80029c4:	701a      	strb	r2, [r3, #0]
 80029c6:	e002      	b.n	80029ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80029ce:	f7ff f87f 	bl	8001ad0 <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d302      	bcc.n	80029e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11c      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80029e4:	2017      	movs	r0, #23
 80029e6:	183b      	adds	r3, r7, r0
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d117      	bne.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	2204      	movs	r2, #4
 80029f6:	4013      	ands	r3, r2
 80029f8:	2b04      	cmp	r3, #4
 80029fa:	d010      	beq.n	8002a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a00:	2220      	movs	r2, #32
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2241      	movs	r2, #65	@ 0x41
 8002a0c:	2120      	movs	r1, #32
 8002a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2240      	movs	r2, #64	@ 0x40
 8002a14:	2100      	movs	r1, #0
 8002a16:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002a18:	183b      	adds	r3, r7, r0
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2204      	movs	r2, #4
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b04      	cmp	r3, #4
 8002a2a:	d005      	beq.n	8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002a2c:	2317      	movs	r3, #23
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d100      	bne.n	8002a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002a36:	e776      	b.n	8002926 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002a38:	2317      	movs	r3, #23
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	781b      	ldrb	r3, [r3, #0]
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b006      	add	sp, #24
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	@ 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a58:	2327      	movs	r3, #39	@ 0x27
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2210      	movs	r2, #16
 8002a74:	4013      	ands	r3, r2
 8002a76:	d100      	bne.n	8002a7a <I2C_IsErrorOccurred+0x2e>
 8002a78:	e079      	b.n	8002b6e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2210      	movs	r2, #16
 8002a80:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a82:	e057      	b.n	8002b34 <I2C_IsErrorOccurred+0xe8>
 8002a84:	2227      	movs	r2, #39	@ 0x27
 8002a86:	18bb      	adds	r3, r7, r2
 8002a88:	18ba      	adds	r2, r7, r2
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3301      	adds	r3, #1
 8002a92:	d04f      	beq.n	8002b34 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a94:	f7ff f81c 	bl	8001ad0 <HAL_GetTick>
 8002a98:	0002      	movs	r2, r0
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d302      	bcc.n	8002aaa <I2C_IsErrorOccurred+0x5e>
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d144      	bne.n	8002b34 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	01db      	lsls	r3, r3, #7
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002ab8:	2013      	movs	r0, #19
 8002aba:	183b      	adds	r3, r7, r0
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	2142      	movs	r1, #66	@ 0x42
 8002ac0:	5c52      	ldrb	r2, [r2, r1]
 8002ac2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	699a      	ldr	r2, [r3, #24]
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	401a      	ands	r2, r3
 8002ad0:	2380      	movs	r3, #128	@ 0x80
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d126      	bne.n	8002b26 <I2C_IsErrorOccurred+0xda>
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	01db      	lsls	r3, r3, #7
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d021      	beq.n	8002b26 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b20      	cmp	r3, #32
 8002ae8:	d01d      	beq.n	8002b26 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	01c9      	lsls	r1, r1, #7
 8002af8:	430a      	orrs	r2, r1
 8002afa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002afc:	f7fe ffe8 	bl	8001ad0 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b04:	e00f      	b.n	8002b26 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b06:	f7fe ffe3 	bl	8001ad0 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b19      	cmp	r3, #25
 8002b12:	d908      	bls.n	8002b26 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	2220      	movs	r2, #32
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002b1c:	2327      	movs	r3, #39	@ 0x27
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]

              break;
 8002b24:	e006      	b.n	8002b34 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	4013      	ands	r3, r2
 8002b30:	2b20      	cmp	r3, #32
 8002b32:	d1e8      	bne.n	8002b06 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d004      	beq.n	8002b4c <I2C_IsErrorOccurred+0x100>
 8002b42:	2327      	movs	r3, #39	@ 0x27
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d09b      	beq.n	8002a84 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b4c:	2327      	movs	r3, #39	@ 0x27
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2204      	movs	r2, #4
 8002b62:	4313      	orrs	r3, r2
 8002b64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b66:	2327      	movs	r3, #39	@ 0x27
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	699b      	ldr	r3, [r3, #24]
 8002b74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b76:	69ba      	ldr	r2, [r7, #24]
 8002b78:	2380      	movs	r3, #128	@ 0x80
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00c      	beq.n	8002b9a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b80:	6a3b      	ldr	r3, [r7, #32]
 8002b82:	2201      	movs	r2, #1
 8002b84:	4313      	orrs	r3, r2
 8002b86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0052      	lsls	r2, r2, #1
 8002b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b92:	2327      	movs	r3, #39	@ 0x27
 8002b94:	18fb      	adds	r3, r7, r3
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	2380      	movs	r3, #128	@ 0x80
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d00c      	beq.n	8002bbe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	2208      	movs	r2, #8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2280      	movs	r2, #128	@ 0x80
 8002bb2:	00d2      	lsls	r2, r2, #3
 8002bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb6:	2327      	movs	r3, #39	@ 0x27
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2201      	movs	r2, #1
 8002bbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	2380      	movs	r3, #128	@ 0x80
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d00c      	beq.n	8002be2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bda:	2327      	movs	r3, #39	@ 0x27
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002be2:	2327      	movs	r3, #39	@ 0x27
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01d      	beq.n	8002c28 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f7ff fd8a 	bl	8002708 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	490e      	ldr	r1, [pc, #56]	@ (8002c38 <I2C_IsErrorOccurred+0x1ec>)
 8002c00:	400a      	ands	r2, r1
 8002c02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2241      	movs	r2, #65	@ 0x41
 8002c14:	2120      	movs	r1, #32
 8002c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2242      	movs	r2, #66	@ 0x42
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2240      	movs	r2, #64	@ 0x40
 8002c24:	2100      	movs	r1, #0
 8002c26:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002c28:	2327      	movs	r3, #39	@ 0x27
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
}
 8002c2e:	0018      	movs	r0, r3
 8002c30:	46bd      	mov	sp, r7
 8002c32:	b00a      	add	sp, #40	@ 0x28
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	46c0      	nop			@ (mov r8, r8)
 8002c38:	fe00e800 	.word	0xfe00e800

08002c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c3c:	b590      	push	{r4, r7, lr}
 8002c3e:	b087      	sub	sp, #28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	0008      	movs	r0, r1
 8002c46:	0011      	movs	r1, r2
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	240a      	movs	r4, #10
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	1c02      	adds	r2, r0, #0
 8002c50:	801a      	strh	r2, [r3, #0]
 8002c52:	2009      	movs	r0, #9
 8002c54:	183b      	adds	r3, r7, r0
 8002c56:	1c0a      	adds	r2, r1, #0
 8002c58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	881b      	ldrh	r3, [r3, #0]
 8002c5e:	059b      	lsls	r3, r3, #22
 8002c60:	0d9a      	lsrs	r2, r3, #22
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c62:	183b      	adds	r3, r7, r0
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	0419      	lsls	r1, r3, #16
 8002c68:	23ff      	movs	r3, #255	@ 0xff
 8002c6a:	041b      	lsls	r3, r3, #16
 8002c6c:	400b      	ands	r3, r1
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c6e:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c76:	4313      	orrs	r3, r2
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c86:	0d51      	lsrs	r1, r2, #21
 8002c88:	2280      	movs	r2, #128	@ 0x80
 8002c8a:	00d2      	lsls	r2, r2, #3
 8002c8c:	400a      	ands	r2, r1
 8002c8e:	4907      	ldr	r1, [pc, #28]	@ (8002cac <I2C_TransferConfig+0x70>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	43d2      	mvns	r2, r2
 8002c94:	401a      	ands	r2, r3
 8002c96:	0011      	movs	r1, r2
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002ca2:	46c0      	nop			@ (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b007      	add	sp, #28
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	03ff63ff 	.word	0x03ff63ff

08002cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2241      	movs	r2, #65	@ 0x41
 8002cbe:	5c9b      	ldrb	r3, [r3, r2]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b20      	cmp	r3, #32
 8002cc4:	d138      	bne.n	8002d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2240      	movs	r2, #64	@ 0x40
 8002cca:	5c9b      	ldrb	r3, [r3, r2]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e032      	b.n	8002d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2240      	movs	r2, #64	@ 0x40
 8002cd8:	2101      	movs	r1, #1
 8002cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2241      	movs	r2, #65	@ 0x41
 8002ce0:	2124      	movs	r1, #36	@ 0x24
 8002ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	438a      	bics	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4911      	ldr	r1, [pc, #68]	@ (8002d44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002d00:	400a      	ands	r2, r1
 8002d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6819      	ldr	r1, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	430a      	orrs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2241      	movs	r2, #65	@ 0x41
 8002d28:	2120      	movs	r1, #32
 8002d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2240      	movs	r2, #64	@ 0x40
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e000      	b.n	8002d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d38:	2302      	movs	r3, #2
  }
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	ffffefff 	.word	0xffffefff

08002d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2241      	movs	r2, #65	@ 0x41
 8002d56:	5c9b      	ldrb	r3, [r3, r2]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d139      	bne.n	8002dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2240      	movs	r2, #64	@ 0x40
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e033      	b.n	8002dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2240      	movs	r2, #64	@ 0x40
 8002d70:	2101      	movs	r1, #1
 8002d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2241      	movs	r2, #65	@ 0x41
 8002d78:	2124      	movs	r1, #36	@ 0x24
 8002d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2101      	movs	r1, #1
 8002d88:	438a      	bics	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4a11      	ldr	r2, [pc, #68]	@ (8002ddc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	021b      	lsls	r3, r3, #8
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2241      	movs	r2, #65	@ 0x41
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2240      	movs	r2, #64	@ 0x40
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
  }
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	fffff0ff 	.word	0xfffff0ff

08002de0 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e1d0      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d100      	bne.n	8002dfe <HAL_RCC_OscConfig+0x1e>
 8002dfc:	e069      	b.n	8002ed2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfe:	4bc8      	ldr	r3, [pc, #800]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	2238      	movs	r2, #56	@ 0x38
 8002e04:	4013      	ands	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2b08      	cmp	r3, #8
 8002e0c:	d105      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d15d      	bne.n	8002ed2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e1bc      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	2380      	movs	r3, #128	@ 0x80
 8002e20:	025b      	lsls	r3, r3, #9
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d107      	bne.n	8002e36 <HAL_RCC_OscConfig+0x56>
 8002e26:	4bbe      	ldr	r3, [pc, #760]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	4bbd      	ldr	r3, [pc, #756]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e2c:	2180      	movs	r1, #128	@ 0x80
 8002e2e:	0249      	lsls	r1, r1, #9
 8002e30:	430a      	orrs	r2, r1
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e020      	b.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	23a0      	movs	r3, #160	@ 0xa0
 8002e3c:	02db      	lsls	r3, r3, #11
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d10e      	bne.n	8002e60 <HAL_RCC_OscConfig+0x80>
 8002e42:	4bb7      	ldr	r3, [pc, #732]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4bb6      	ldr	r3, [pc, #728]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	02c9      	lsls	r1, r1, #11
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]
 8002e50:	4bb3      	ldr	r3, [pc, #716]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	4bb2      	ldr	r3, [pc, #712]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	0249      	lsls	r1, r1, #9
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	601a      	str	r2, [r3, #0]
 8002e5e:	e00b      	b.n	8002e78 <HAL_RCC_OscConfig+0x98>
 8002e60:	4baf      	ldr	r3, [pc, #700]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4bae      	ldr	r3, [pc, #696]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e66:	49af      	ldr	r1, [pc, #700]	@ (8003124 <HAL_RCC_OscConfig+0x344>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	4bac      	ldr	r3, [pc, #688]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	4bab      	ldr	r3, [pc, #684]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e72:	49ad      	ldr	r1, [pc, #692]	@ (8003128 <HAL_RCC_OscConfig+0x348>)
 8002e74:	400a      	ands	r2, r1
 8002e76:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d014      	beq.n	8002eaa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fe26 	bl	8001ad0 <HAL_GetTick>
 8002e84:	0003      	movs	r3, r0
 8002e86:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fe21 	bl	8001ad0 <HAL_GetTick>
 8002e8e:	0002      	movs	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	@ 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e17b      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	029b      	lsls	r3, r3, #10
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0xaa>
 8002ea8:	e013      	b.n	8002ed2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eaa:	f7fe fe11 	bl	8001ad0 <HAL_GetTick>
 8002eae:	0003      	movs	r3, r0
 8002eb0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fe0c 	bl	8001ad0 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e166      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec6:	4b96      	ldr	r3, [pc, #600]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2380      	movs	r3, #128	@ 0x80
 8002ecc:	029b      	lsls	r3, r3, #10
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d100      	bne.n	8002ede <HAL_RCC_OscConfig+0xfe>
 8002edc:	e086      	b.n	8002fec <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ede:	4b90      	ldr	r3, [pc, #576]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2238      	movs	r2, #56	@ 0x38
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d12f      	bne.n	8002f4e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e14c      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efa:	4b89      	ldr	r3, [pc, #548]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a8b      	ldr	r2, [pc, #556]	@ (800312c <HAL_RCC_OscConfig+0x34c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	021a      	lsls	r2, r3, #8
 8002f0a:	4b85      	ldr	r3, [pc, #532]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d112      	bne.n	8002f3c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f16:	4b82      	ldr	r3, [pc, #520]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a85      	ldr	r2, [pc, #532]	@ (8003130 <HAL_RCC_OscConfig+0x350>)
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	0019      	movs	r1, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	691a      	ldr	r2, [r3, #16]
 8002f24:	4b7e      	ldr	r3, [pc, #504]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f26:	430a      	orrs	r2, r1
 8002f28:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	0adb      	lsrs	r3, r3, #11
 8002f30:	2207      	movs	r2, #7
 8002f32:	4013      	ands	r3, r2
 8002f34:	4a7f      	ldr	r2, [pc, #508]	@ (8003134 <HAL_RCC_OscConfig+0x354>)
 8002f36:	40da      	lsrs	r2, r3
 8002f38:	4b7f      	ldr	r3, [pc, #508]	@ (8003138 <HAL_RCC_OscConfig+0x358>)
 8002f3a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f3c:	4b7f      	ldr	r3, [pc, #508]	@ (800313c <HAL_RCC_OscConfig+0x35c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0018      	movs	r0, r3
 8002f42:	f7fe fd69 	bl	8001a18 <HAL_InitTick>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d050      	beq.n	8002fec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e122      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d030      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002f56:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a75      	ldr	r2, [pc, #468]	@ (8003130 <HAL_RCC_OscConfig+0x350>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	4b6e      	ldr	r3, [pc, #440]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f66:	430a      	orrs	r2, r1
 8002f68:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002f6a:	4b6d      	ldr	r3, [pc, #436]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f70:	2180      	movs	r1, #128	@ 0x80
 8002f72:	0049      	lsls	r1, r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fdaa 	bl	8001ad0 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002f82:	f7fe fda5 	bl	8001ad0 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0ff      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f94:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	@ 0x80
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d0f0      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	4a61      	ldr	r2, [pc, #388]	@ (800312c <HAL_RCC_OscConfig+0x34c>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	0019      	movs	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	021a      	lsls	r2, r3, #8
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	e019      	b.n	8002fec <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002fb8:	4b59      	ldr	r3, [pc, #356]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b58      	ldr	r3, [pc, #352]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002fbe:	4960      	ldr	r1, [pc, #384]	@ (8003140 <HAL_RCC_OscConfig+0x360>)
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fe fd84 	bl	8001ad0 <HAL_GetTick>
 8002fc8:	0003      	movs	r3, r0
 8002fca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002fce:	f7fe fd7f 	bl	8001ad0 <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e0d9      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	00db      	lsls	r3, r3, #3
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d1f0      	bne.n	8002fce <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d042      	beq.n	800307c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2238      	movs	r2, #56	@ 0x38
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	2b18      	cmp	r3, #24
 8003000:	d105      	bne.n	800300e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d138      	bne.n	800307c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0c2      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003016:	4b42      	ldr	r3, [pc, #264]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8003018:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800301a:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 800301c:	2101      	movs	r1, #1
 800301e:	430a      	orrs	r2, r1
 8003020:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fe fd55 	bl	8001ad0 <HAL_GetTick>
 8003026:	0003      	movs	r3, r0
 8003028:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800302c:	f7fe fd50 	bl	8001ad0 <HAL_GetTick>
 8003030:	0002      	movs	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b02      	cmp	r3, #2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e0aa      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800303e:	4b38      	ldr	r3, [pc, #224]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	2202      	movs	r2, #2
 8003044:	4013      	ands	r3, r2
 8003046:	d0f1      	beq.n	800302c <HAL_RCC_OscConfig+0x24c>
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800304a:	4b35      	ldr	r3, [pc, #212]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 800304c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800304e:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8003050:	2101      	movs	r1, #1
 8003052:	438a      	bics	r2, r1
 8003054:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fe fd3b 	bl	8001ad0 <HAL_GetTick>
 800305a:	0003      	movs	r3, r0
 800305c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800305e:	e008      	b.n	8003072 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003060:	f7fe fd36 	bl	8001ad0 <HAL_GetTick>
 8003064:	0002      	movs	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	2b02      	cmp	r3, #2
 800306c:	d901      	bls.n	8003072 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800306e:	2303      	movs	r3, #3
 8003070:	e090      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003072:	4b2b      	ldr	r3, [pc, #172]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003076:	2202      	movs	r2, #2
 8003078:	4013      	ands	r3, r2
 800307a:	d1f1      	bne.n	8003060 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2204      	movs	r2, #4
 8003082:	4013      	ands	r3, r2
 8003084:	d100      	bne.n	8003088 <HAL_RCC_OscConfig+0x2a8>
 8003086:	e084      	b.n	8003192 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003088:	230f      	movs	r3, #15
 800308a:	18fb      	adds	r3, r7, r3
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003090:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2238      	movs	r2, #56	@ 0x38
 8003096:	4013      	ands	r3, r2
 8003098:	2b20      	cmp	r3, #32
 800309a:	d106      	bne.n	80030aa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d000      	beq.n	80030a6 <HAL_RCC_OscConfig+0x2c6>
 80030a4:	e075      	b.n	8003192 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e074      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d106      	bne.n	80030c0 <HAL_RCC_OscConfig+0x2e0>
 80030b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030b8:	2101      	movs	r1, #1
 80030ba:	430a      	orrs	r2, r1
 80030bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030be:	e01c      	b.n	80030fa <HAL_RCC_OscConfig+0x31a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x302>
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030ce:	2104      	movs	r1, #4
 80030d0:	430a      	orrs	r2, r1
 80030d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030d4:	4b12      	ldr	r3, [pc, #72]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030d6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d8:	4b11      	ldr	r3, [pc, #68]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030da:	2101      	movs	r1, #1
 80030dc:	430a      	orrs	r2, r1
 80030de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030e0:	e00b      	b.n	80030fa <HAL_RCC_OscConfig+0x31a>
 80030e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030e8:	2101      	movs	r1, #1
 80030ea:	438a      	bics	r2, r1
 80030ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_RCC_OscConfig+0x340>)
 80030f4:	2104      	movs	r1, #4
 80030f6:	438a      	bics	r2, r1
 80030f8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d028      	beq.n	8003154 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fce5 	bl	8001ad0 <HAL_GetTick>
 8003106:	0003      	movs	r3, r0
 8003108:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310c:	f7fe fce0 	bl	8001ad0 <HAL_GetTick>
 8003110:	0002      	movs	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	4a0b      	ldr	r2, [pc, #44]	@ (8003144 <HAL_RCC_OscConfig+0x364>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d915      	bls.n	8003148 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e039      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
 8003120:	40021000 	.word	0x40021000
 8003124:	fffeffff 	.word	0xfffeffff
 8003128:	fffbffff 	.word	0xfffbffff
 800312c:	ffff80ff 	.word	0xffff80ff
 8003130:	ffffc7ff 	.word	0xffffc7ff
 8003134:	02dc6c00 	.word	0x02dc6c00
 8003138:	20000000 	.word	0x20000000
 800313c:	2000001c 	.word	0x2000001c
 8003140:	fffffeff 	.word	0xfffffeff
 8003144:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003148:	4b14      	ldr	r3, [pc, #80]	@ (800319c <HAL_RCC_OscConfig+0x3bc>)
 800314a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314c:	2202      	movs	r2, #2
 800314e:	4013      	ands	r3, r2
 8003150:	d0dc      	beq.n	800310c <HAL_RCC_OscConfig+0x32c>
 8003152:	e013      	b.n	800317c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003154:	f7fe fcbc 	bl	8001ad0 <HAL_GetTick>
 8003158:	0003      	movs	r3, r0
 800315a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800315c:	e009      	b.n	8003172 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315e:	f7fe fcb7 	bl	8001ad0 <HAL_GetTick>
 8003162:	0002      	movs	r2, r0
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	4a0d      	ldr	r2, [pc, #52]	@ (80031a0 <HAL_RCC_OscConfig+0x3c0>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e010      	b.n	8003194 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003172:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_RCC_OscConfig+0x3bc>)
 8003174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003176:	2202      	movs	r2, #2
 8003178:	4013      	ands	r3, r2
 800317a:	d1f0      	bne.n	800315e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800317c:	230f      	movs	r3, #15
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d105      	bne.n	8003192 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003186:	4b05      	ldr	r3, [pc, #20]	@ (800319c <HAL_RCC_OscConfig+0x3bc>)
 8003188:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800318a:	4b04      	ldr	r3, [pc, #16]	@ (800319c <HAL_RCC_OscConfig+0x3bc>)
 800318c:	4905      	ldr	r1, [pc, #20]	@ (80031a4 <HAL_RCC_OscConfig+0x3c4>)
 800318e:	400a      	ands	r2, r1
 8003190:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b006      	add	sp, #24
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40021000 	.word	0x40021000
 80031a0:	00001388 	.word	0x00001388
 80031a4:	efffffff 	.word	0xefffffff

080031a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0df      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031bc:	4b71      	ldr	r3, [pc, #452]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d91e      	bls.n	8003208 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ca:	4b6e      	ldr	r3, [pc, #440]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2207      	movs	r2, #7
 80031d0:	4393      	bics	r3, r2
 80031d2:	0019      	movs	r1, r3
 80031d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80031d6:	683a      	ldr	r2, [r7, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031dc:	f7fe fc78 	bl	8001ad0 <HAL_GetTick>
 80031e0:	0003      	movs	r3, r0
 80031e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031e4:	e009      	b.n	80031fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80031e6:	f7fe fc73 	bl	8001ad0 <HAL_GetTick>
 80031ea:	0002      	movs	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	4a65      	ldr	r2, [pc, #404]	@ (8003388 <HAL_RCC_ClockConfig+0x1e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e0c0      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031fa:	4b62      	ldr	r3, [pc, #392]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2207      	movs	r2, #7
 8003200:	4013      	ands	r3, r2
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d1ee      	bne.n	80031e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d017      	beq.n	8003242 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2204      	movs	r2, #4
 8003218:	4013      	ands	r3, r2
 800321a:	d008      	beq.n	800322e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800321c:	4b5b      	ldr	r3, [pc, #364]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a5b      	ldr	r2, [pc, #364]	@ (8003390 <HAL_RCC_ClockConfig+0x1e8>)
 8003222:	401a      	ands	r2, r3
 8003224:	4b59      	ldr	r3, [pc, #356]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003226:	21b0      	movs	r1, #176	@ 0xb0
 8003228:	0109      	lsls	r1, r1, #4
 800322a:	430a      	orrs	r2, r1
 800322c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322e:	4b57      	ldr	r3, [pc, #348]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	4a58      	ldr	r2, [pc, #352]	@ (8003394 <HAL_RCC_ClockConfig+0x1ec>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	4b53      	ldr	r3, [pc, #332]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 800323e:	430a      	orrs	r2, r1
 8003240:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2201      	movs	r2, #1
 8003248:	4013      	ands	r3, r2
 800324a:	d04b      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b4d      	ldr	r3, [pc, #308]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	2380      	movs	r3, #128	@ 0x80
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	4013      	ands	r3, r2
 800325e:	d11f      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e08b      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800326c:	4b47      	ldr	r3, [pc, #284]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4013      	ands	r3, r2
 8003276:	d113      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e07f      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d106      	bne.n	8003292 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003284:	4b41      	ldr	r3, [pc, #260]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003288:	2202      	movs	r2, #2
 800328a:	4013      	ands	r3, r2
 800328c:	d108      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e074      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003292:	4b3e      	ldr	r3, [pc, #248]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d101      	bne.n	80032a0 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e06d      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032a0:	4b3a      	ldr	r3, [pc, #232]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2207      	movs	r2, #7
 80032a6:	4393      	bics	r3, r2
 80032a8:	0019      	movs	r1, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	4b37      	ldr	r3, [pc, #220]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 80032b0:	430a      	orrs	r2, r1
 80032b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b4:	f7fe fc0c 	bl	8001ad0 <HAL_GetTick>
 80032b8:	0003      	movs	r3, r0
 80032ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032bc:	e009      	b.n	80032d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032be:	f7fe fc07 	bl	8001ad0 <HAL_GetTick>
 80032c2:	0002      	movs	r2, r0
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003388 <HAL_RCC_ClockConfig+0x1e0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e054      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	4b2e      	ldr	r3, [pc, #184]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	2238      	movs	r2, #56	@ 0x38
 80032d8:	401a      	ands	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d1ec      	bne.n	80032be <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e4:	4b27      	ldr	r3, [pc, #156]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2207      	movs	r2, #7
 80032ea:	4013      	ands	r3, r2
 80032ec:	683a      	ldr	r2, [r7, #0]
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d21e      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f2:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2207      	movs	r2, #7
 80032f8:	4393      	bics	r3, r2
 80032fa:	0019      	movs	r1, r3
 80032fc:	4b21      	ldr	r3, [pc, #132]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	430a      	orrs	r2, r1
 8003302:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003304:	f7fe fbe4 	bl	8001ad0 <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800330c:	e009      	b.n	8003322 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800330e:	f7fe fbdf 	bl	8001ad0 <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	4a1b      	ldr	r2, [pc, #108]	@ (8003388 <HAL_RCC_ClockConfig+0x1e0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e02c      	b.n	800337c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003322:	4b18      	ldr	r3, [pc, #96]	@ (8003384 <HAL_RCC_ClockConfig+0x1dc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2207      	movs	r2, #7
 8003328:	4013      	ands	r3, r2
 800332a:	683a      	ldr	r2, [r7, #0]
 800332c:	429a      	cmp	r2, r3
 800332e:	d1ee      	bne.n	800330e <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2204      	movs	r2, #4
 8003336:	4013      	ands	r3, r2
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	4a16      	ldr	r2, [pc, #88]	@ (8003398 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	4013      	ands	r3, r2
 8003342:	0019      	movs	r1, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 800334a:	430a      	orrs	r2, r1
 800334c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800334e:	f000 f82b 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003352:	0001      	movs	r1, r0
 8003354:	4b0d      	ldr	r3, [pc, #52]	@ (800338c <HAL_RCC_ClockConfig+0x1e4>)
 8003356:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003358:	0a1b      	lsrs	r3, r3, #8
 800335a:	220f      	movs	r2, #15
 800335c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800335e:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <HAL_RCC_ClockConfig+0x1f4>)
 8003360:	0092      	lsls	r2, r2, #2
 8003362:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003364:	221f      	movs	r2, #31
 8003366:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003368:	000a      	movs	r2, r1
 800336a:	40da      	lsrs	r2, r3
 800336c:	4b0c      	ldr	r3, [pc, #48]	@ (80033a0 <HAL_RCC_ClockConfig+0x1f8>)
 800336e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <HAL_RCC_ClockConfig+0x1fc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	0018      	movs	r0, r3
 8003376:	f7fe fb4f 	bl	8001a18 <HAL_InitTick>
 800337a:	0003      	movs	r3, r0
}
 800337c:	0018      	movs	r0, r3
 800337e:	46bd      	mov	sp, r7
 8003380:	b004      	add	sp, #16
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40022000 	.word	0x40022000
 8003388:	00001388 	.word	0x00001388
 800338c:	40021000 	.word	0x40021000
 8003390:	ffff84ff 	.word	0xffff84ff
 8003394:	fffff0ff 	.word	0xfffff0ff
 8003398:	ffff8fff 	.word	0xffff8fff
 800339c:	080053dc 	.word	0x080053dc
 80033a0:	20000000 	.word	0x20000000
 80033a4:	2000001c 	.word	0x2000001c

080033a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x78>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2238      	movs	r2, #56	@ 0x38
 80033b4:	4013      	ands	r3, r2
 80033b6:	d10f      	bne.n	80033d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80033b8:	4b19      	ldr	r3, [pc, #100]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x78>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	0adb      	lsrs	r3, r3, #11
 80033be:	2207      	movs	r2, #7
 80033c0:	4013      	ands	r3, r2
 80033c2:	2201      	movs	r2, #1
 80033c4:	409a      	lsls	r2, r3
 80033c6:	0013      	movs	r3, r2
 80033c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80033ca:	6839      	ldr	r1, [r7, #0]
 80033cc:	4815      	ldr	r0, [pc, #84]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033ce:	f7fc fea5 	bl	800011c <__udivsi3>
 80033d2:	0003      	movs	r3, r0
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	e01e      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80033d8:	4b11      	ldr	r3, [pc, #68]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x78>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	2238      	movs	r2, #56	@ 0x38
 80033de:	4013      	ands	r3, r2
 80033e0:	2b08      	cmp	r3, #8
 80033e2:	d102      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003424 <HAL_RCC_GetSysClockFreq+0x7c>)
 80033e6:	607b      	str	r3, [r7, #4]
 80033e8:	e015      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80033ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x78>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	2238      	movs	r2, #56	@ 0x38
 80033f0:	4013      	ands	r3, r2
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	d103      	bne.n	80033fe <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80033f6:	2380      	movs	r3, #128	@ 0x80
 80033f8:	021b      	lsls	r3, r3, #8
 80033fa:	607b      	str	r3, [r7, #4]
 80033fc:	e00b      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80033fe:	4b08      	ldr	r3, [pc, #32]	@ (8003420 <HAL_RCC_GetSysClockFreq+0x78>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2238      	movs	r2, #56	@ 0x38
 8003404:	4013      	ands	r3, r2
 8003406:	2b18      	cmp	r3, #24
 8003408:	d103      	bne.n	8003412 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800340a:	23fa      	movs	r3, #250	@ 0xfa
 800340c:	01db      	lsls	r3, r3, #7
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	e001      	b.n	8003416 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8003416:	687b      	ldr	r3, [r7, #4]
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000
 8003424:	02dc6c00 	.word	0x02dc6c00

08003428 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800342c:	f7ff ffbc 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003430:	0001      	movs	r1, r0
 8003432:	4b09      	ldr	r3, [pc, #36]	@ (8003458 <HAL_RCC_GetHCLKFreq+0x30>)
 8003434:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	220f      	movs	r2, #15
 800343a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <HAL_RCC_GetHCLKFreq+0x34>)
 800343e:	0092      	lsls	r2, r2, #2
 8003440:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003442:	221f      	movs	r2, #31
 8003444:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003446:	000a      	movs	r2, r1
 8003448:	40da      	lsrs	r2, r3
 800344a:	4b05      	ldr	r3, [pc, #20]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x38>)
 800344c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800344e:	4b04      	ldr	r3, [pc, #16]	@ (8003460 <HAL_RCC_GetHCLKFreq+0x38>)
 8003450:	681b      	ldr	r3, [r3, #0]
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40021000 	.word	0x40021000
 800345c:	080053dc 	.word	0x080053dc
 8003460:	20000000 	.word	0x20000000

08003464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003468:	f7ff ffde 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 800346c:	0001      	movs	r1, r0
 800346e:	4b07      	ldr	r3, [pc, #28]	@ (800348c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	0b1b      	lsrs	r3, r3, #12
 8003474:	2207      	movs	r2, #7
 8003476:	401a      	ands	r2, r3
 8003478:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800347a:	0092      	lsls	r2, r2, #2
 800347c:	58d3      	ldr	r3, [r2, r3]
 800347e:	221f      	movs	r2, #31
 8003480:	4013      	ands	r3, r2
 8003482:	40d9      	lsrs	r1, r3
 8003484:	000b      	movs	r3, r1
}
 8003486:	0018      	movs	r0, r3
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	0800541c 	.word	0x0800541c

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800349c:	2313      	movs	r3, #19
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a4:	2312      	movs	r3, #18
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2240      	movs	r2, #64	@ 0x40
 80034b2:	4013      	ands	r3, r2
 80034b4:	d100      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80034b6:	e079      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b8:	2011      	movs	r0, #17
 80034ba:	183b      	adds	r3, r7, r0
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c0:	4b63      	ldr	r3, [pc, #396]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c4:	2380      	movs	r3, #128	@ 0x80
 80034c6:	055b      	lsls	r3, r3, #21
 80034c8:	4013      	ands	r3, r2
 80034ca:	d110      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034cc:	4b60      	ldr	r3, [pc, #384]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034d0:	4b5f      	ldr	r3, [pc, #380]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034d2:	2180      	movs	r1, #128	@ 0x80
 80034d4:	0549      	lsls	r1, r1, #21
 80034d6:	430a      	orrs	r2, r1
 80034d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034da:	4b5d      	ldr	r3, [pc, #372]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034de:	2380      	movs	r3, #128	@ 0x80
 80034e0:	055b      	lsls	r3, r3, #21
 80034e2:	4013      	ands	r3, r2
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034e8:	183b      	adds	r3, r7, r0
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80034ee:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80034f2:	23c0      	movs	r3, #192	@ 0xc0
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4013      	ands	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d019      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	429a      	cmp	r2, r3
 8003508:	d014      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	4a51      	ldr	r2, [pc, #324]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003514:	4b4e      	ldr	r3, [pc, #312]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003516:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003518:	4b4d      	ldr	r3, [pc, #308]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800351a:	2180      	movs	r1, #128	@ 0x80
 800351c:	0249      	lsls	r1, r1, #9
 800351e:	430a      	orrs	r2, r1
 8003520:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003522:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003524:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003526:	4b4a      	ldr	r3, [pc, #296]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003528:	494b      	ldr	r1, [pc, #300]	@ (8003658 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800352a:	400a      	ands	r2, r1
 800352c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800352e:	4b48      	ldr	r3, [pc, #288]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2201      	movs	r2, #1
 8003538:	4013      	ands	r3, r2
 800353a:	d016      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353c:	f7fe fac8 	bl	8001ad0 <HAL_GetTick>
 8003540:	0003      	movs	r3, r0
 8003542:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003544:	e00c      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fac3 	bl	8001ad0 <HAL_GetTick>
 800354a:	0002      	movs	r2, r0
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	4a42      	ldr	r2, [pc, #264]	@ (800365c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d904      	bls.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8003556:	2313      	movs	r3, #19
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2203      	movs	r2, #3
 800355c:	701a      	strb	r2, [r3, #0]
          break;
 800355e:	e004      	b.n	800356a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003560:	4b3b      	ldr	r3, [pc, #236]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003562:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003564:	2202      	movs	r2, #2
 8003566:	4013      	ands	r3, r2
 8003568:	d0ed      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800356a:	2313      	movs	r3, #19
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10a      	bne.n	800358a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003574:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003578:	4a36      	ldr	r2, [pc, #216]	@ (8003654 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699a      	ldr	r2, [r3, #24]
 8003582:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003584:	430a      	orrs	r2, r1
 8003586:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003588:	e005      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358a:	2312      	movs	r3, #18
 800358c:	18fb      	adds	r3, r7, r3
 800358e:	2213      	movs	r2, #19
 8003590:	18ba      	adds	r2, r7, r2
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003596:	2311      	movs	r3, #17
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035a6:	492e      	ldr	r1, [pc, #184]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035a8:	400a      	ands	r2, r1
 80035aa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2201      	movs	r2, #1
 80035b2:	4013      	ands	r3, r2
 80035b4:	d009      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035b6:	4b26      	ldr	r3, [pc, #152]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	2203      	movs	r2, #3
 80035bc:	4393      	bics	r3, r2
 80035be:	0019      	movs	r1, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035c6:	430a      	orrs	r2, r1
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2202      	movs	r2, #2
 80035d0:	4013      	ands	r3, r2
 80035d2:	d009      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035d4:	4b1e      	ldr	r3, [pc, #120]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d8:	4a22      	ldr	r2, [pc, #136]	@ (8003664 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035da:	4013      	ands	r3, r2
 80035dc:	0019      	movs	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035e4:	430a      	orrs	r2, r1
 80035e6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2220      	movs	r2, #32
 80035ee:	4013      	ands	r3, r2
 80035f0:	d008      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035f2:	4b17      	ldr	r3, [pc, #92]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80035f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	0899      	lsrs	r1, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	4b14      	ldr	r3, [pc, #80]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003600:	430a      	orrs	r2, r1
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2204      	movs	r2, #4
 800360a:	4013      	ands	r3, r2
 800360c:	d009      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800360e:	4b10      	ldr	r3, [pc, #64]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003612:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003614:	4013      	ands	r3, r2
 8003616:	0019      	movs	r1, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800361e:	430a      	orrs	r2, r1
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2280      	movs	r2, #128	@ 0x80
 8003628:	4013      	ands	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800362c:	4b08      	ldr	r3, [pc, #32]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	22e0      	movs	r2, #224	@ 0xe0
 8003632:	4393      	bics	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800363c:	430a      	orrs	r2, r1
 800363e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003640:	2312      	movs	r3, #18
 8003642:	18fb      	adds	r3, r7, r3
 8003644:	781b      	ldrb	r3, [r3, #0]
}
 8003646:	0018      	movs	r0, r3
 8003648:	46bd      	mov	sp, r7
 800364a:	b006      	add	sp, #24
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)
 8003650:	40021000 	.word	0x40021000
 8003654:	fffffcff 	.word	0xfffffcff
 8003658:	fffeffff 	.word	0xfffeffff
 800365c:	00001388 	.word	0x00001388
 8003660:	efffffff 	.word	0xefffffff
 8003664:	ffffcfff 	.word	0xffffcfff
 8003668:	ffff3fff 	.word	0xffff3fff

0800366c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e046      	b.n	800370c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2288      	movs	r2, #136	@ 0x88
 8003682:	589b      	ldr	r3, [r3, r2]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d107      	bne.n	8003698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2284      	movs	r2, #132	@ 0x84
 800368c:	2100      	movs	r1, #0
 800368e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	0018      	movs	r0, r3
 8003694:	f7fd f926 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2288      	movs	r2, #136	@ 0x88
 800369c:	2124      	movs	r1, #36	@ 0x24
 800369e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2101      	movs	r1, #1
 80036ac:	438a      	bics	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	0018      	movs	r0, r3
 80036bc:	f000 fa4e 	bl	8003b5c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 f8cc 	bl	8003860 <UART_SetConfig>
 80036c8:	0003      	movs	r3, r0
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e01c      	b.n	800370c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	490d      	ldr	r1, [pc, #52]	@ (8003714 <HAL_UART_Init+0xa8>)
 80036de:	400a      	ands	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	212a      	movs	r1, #42	@ 0x2a
 80036ee:	438a      	bics	r2, r1
 80036f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681a      	ldr	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2101      	movs	r1, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	0018      	movs	r0, r3
 8003706:	f000 fadd 	bl	8003cc4 <UART_CheckIdleState>
 800370a:	0003      	movs	r3, r0
}
 800370c:	0018      	movs	r0, r3
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}
 8003714:	ffffb7ff 	.word	0xffffb7ff

08003718 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	@ 0x28
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	1dbb      	adds	r3, r7, #6
 8003726:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2288      	movs	r2, #136	@ 0x88
 800372c:	589b      	ldr	r3, [r3, r2]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d000      	beq.n	8003734 <HAL_UART_Transmit+0x1c>
 8003732:	e090      	b.n	8003856 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_UART_Transmit+0x2a>
 800373a:	1dbb      	adds	r3, r7, #6
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e088      	b.n	8003858 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	2380      	movs	r3, #128	@ 0x80
 800374c:	015b      	lsls	r3, r3, #5
 800374e:	429a      	cmp	r2, r3
 8003750:	d109      	bne.n	8003766 <HAL_UART_Transmit+0x4e>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	d001      	beq.n	8003766 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e078      	b.n	8003858 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2290      	movs	r2, #144	@ 0x90
 800376a:	2100      	movs	r1, #0
 800376c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2288      	movs	r2, #136	@ 0x88
 8003772:	2121      	movs	r1, #33	@ 0x21
 8003774:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003776:	f7fe f9ab 	bl	8001ad0 <HAL_GetTick>
 800377a:	0003      	movs	r3, r0
 800377c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1dba      	adds	r2, r7, #6
 8003782:	2154      	movs	r1, #84	@ 0x54
 8003784:	8812      	ldrh	r2, [r2, #0]
 8003786:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	1dba      	adds	r2, r7, #6
 800378c:	2156      	movs	r1, #86	@ 0x56
 800378e:	8812      	ldrh	r2, [r2, #0]
 8003790:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	2380      	movs	r3, #128	@ 0x80
 8003798:	015b      	lsls	r3, r3, #5
 800379a:	429a      	cmp	r2, r3
 800379c:	d108      	bne.n	80037b0 <HAL_UART_Transmit+0x98>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d104      	bne.n	80037b0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	e003      	b.n	80037b8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037b4:	2300      	movs	r3, #0
 80037b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037b8:	e030      	b.n	800381c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	0013      	movs	r3, r2
 80037c4:	2200      	movs	r2, #0
 80037c6:	2180      	movs	r1, #128	@ 0x80
 80037c8:	f000 fb26 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 80037cc:	1e03      	subs	r3, r0, #0
 80037ce:	d005      	beq.n	80037dc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2288      	movs	r2, #136	@ 0x88
 80037d4:	2120      	movs	r1, #32
 80037d6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e03d      	b.n	8003858 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10b      	bne.n	80037fa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	001a      	movs	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	05d2      	lsls	r2, r2, #23
 80037ee:	0dd2      	lsrs	r2, r2, #23
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	3302      	adds	r3, #2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e007      	b.n	800380a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	781a      	ldrb	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	3301      	adds	r3, #1
 8003808:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2256      	movs	r2, #86	@ 0x56
 800380e:	5a9b      	ldrh	r3, [r3, r2]
 8003810:	b29b      	uxth	r3, r3
 8003812:	3b01      	subs	r3, #1
 8003814:	b299      	uxth	r1, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2256      	movs	r2, #86	@ 0x56
 800381a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2256      	movs	r2, #86	@ 0x56
 8003820:	5a9b      	ldrh	r3, [r3, r2]
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1c8      	bne.n	80037ba <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	0013      	movs	r3, r2
 8003832:	2200      	movs	r2, #0
 8003834:	2140      	movs	r1, #64	@ 0x40
 8003836:	f000 faef 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 800383a:	1e03      	subs	r3, r0, #0
 800383c:	d005      	beq.n	800384a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2288      	movs	r2, #136	@ 0x88
 8003842:	2120      	movs	r1, #32
 8003844:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e006      	b.n	8003858 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2288      	movs	r2, #136	@ 0x88
 800384e:	2120      	movs	r1, #32
 8003850:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	0018      	movs	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	b008      	add	sp, #32
 800385e:	bd80      	pop	{r7, pc}

08003860 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003868:	231e      	movs	r3, #30
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2200      	movs	r2, #0
 800386e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	431a      	orrs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	431a      	orrs	r2, r3
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4aab      	ldr	r2, [pc, #684]	@ (8003b3c <UART_SetConfig+0x2dc>)
 8003890:	4013      	ands	r3, r2
 8003892:	0019      	movs	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	430a      	orrs	r2, r1
 800389c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4aa6      	ldr	r2, [pc, #664]	@ (8003b40 <UART_SetConfig+0x2e0>)
 80038a6:	4013      	ands	r3, r2
 80038a8:	0019      	movs	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a9d      	ldr	r2, [pc, #628]	@ (8003b44 <UART_SetConfig+0x2e4>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	0019      	movs	r1, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	430a      	orrs	r2, r1
 80038da:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e2:	220f      	movs	r2, #15
 80038e4:	4393      	bics	r3, r2
 80038e6:	0019      	movs	r1, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a93      	ldr	r2, [pc, #588]	@ (8003b48 <UART_SetConfig+0x2e8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d127      	bne.n	800394e <UART_SetConfig+0xee>
 80038fe:	4b93      	ldr	r3, [pc, #588]	@ (8003b4c <UART_SetConfig+0x2ec>)
 8003900:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003902:	2203      	movs	r2, #3
 8003904:	4013      	ands	r3, r2
 8003906:	2b03      	cmp	r3, #3
 8003908:	d017      	beq.n	800393a <UART_SetConfig+0xda>
 800390a:	d81b      	bhi.n	8003944 <UART_SetConfig+0xe4>
 800390c:	2b02      	cmp	r3, #2
 800390e:	d00a      	beq.n	8003926 <UART_SetConfig+0xc6>
 8003910:	d818      	bhi.n	8003944 <UART_SetConfig+0xe4>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <UART_SetConfig+0xbc>
 8003916:	2b01      	cmp	r3, #1
 8003918:	d00a      	beq.n	8003930 <UART_SetConfig+0xd0>
 800391a:	e013      	b.n	8003944 <UART_SetConfig+0xe4>
 800391c:	231f      	movs	r3, #31
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
 8003924:	e021      	b.n	800396a <UART_SetConfig+0x10a>
 8003926:	231f      	movs	r3, #31
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2202      	movs	r2, #2
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e01c      	b.n	800396a <UART_SetConfig+0x10a>
 8003930:	231f      	movs	r3, #31
 8003932:	18fb      	adds	r3, r7, r3
 8003934:	2204      	movs	r2, #4
 8003936:	701a      	strb	r2, [r3, #0]
 8003938:	e017      	b.n	800396a <UART_SetConfig+0x10a>
 800393a:	231f      	movs	r3, #31
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	2208      	movs	r2, #8
 8003940:	701a      	strb	r2, [r3, #0]
 8003942:	e012      	b.n	800396a <UART_SetConfig+0x10a>
 8003944:	231f      	movs	r3, #31
 8003946:	18fb      	adds	r3, r7, r3
 8003948:	2210      	movs	r2, #16
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e00d      	b.n	800396a <UART_SetConfig+0x10a>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a7f      	ldr	r2, [pc, #508]	@ (8003b50 <UART_SetConfig+0x2f0>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d104      	bne.n	8003962 <UART_SetConfig+0x102>
 8003958:	231f      	movs	r3, #31
 800395a:	18fb      	adds	r3, r7, r3
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
 8003960:	e003      	b.n	800396a <UART_SetConfig+0x10a>
 8003962:	231f      	movs	r3, #31
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	2210      	movs	r2, #16
 8003968:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	021b      	lsls	r3, r3, #8
 8003972:	429a      	cmp	r2, r3
 8003974:	d000      	beq.n	8003978 <UART_SetConfig+0x118>
 8003976:	e06f      	b.n	8003a58 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003978:	231f      	movs	r3, #31
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b08      	cmp	r3, #8
 8003980:	d01f      	beq.n	80039c2 <UART_SetConfig+0x162>
 8003982:	dc22      	bgt.n	80039ca <UART_SetConfig+0x16a>
 8003984:	2b04      	cmp	r3, #4
 8003986:	d017      	beq.n	80039b8 <UART_SetConfig+0x158>
 8003988:	dc1f      	bgt.n	80039ca <UART_SetConfig+0x16a>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <UART_SetConfig+0x134>
 800398e:	2b02      	cmp	r3, #2
 8003990:	d005      	beq.n	800399e <UART_SetConfig+0x13e>
 8003992:	e01a      	b.n	80039ca <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003994:	f7ff fd66 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8003998:	0003      	movs	r3, r0
 800399a:	61bb      	str	r3, [r7, #24]
        break;
 800399c:	e01c      	b.n	80039d8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800399e:	4b6b      	ldr	r3, [pc, #428]	@ (8003b4c <UART_SetConfig+0x2ec>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2207      	movs	r2, #7
 80039a6:	4013      	ands	r3, r2
 80039a8:	3301      	adds	r3, #1
 80039aa:	0019      	movs	r1, r3
 80039ac:	4869      	ldr	r0, [pc, #420]	@ (8003b54 <UART_SetConfig+0x2f4>)
 80039ae:	f7fc fbb5 	bl	800011c <__udivsi3>
 80039b2:	0003      	movs	r3, r0
 80039b4:	61bb      	str	r3, [r7, #24]
        break;
 80039b6:	e00f      	b.n	80039d8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b8:	f7ff fcf6 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 80039bc:	0003      	movs	r3, r0
 80039be:	61bb      	str	r3, [r7, #24]
        break;
 80039c0:	e00a      	b.n	80039d8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	021b      	lsls	r3, r3, #8
 80039c6:	61bb      	str	r3, [r7, #24]
        break;
 80039c8:	e006      	b.n	80039d8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80039ce:	231e      	movs	r3, #30
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
        break;
 80039d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d100      	bne.n	80039e0 <UART_SetConfig+0x180>
 80039de:	e097      	b.n	8003b10 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003b58 <UART_SetConfig+0x2f8>)
 80039e6:	0052      	lsls	r2, r2, #1
 80039e8:	5ad3      	ldrh	r3, [r2, r3]
 80039ea:	0019      	movs	r1, r3
 80039ec:	69b8      	ldr	r0, [r7, #24]
 80039ee:	f7fc fb95 	bl	800011c <__udivsi3>
 80039f2:	0003      	movs	r3, r0
 80039f4:	005a      	lsls	r2, r3, #1
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	18d2      	adds	r2, r2, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	0019      	movs	r1, r3
 8003a04:	0010      	movs	r0, r2
 8003a06:	f7fc fb89 	bl	800011c <__udivsi3>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d91c      	bls.n	8003a4e <UART_SetConfig+0x1ee>
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	2380      	movs	r3, #128	@ 0x80
 8003a18:	025b      	lsls	r3, r3, #9
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d217      	bcs.n	8003a4e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	b29a      	uxth	r2, r3
 8003a22:	200e      	movs	r0, #14
 8003a24:	183b      	adds	r3, r7, r0
 8003a26:	210f      	movs	r1, #15
 8003a28:	438a      	bics	r2, r1
 8003a2a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	085b      	lsrs	r3, r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	2207      	movs	r2, #7
 8003a34:	4013      	ands	r3, r2
 8003a36:	b299      	uxth	r1, r3
 8003a38:	183b      	adds	r3, r7, r0
 8003a3a:	183a      	adds	r2, r7, r0
 8003a3c:	8812      	ldrh	r2, [r2, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	183a      	adds	r2, r7, r0
 8003a48:	8812      	ldrh	r2, [r2, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e060      	b.n	8003b10 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4e:	231e      	movs	r3, #30
 8003a50:	18fb      	adds	r3, r7, r3
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e05b      	b.n	8003b10 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a58:	231f      	movs	r3, #31
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d01f      	beq.n	8003aa2 <UART_SetConfig+0x242>
 8003a62:	dc22      	bgt.n	8003aaa <UART_SetConfig+0x24a>
 8003a64:	2b04      	cmp	r3, #4
 8003a66:	d017      	beq.n	8003a98 <UART_SetConfig+0x238>
 8003a68:	dc1f      	bgt.n	8003aaa <UART_SetConfig+0x24a>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <UART_SetConfig+0x214>
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d005      	beq.n	8003a7e <UART_SetConfig+0x21e>
 8003a72:	e01a      	b.n	8003aaa <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a74:	f7ff fcf6 	bl	8003464 <HAL_RCC_GetPCLK1Freq>
 8003a78:	0003      	movs	r3, r0
 8003a7a:	61bb      	str	r3, [r7, #24]
        break;
 8003a7c:	e01c      	b.n	8003ab8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003a7e:	4b33      	ldr	r3, [pc, #204]	@ (8003b4c <UART_SetConfig+0x2ec>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	095b      	lsrs	r3, r3, #5
 8003a84:	2207      	movs	r2, #7
 8003a86:	4013      	ands	r3, r2
 8003a88:	3301      	adds	r3, #1
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	4831      	ldr	r0, [pc, #196]	@ (8003b54 <UART_SetConfig+0x2f4>)
 8003a8e:	f7fc fb45 	bl	800011c <__udivsi3>
 8003a92:	0003      	movs	r3, r0
 8003a94:	61bb      	str	r3, [r7, #24]
        break;
 8003a96:	e00f      	b.n	8003ab8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a98:	f7ff fc86 	bl	80033a8 <HAL_RCC_GetSysClockFreq>
 8003a9c:	0003      	movs	r3, r0
 8003a9e:	61bb      	str	r3, [r7, #24]
        break;
 8003aa0:	e00a      	b.n	8003ab8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa2:	2380      	movs	r3, #128	@ 0x80
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	61bb      	str	r3, [r7, #24]
        break;
 8003aa8:	e006      	b.n	8003ab8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003aae:	231e      	movs	r3, #30
 8003ab0:	18fb      	adds	r3, r7, r3
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
        break;
 8003ab6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ac2:	4b25      	ldr	r3, [pc, #148]	@ (8003b58 <UART_SetConfig+0x2f8>)
 8003ac4:	0052      	lsls	r2, r2, #1
 8003ac6:	5ad3      	ldrh	r3, [r2, r3]
 8003ac8:	0019      	movs	r1, r3
 8003aca:	69b8      	ldr	r0, [r7, #24]
 8003acc:	f7fc fb26 	bl	800011c <__udivsi3>
 8003ad0:	0003      	movs	r3, r0
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	085b      	lsrs	r3, r3, #1
 8003ada:	18d2      	adds	r2, r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	0010      	movs	r0, r2
 8003ae4:	f7fc fb1a 	bl	800011c <__udivsi3>
 8003ae8:	0003      	movs	r3, r0
 8003aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d90a      	bls.n	8003b08 <UART_SetConfig+0x2a8>
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	2380      	movs	r3, #128	@ 0x80
 8003af6:	025b      	lsls	r3, r3, #9
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d205      	bcs.n	8003b08 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	e003      	b.n	8003b10 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b08:	231e      	movs	r3, #30
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	226a      	movs	r2, #106	@ 0x6a
 8003b14:	2101      	movs	r1, #1
 8003b16:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2268      	movs	r2, #104	@ 0x68
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003b2c:	231e      	movs	r3, #30
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
}
 8003b32:	0018      	movs	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	b008      	add	sp, #32
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	cfff69f3 	.word	0xcfff69f3
 8003b40:	ffffcfff 	.word	0xffffcfff
 8003b44:	11fff4ff 	.word	0x11fff4ff
 8003b48:	40013800 	.word	0x40013800
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	40004400 	.word	0x40004400
 8003b54:	02dc6c00 	.word	0x02dc6c00
 8003b58:	0800544c 	.word	0x0800544c

08003b5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b68:	2208      	movs	r2, #8
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d00b      	beq.n	8003b86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a4a      	ldr	r2, [pc, #296]	@ (8003ca0 <UART_AdvFeatureConfig+0x144>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d00b      	beq.n	8003ba8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4a43      	ldr	r2, [pc, #268]	@ (8003ca4 <UART_AdvFeatureConfig+0x148>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	0019      	movs	r1, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bac:	2202      	movs	r2, #2
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ca8 <UART_AdvFeatureConfig+0x14c>)
 8003bba:	4013      	ands	r3, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	2204      	movs	r2, #4
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d00b      	beq.n	8003bec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	4a34      	ldr	r2, [pc, #208]	@ (8003cac <UART_AdvFeatureConfig+0x150>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	0019      	movs	r1, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	430a      	orrs	r2, r1
 8003bea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	d00b      	beq.n	8003c0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8003cb0 <UART_AdvFeatureConfig+0x154>)
 8003bfe:	4013      	ands	r3, r2
 8003c00:	0019      	movs	r1, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c12:	2220      	movs	r2, #32
 8003c14:	4013      	ands	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4a25      	ldr	r2, [pc, #148]	@ (8003cb4 <UART_AdvFeatureConfig+0x158>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	0019      	movs	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c34:	2240      	movs	r2, #64	@ 0x40
 8003c36:	4013      	ands	r3, r2
 8003c38:	d01d      	beq.n	8003c76 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb8 <UART_AdvFeatureConfig+0x15c>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	0019      	movs	r1, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	035b      	lsls	r3, r3, #13
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d10b      	bne.n	8003c76 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	4a15      	ldr	r2, [pc, #84]	@ (8003cbc <UART_AdvFeatureConfig+0x160>)
 8003c66:	4013      	ands	r3, r2
 8003c68:	0019      	movs	r1, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c7a:	2280      	movs	r2, #128	@ 0x80
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d00b      	beq.n	8003c98 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a0e      	ldr	r2, [pc, #56]	@ (8003cc0 <UART_AdvFeatureConfig+0x164>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	0019      	movs	r1, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }
}
 8003c98:	46c0      	nop			@ (mov r8, r8)
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	b002      	add	sp, #8
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	ffff7fff 	.word	0xffff7fff
 8003ca4:	fffdffff 	.word	0xfffdffff
 8003ca8:	fffeffff 	.word	0xfffeffff
 8003cac:	fffbffff 	.word	0xfffbffff
 8003cb0:	ffffefff 	.word	0xffffefff
 8003cb4:	ffffdfff 	.word	0xffffdfff
 8003cb8:	ffefffff 	.word	0xffefffff
 8003cbc:	ff9fffff 	.word	0xff9fffff
 8003cc0:	fff7ffff 	.word	0xfff7ffff

08003cc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b092      	sub	sp, #72	@ 0x48
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2290      	movs	r2, #144	@ 0x90
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd4:	f7fd fefc 	bl	8001ad0 <HAL_GetTick>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2208      	movs	r2, #8
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d12d      	bne.n	8003d46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cec:	2280      	movs	r2, #128	@ 0x80
 8003cee:	0391      	lsls	r1, r2, #14
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	4a47      	ldr	r2, [pc, #284]	@ (8003e10 <UART_CheckIdleState+0x14c>)
 8003cf4:	9200      	str	r2, [sp, #0]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f000 f88e 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d022      	beq.n	8003d46 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d00:	f3ef 8310 	mrs	r3, PRIMASK
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003d08:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			@ (mov r8, r8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2180      	movs	r1, #128	@ 0x80
 8003d22:	438a      	bics	r2, r1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	f383 8810 	msr	PRIMASK, r3
}
 8003d30:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2288      	movs	r2, #136	@ 0x88
 8003d36:	2120      	movs	r1, #32
 8003d38:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2284      	movs	r2, #132	@ 0x84
 8003d3e:	2100      	movs	r1, #0
 8003d40:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e060      	b.n	8003e08 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	4013      	ands	r3, r2
 8003d50:	2b04      	cmp	r3, #4
 8003d52:	d146      	bne.n	8003de2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d56:	2280      	movs	r2, #128	@ 0x80
 8003d58:	03d1      	lsls	r1, r2, #15
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8003e10 <UART_CheckIdleState+0x14c>)
 8003d5e:	9200      	str	r2, [sp, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f000 f859 	bl	8003e18 <UART_WaitOnFlagUntilTimeout>
 8003d66:	1e03      	subs	r3, r0, #0
 8003d68:	d03b      	beq.n	8003de2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d6e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d70:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d72:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d74:	2301      	movs	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f383 8810 	msr	PRIMASK, r3
}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4922      	ldr	r1, [pc, #136]	@ (8003e14 <UART_CheckIdleState+0x150>)
 8003d8c:	400a      	ands	r2, r1
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003da0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003da2:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da6:	2301      	movs	r3, #1
 8003da8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			@ (mov r8, r8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2101      	movs	r1, #1
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	6a3b      	ldr	r3, [r7, #32]
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	228c      	movs	r2, #140	@ 0x8c
 8003dd2:	2120      	movs	r1, #32
 8003dd4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2284      	movs	r2, #132	@ 0x84
 8003dda:	2100      	movs	r1, #0
 8003ddc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e012      	b.n	8003e08 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2288      	movs	r2, #136	@ 0x88
 8003de6:	2120      	movs	r1, #32
 8003de8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	228c      	movs	r2, #140	@ 0x8c
 8003dee:	2120      	movs	r1, #32
 8003df0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2284      	movs	r2, #132	@ 0x84
 8003e02:	2100      	movs	r1, #0
 8003e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	0018      	movs	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	b010      	add	sp, #64	@ 0x40
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	01ffffff 	.word	0x01ffffff
 8003e14:	fffffedf 	.word	0xfffffedf

08003e18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	603b      	str	r3, [r7, #0]
 8003e24:	1dfb      	adds	r3, r7, #7
 8003e26:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e28:	e051      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	d04e      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fd fe4e 	bl	8001ad0 <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e051      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	2204      	movs	r2, #4
 8003e52:	4013      	ands	r3, r2
 8003e54:	d03b      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b80      	cmp	r3, #128	@ 0x80
 8003e5a:	d038      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b40      	cmp	r3, #64	@ 0x40
 8003e60:	d035      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	69db      	ldr	r3, [r3, #28]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b08      	cmp	r3, #8
 8003e6e:	d111      	bne.n	8003e94 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2208      	movs	r2, #8
 8003e76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	f000 f83c 	bl	8003ef8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2290      	movs	r2, #144	@ 0x90
 8003e84:	2108      	movs	r1, #8
 8003e86:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2284      	movs	r2, #132	@ 0x84
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e02c      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	69da      	ldr	r2, [r3, #28]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d112      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2280      	movs	r2, #128	@ 0x80
 8003eae:	0112      	lsls	r2, r2, #4
 8003eb0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	f000 f81f 	bl	8003ef8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2290      	movs	r2, #144	@ 0x90
 8003ebe:	2120      	movs	r1, #32
 8003ec0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2284      	movs	r2, #132	@ 0x84
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	425a      	negs	r2, r3
 8003ede:	4153      	adcs	r3, r2
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	001a      	movs	r2, r3
 8003ee4:	1dfb      	adds	r3, r7, #7
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d09e      	beq.n	8003e2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	0018      	movs	r0, r3
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	b004      	add	sp, #16
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	@ 0x38
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f00:	f3ef 8310 	mrs	r3, PRIMASK
 8003f04:	617b      	str	r3, [r7, #20]
  return(result);
 8003f06:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f08:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f383 8810 	msr	PRIMASK, r3
}
 8003f14:	46c0      	nop			@ (mov r8, r8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4926      	ldr	r1, [pc, #152]	@ (8003fbc <UART_EndRxTransfer+0xc4>)
 8003f22:	400a      	ands	r2, r1
 8003f24:	601a      	str	r2, [r3, #0]
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	f383 8810 	msr	PRIMASK, r3
}
 8003f30:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f32:	f3ef 8310 	mrs	r3, PRIMASK
 8003f36:	623b      	str	r3, [r7, #32]
  return(result);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			@ (mov r8, r8)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	491b      	ldr	r1, [pc, #108]	@ (8003fc0 <UART_EndRxTransfer+0xc8>)
 8003f54:	400a      	ands	r2, r1
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	f383 8810 	msr	PRIMASK, r3
}
 8003f62:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d118      	bne.n	8003f9e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f72:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f76:	2301      	movs	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			@ (mov r8, r8)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2110      	movs	r1, #16
 8003f8e:	438a      	bics	r2, r1
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	228c      	movs	r2, #140	@ 0x8c
 8003fa2:	2120      	movs	r1, #32
 8003fa4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fb2:	46c0      	nop			@ (mov r8, r8)
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	b00e      	add	sp, #56	@ 0x38
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	46c0      	nop			@ (mov r8, r8)
 8003fbc:	fffffedf 	.word	0xfffffedf
 8003fc0:	effffffe 	.word	0xeffffffe

08003fc4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2284      	movs	r2, #132	@ 0x84
 8003fd0:	5c9b      	ldrb	r3, [r3, r2]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UARTEx_DisableFifoMode+0x16>
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e027      	b.n	800402a <HAL_UARTEx_DisableFifoMode+0x66>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2284      	movs	r2, #132	@ 0x84
 8003fde:	2101      	movs	r1, #1
 8003fe0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2288      	movs	r2, #136	@ 0x88
 8003fe6:	2124      	movs	r1, #36	@ 0x24
 8003fe8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	438a      	bics	r2, r1
 8004000:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	4a0b      	ldr	r2, [pc, #44]	@ (8004034 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004006:	4013      	ands	r3, r2
 8004008:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2288      	movs	r2, #136	@ 0x88
 800401c:	2120      	movs	r1, #32
 800401e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2284      	movs	r2, #132	@ 0x84
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	0018      	movs	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	dfffffff 	.word	0xdfffffff

08004038 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2284      	movs	r2, #132	@ 0x84
 8004046:	5c9b      	ldrb	r3, [r3, r2]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800404c:	2302      	movs	r3, #2
 800404e:	e02e      	b.n	80040ae <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2284      	movs	r2, #132	@ 0x84
 8004054:	2101      	movs	r1, #1
 8004056:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2288      	movs	r2, #136	@ 0x88
 800405c:	2124      	movs	r1, #36	@ 0x24
 800405e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2101      	movs	r1, #1
 8004074:	438a      	bics	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	08d9      	lsrs	r1, r3, #3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	683a      	ldr	r2, [r7, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	0018      	movs	r0, r3
 8004090:	f000 f854 	bl	800413c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2288      	movs	r2, #136	@ 0x88
 80040a0:	2120      	movs	r1, #32
 80040a2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2284      	movs	r2, #132	@ 0x84
 80040a8:	2100      	movs	r1, #0
 80040aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	b004      	add	sp, #16
 80040b4:	bd80      	pop	{r7, pc}
	...

080040b8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2284      	movs	r2, #132	@ 0x84
 80040c6:	5c9b      	ldrb	r3, [r3, r2]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e02f      	b.n	8004130 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2284      	movs	r2, #132	@ 0x84
 80040d4:	2101      	movs	r1, #1
 80040d6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2288      	movs	r2, #136	@ 0x88
 80040dc:	2124      	movs	r1, #36	@ 0x24
 80040de:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2101      	movs	r1, #1
 80040f4:	438a      	bics	r2, r1
 80040f6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	4a0e      	ldr	r2, [pc, #56]	@ (8004138 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004100:	4013      	ands	r3, r2
 8004102:	0019      	movs	r1, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f813 	bl	800413c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2288      	movs	r2, #136	@ 0x88
 8004122:	2120      	movs	r1, #32
 8004124:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2284      	movs	r2, #132	@ 0x84
 800412a:	2100      	movs	r1, #0
 800412c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	0018      	movs	r0, r3
 8004132:	46bd      	mov	sp, r7
 8004134:	b004      	add	sp, #16
 8004136:	bd80      	pop	{r7, pc}
 8004138:	f1ffffff 	.word	0xf1ffffff

0800413c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800413c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004148:	2b00      	cmp	r3, #0
 800414a:	d108      	bne.n	800415e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	226a      	movs	r2, #106	@ 0x6a
 8004150:	2101      	movs	r1, #1
 8004152:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2268      	movs	r2, #104	@ 0x68
 8004158:	2101      	movs	r1, #1
 800415a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800415c:	e043      	b.n	80041e6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800415e:	260f      	movs	r6, #15
 8004160:	19bb      	adds	r3, r7, r6
 8004162:	2208      	movs	r2, #8
 8004164:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004166:	200e      	movs	r0, #14
 8004168:	183b      	adds	r3, r7, r0
 800416a:	2208      	movs	r2, #8
 800416c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	0e5b      	lsrs	r3, r3, #25
 8004176:	b2da      	uxtb	r2, r3
 8004178:	240d      	movs	r4, #13
 800417a:	193b      	adds	r3, r7, r4
 800417c:	2107      	movs	r1, #7
 800417e:	400a      	ands	r2, r1
 8004180:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	0f5b      	lsrs	r3, r3, #29
 800418a:	b2da      	uxtb	r2, r3
 800418c:	250c      	movs	r5, #12
 800418e:	197b      	adds	r3, r7, r5
 8004190:	2107      	movs	r1, #7
 8004192:	400a      	ands	r2, r1
 8004194:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004196:	183b      	adds	r3, r7, r0
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	197a      	adds	r2, r7, r5
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	4914      	ldr	r1, [pc, #80]	@ (80041f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80041a0:	5c8a      	ldrb	r2, [r1, r2]
 80041a2:	435a      	muls	r2, r3
 80041a4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80041a6:	197b      	adds	r3, r7, r5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	4a12      	ldr	r2, [pc, #72]	@ (80041f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80041ac:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80041ae:	0019      	movs	r1, r3
 80041b0:	f7fc f83e 	bl	8000230 <__divsi3>
 80041b4:	0003      	movs	r3, r0
 80041b6:	b299      	uxth	r1, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	226a      	movs	r2, #106	@ 0x6a
 80041bc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041be:	19bb      	adds	r3, r7, r6
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	193a      	adds	r2, r7, r4
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	490a      	ldr	r1, [pc, #40]	@ (80041f0 <UARTEx_SetNbDataToProcess+0xb4>)
 80041c8:	5c8a      	ldrb	r2, [r1, r2]
 80041ca:	435a      	muls	r2, r3
 80041cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	4a08      	ldr	r2, [pc, #32]	@ (80041f4 <UARTEx_SetNbDataToProcess+0xb8>)
 80041d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80041d6:	0019      	movs	r1, r3
 80041d8:	f7fc f82a 	bl	8000230 <__divsi3>
 80041dc:	0003      	movs	r3, r0
 80041de:	b299      	uxth	r1, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2268      	movs	r2, #104	@ 0x68
 80041e4:	5299      	strh	r1, [r3, r2]
}
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b005      	add	sp, #20
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ee:	46c0      	nop			@ (mov r8, r8)
 80041f0:	08005464 	.word	0x08005464
 80041f4:	0800546c 	.word	0x0800546c

080041f8 <std>:
 80041f8:	2300      	movs	r3, #0
 80041fa:	b510      	push	{r4, lr}
 80041fc:	0004      	movs	r4, r0
 80041fe:	6003      	str	r3, [r0, #0]
 8004200:	6043      	str	r3, [r0, #4]
 8004202:	6083      	str	r3, [r0, #8]
 8004204:	8181      	strh	r1, [r0, #12]
 8004206:	6643      	str	r3, [r0, #100]	@ 0x64
 8004208:	81c2      	strh	r2, [r0, #14]
 800420a:	6103      	str	r3, [r0, #16]
 800420c:	6143      	str	r3, [r0, #20]
 800420e:	6183      	str	r3, [r0, #24]
 8004210:	0019      	movs	r1, r3
 8004212:	2208      	movs	r2, #8
 8004214:	305c      	adds	r0, #92	@ 0x5c
 8004216:	f000 fa0f 	bl	8004638 <memset>
 800421a:	4b0b      	ldr	r3, [pc, #44]	@ (8004248 <std+0x50>)
 800421c:	6224      	str	r4, [r4, #32]
 800421e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004220:	4b0a      	ldr	r3, [pc, #40]	@ (800424c <std+0x54>)
 8004222:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004224:	4b0a      	ldr	r3, [pc, #40]	@ (8004250 <std+0x58>)
 8004226:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <std+0x5c>)
 800422a:	6323      	str	r3, [r4, #48]	@ 0x30
 800422c:	4b0a      	ldr	r3, [pc, #40]	@ (8004258 <std+0x60>)
 800422e:	429c      	cmp	r4, r3
 8004230:	d005      	beq.n	800423e <std+0x46>
 8004232:	4b0a      	ldr	r3, [pc, #40]	@ (800425c <std+0x64>)
 8004234:	429c      	cmp	r4, r3
 8004236:	d002      	beq.n	800423e <std+0x46>
 8004238:	4b09      	ldr	r3, [pc, #36]	@ (8004260 <std+0x68>)
 800423a:	429c      	cmp	r4, r3
 800423c:	d103      	bne.n	8004246 <std+0x4e>
 800423e:	0020      	movs	r0, r4
 8004240:	3058      	adds	r0, #88	@ 0x58
 8004242:	f000 fa79 	bl	8004738 <__retarget_lock_init_recursive>
 8004246:	bd10      	pop	{r4, pc}
 8004248:	08004461 	.word	0x08004461
 800424c:	08004489 	.word	0x08004489
 8004250:	080044c1 	.word	0x080044c1
 8004254:	080044ed 	.word	0x080044ed
 8004258:	2000036c 	.word	0x2000036c
 800425c:	200003d4 	.word	0x200003d4
 8004260:	2000043c 	.word	0x2000043c

08004264 <stdio_exit_handler>:
 8004264:	b510      	push	{r4, lr}
 8004266:	4a03      	ldr	r2, [pc, #12]	@ (8004274 <stdio_exit_handler+0x10>)
 8004268:	4903      	ldr	r1, [pc, #12]	@ (8004278 <stdio_exit_handler+0x14>)
 800426a:	4804      	ldr	r0, [pc, #16]	@ (800427c <stdio_exit_handler+0x18>)
 800426c:	f000 f86c 	bl	8004348 <_fwalk_sglue>
 8004270:	bd10      	pop	{r4, pc}
 8004272:	46c0      	nop			@ (mov r8, r8)
 8004274:	20000024 	.word	0x20000024
 8004278:	08004fc5 	.word	0x08004fc5
 800427c:	20000034 	.word	0x20000034

08004280 <cleanup_stdio>:
 8004280:	6841      	ldr	r1, [r0, #4]
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <cleanup_stdio+0x30>)
 8004284:	b510      	push	{r4, lr}
 8004286:	0004      	movs	r4, r0
 8004288:	4299      	cmp	r1, r3
 800428a:	d001      	beq.n	8004290 <cleanup_stdio+0x10>
 800428c:	f000 fe9a 	bl	8004fc4 <_fflush_r>
 8004290:	68a1      	ldr	r1, [r4, #8]
 8004292:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <cleanup_stdio+0x34>)
 8004294:	4299      	cmp	r1, r3
 8004296:	d002      	beq.n	800429e <cleanup_stdio+0x1e>
 8004298:	0020      	movs	r0, r4
 800429a:	f000 fe93 	bl	8004fc4 <_fflush_r>
 800429e:	68e1      	ldr	r1, [r4, #12]
 80042a0:	4b05      	ldr	r3, [pc, #20]	@ (80042b8 <cleanup_stdio+0x38>)
 80042a2:	4299      	cmp	r1, r3
 80042a4:	d002      	beq.n	80042ac <cleanup_stdio+0x2c>
 80042a6:	0020      	movs	r0, r4
 80042a8:	f000 fe8c 	bl	8004fc4 <_fflush_r>
 80042ac:	bd10      	pop	{r4, pc}
 80042ae:	46c0      	nop			@ (mov r8, r8)
 80042b0:	2000036c 	.word	0x2000036c
 80042b4:	200003d4 	.word	0x200003d4
 80042b8:	2000043c 	.word	0x2000043c

080042bc <global_stdio_init.part.0>:
 80042bc:	b510      	push	{r4, lr}
 80042be:	4b09      	ldr	r3, [pc, #36]	@ (80042e4 <global_stdio_init.part.0+0x28>)
 80042c0:	4a09      	ldr	r2, [pc, #36]	@ (80042e8 <global_stdio_init.part.0+0x2c>)
 80042c2:	2104      	movs	r1, #4
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	4809      	ldr	r0, [pc, #36]	@ (80042ec <global_stdio_init.part.0+0x30>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	f7ff ff95 	bl	80041f8 <std>
 80042ce:	2201      	movs	r2, #1
 80042d0:	2109      	movs	r1, #9
 80042d2:	4807      	ldr	r0, [pc, #28]	@ (80042f0 <global_stdio_init.part.0+0x34>)
 80042d4:	f7ff ff90 	bl	80041f8 <std>
 80042d8:	2202      	movs	r2, #2
 80042da:	2112      	movs	r1, #18
 80042dc:	4805      	ldr	r0, [pc, #20]	@ (80042f4 <global_stdio_init.part.0+0x38>)
 80042de:	f7ff ff8b 	bl	80041f8 <std>
 80042e2:	bd10      	pop	{r4, pc}
 80042e4:	200004a4 	.word	0x200004a4
 80042e8:	08004265 	.word	0x08004265
 80042ec:	2000036c 	.word	0x2000036c
 80042f0:	200003d4 	.word	0x200003d4
 80042f4:	2000043c 	.word	0x2000043c

080042f8 <__sfp_lock_acquire>:
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4802      	ldr	r0, [pc, #8]	@ (8004304 <__sfp_lock_acquire+0xc>)
 80042fc:	f000 fa1d 	bl	800473a <__retarget_lock_acquire_recursive>
 8004300:	bd10      	pop	{r4, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	200004ad 	.word	0x200004ad

08004308 <__sfp_lock_release>:
 8004308:	b510      	push	{r4, lr}
 800430a:	4802      	ldr	r0, [pc, #8]	@ (8004314 <__sfp_lock_release+0xc>)
 800430c:	f000 fa16 	bl	800473c <__retarget_lock_release_recursive>
 8004310:	bd10      	pop	{r4, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	200004ad 	.word	0x200004ad

08004318 <__sinit>:
 8004318:	b510      	push	{r4, lr}
 800431a:	0004      	movs	r4, r0
 800431c:	f7ff ffec 	bl	80042f8 <__sfp_lock_acquire>
 8004320:	6a23      	ldr	r3, [r4, #32]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d002      	beq.n	800432c <__sinit+0x14>
 8004326:	f7ff ffef 	bl	8004308 <__sfp_lock_release>
 800432a:	bd10      	pop	{r4, pc}
 800432c:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <__sinit+0x28>)
 800432e:	6223      	str	r3, [r4, #32]
 8004330:	4b04      	ldr	r3, [pc, #16]	@ (8004344 <__sinit+0x2c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1f6      	bne.n	8004326 <__sinit+0xe>
 8004338:	f7ff ffc0 	bl	80042bc <global_stdio_init.part.0>
 800433c:	e7f3      	b.n	8004326 <__sinit+0xe>
 800433e:	46c0      	nop			@ (mov r8, r8)
 8004340:	08004281 	.word	0x08004281
 8004344:	200004a4 	.word	0x200004a4

08004348 <_fwalk_sglue>:
 8004348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434a:	0014      	movs	r4, r2
 800434c:	2600      	movs	r6, #0
 800434e:	9000      	str	r0, [sp, #0]
 8004350:	9101      	str	r1, [sp, #4]
 8004352:	68a5      	ldr	r5, [r4, #8]
 8004354:	6867      	ldr	r7, [r4, #4]
 8004356:	3f01      	subs	r7, #1
 8004358:	d504      	bpl.n	8004364 <_fwalk_sglue+0x1c>
 800435a:	6824      	ldr	r4, [r4, #0]
 800435c:	2c00      	cmp	r4, #0
 800435e:	d1f8      	bne.n	8004352 <_fwalk_sglue+0xa>
 8004360:	0030      	movs	r0, r6
 8004362:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004364:	89ab      	ldrh	r3, [r5, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d908      	bls.n	800437c <_fwalk_sglue+0x34>
 800436a:	220e      	movs	r2, #14
 800436c:	5eab      	ldrsh	r3, [r5, r2]
 800436e:	3301      	adds	r3, #1
 8004370:	d004      	beq.n	800437c <_fwalk_sglue+0x34>
 8004372:	0029      	movs	r1, r5
 8004374:	9800      	ldr	r0, [sp, #0]
 8004376:	9b01      	ldr	r3, [sp, #4]
 8004378:	4798      	blx	r3
 800437a:	4306      	orrs	r6, r0
 800437c:	3568      	adds	r5, #104	@ 0x68
 800437e:	e7ea      	b.n	8004356 <_fwalk_sglue+0xe>

08004380 <iprintf>:
 8004380:	b40f      	push	{r0, r1, r2, r3}
 8004382:	b507      	push	{r0, r1, r2, lr}
 8004384:	4905      	ldr	r1, [pc, #20]	@ (800439c <iprintf+0x1c>)
 8004386:	ab04      	add	r3, sp, #16
 8004388:	6808      	ldr	r0, [r1, #0]
 800438a:	cb04      	ldmia	r3!, {r2}
 800438c:	6881      	ldr	r1, [r0, #8]
 800438e:	9301      	str	r3, [sp, #4]
 8004390:	f000 fafa 	bl	8004988 <_vfiprintf_r>
 8004394:	b003      	add	sp, #12
 8004396:	bc08      	pop	{r3}
 8004398:	b004      	add	sp, #16
 800439a:	4718      	bx	r3
 800439c:	20000030 	.word	0x20000030

080043a0 <_puts_r>:
 80043a0:	6a03      	ldr	r3, [r0, #32]
 80043a2:	b570      	push	{r4, r5, r6, lr}
 80043a4:	0005      	movs	r5, r0
 80043a6:	000e      	movs	r6, r1
 80043a8:	6884      	ldr	r4, [r0, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <_puts_r+0x12>
 80043ae:	f7ff ffb3 	bl	8004318 <__sinit>
 80043b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043b4:	07db      	lsls	r3, r3, #31
 80043b6:	d405      	bmi.n	80043c4 <_puts_r+0x24>
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	059b      	lsls	r3, r3, #22
 80043bc:	d402      	bmi.n	80043c4 <_puts_r+0x24>
 80043be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043c0:	f000 f9bb 	bl	800473a <__retarget_lock_acquire_recursive>
 80043c4:	89a3      	ldrh	r3, [r4, #12]
 80043c6:	071b      	lsls	r3, r3, #28
 80043c8:	d502      	bpl.n	80043d0 <_puts_r+0x30>
 80043ca:	6923      	ldr	r3, [r4, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d11f      	bne.n	8004410 <_puts_r+0x70>
 80043d0:	0021      	movs	r1, r4
 80043d2:	0028      	movs	r0, r5
 80043d4:	f000 f8d2 	bl	800457c <__swsetup_r>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d019      	beq.n	8004410 <_puts_r+0x70>
 80043dc:	2501      	movs	r5, #1
 80043de:	426d      	negs	r5, r5
 80043e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043e2:	07db      	lsls	r3, r3, #31
 80043e4:	d405      	bmi.n	80043f2 <_puts_r+0x52>
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	059b      	lsls	r3, r3, #22
 80043ea:	d402      	bmi.n	80043f2 <_puts_r+0x52>
 80043ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043ee:	f000 f9a5 	bl	800473c <__retarget_lock_release_recursive>
 80043f2:	0028      	movs	r0, r5
 80043f4:	bd70      	pop	{r4, r5, r6, pc}
 80043f6:	3601      	adds	r6, #1
 80043f8:	60a3      	str	r3, [r4, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	da04      	bge.n	8004408 <_puts_r+0x68>
 80043fe:	69a2      	ldr	r2, [r4, #24]
 8004400:	429a      	cmp	r2, r3
 8004402:	dc16      	bgt.n	8004432 <_puts_r+0x92>
 8004404:	290a      	cmp	r1, #10
 8004406:	d014      	beq.n	8004432 <_puts_r+0x92>
 8004408:	6823      	ldr	r3, [r4, #0]
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	6022      	str	r2, [r4, #0]
 800440e:	7019      	strb	r1, [r3, #0]
 8004410:	68a3      	ldr	r3, [r4, #8]
 8004412:	7831      	ldrb	r1, [r6, #0]
 8004414:	3b01      	subs	r3, #1
 8004416:	2900      	cmp	r1, #0
 8004418:	d1ed      	bne.n	80043f6 <_puts_r+0x56>
 800441a:	60a3      	str	r3, [r4, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	da0f      	bge.n	8004440 <_puts_r+0xa0>
 8004420:	0022      	movs	r2, r4
 8004422:	0028      	movs	r0, r5
 8004424:	310a      	adds	r1, #10
 8004426:	f000 f867 	bl	80044f8 <__swbuf_r>
 800442a:	3001      	adds	r0, #1
 800442c:	d0d6      	beq.n	80043dc <_puts_r+0x3c>
 800442e:	250a      	movs	r5, #10
 8004430:	e7d6      	b.n	80043e0 <_puts_r+0x40>
 8004432:	0022      	movs	r2, r4
 8004434:	0028      	movs	r0, r5
 8004436:	f000 f85f 	bl	80044f8 <__swbuf_r>
 800443a:	3001      	adds	r0, #1
 800443c:	d1e8      	bne.n	8004410 <_puts_r+0x70>
 800443e:	e7cd      	b.n	80043dc <_puts_r+0x3c>
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	1c5a      	adds	r2, r3, #1
 8004444:	6022      	str	r2, [r4, #0]
 8004446:	220a      	movs	r2, #10
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	e7f0      	b.n	800442e <_puts_r+0x8e>

0800444c <puts>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4b03      	ldr	r3, [pc, #12]	@ (800445c <puts+0x10>)
 8004450:	0001      	movs	r1, r0
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	f7ff ffa4 	bl	80043a0 <_puts_r>
 8004458:	bd10      	pop	{r4, pc}
 800445a:	46c0      	nop			@ (mov r8, r8)
 800445c:	20000030 	.word	0x20000030

08004460 <__sread>:
 8004460:	b570      	push	{r4, r5, r6, lr}
 8004462:	000c      	movs	r4, r1
 8004464:	250e      	movs	r5, #14
 8004466:	5f49      	ldrsh	r1, [r1, r5]
 8004468:	f000 f914 	bl	8004694 <_read_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	db03      	blt.n	8004478 <__sread+0x18>
 8004470:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004472:	181b      	adds	r3, r3, r0
 8004474:	6563      	str	r3, [r4, #84]	@ 0x54
 8004476:	bd70      	pop	{r4, r5, r6, pc}
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	4a02      	ldr	r2, [pc, #8]	@ (8004484 <__sread+0x24>)
 800447c:	4013      	ands	r3, r2
 800447e:	81a3      	strh	r3, [r4, #12]
 8004480:	e7f9      	b.n	8004476 <__sread+0x16>
 8004482:	46c0      	nop			@ (mov r8, r8)
 8004484:	ffffefff 	.word	0xffffefff

08004488 <__swrite>:
 8004488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448a:	001f      	movs	r7, r3
 800448c:	898b      	ldrh	r3, [r1, #12]
 800448e:	0005      	movs	r5, r0
 8004490:	000c      	movs	r4, r1
 8004492:	0016      	movs	r6, r2
 8004494:	05db      	lsls	r3, r3, #23
 8004496:	d505      	bpl.n	80044a4 <__swrite+0x1c>
 8004498:	230e      	movs	r3, #14
 800449a:	5ec9      	ldrsh	r1, [r1, r3]
 800449c:	2200      	movs	r2, #0
 800449e:	2302      	movs	r3, #2
 80044a0:	f000 f8e4 	bl	800466c <_lseek_r>
 80044a4:	89a3      	ldrh	r3, [r4, #12]
 80044a6:	4a05      	ldr	r2, [pc, #20]	@ (80044bc <__swrite+0x34>)
 80044a8:	0028      	movs	r0, r5
 80044aa:	4013      	ands	r3, r2
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	0032      	movs	r2, r6
 80044b0:	230e      	movs	r3, #14
 80044b2:	5ee1      	ldrsh	r1, [r4, r3]
 80044b4:	003b      	movs	r3, r7
 80044b6:	f000 f901 	bl	80046bc <_write_r>
 80044ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044bc:	ffffefff 	.word	0xffffefff

080044c0 <__sseek>:
 80044c0:	b570      	push	{r4, r5, r6, lr}
 80044c2:	000c      	movs	r4, r1
 80044c4:	250e      	movs	r5, #14
 80044c6:	5f49      	ldrsh	r1, [r1, r5]
 80044c8:	f000 f8d0 	bl	800466c <_lseek_r>
 80044cc:	89a3      	ldrh	r3, [r4, #12]
 80044ce:	1c42      	adds	r2, r0, #1
 80044d0:	d103      	bne.n	80044da <__sseek+0x1a>
 80044d2:	4a05      	ldr	r2, [pc, #20]	@ (80044e8 <__sseek+0x28>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	bd70      	pop	{r4, r5, r6, pc}
 80044da:	2280      	movs	r2, #128	@ 0x80
 80044dc:	0152      	lsls	r2, r2, #5
 80044de:	4313      	orrs	r3, r2
 80044e0:	81a3      	strh	r3, [r4, #12]
 80044e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80044e4:	e7f8      	b.n	80044d8 <__sseek+0x18>
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	ffffefff 	.word	0xffffefff

080044ec <__sclose>:
 80044ec:	b510      	push	{r4, lr}
 80044ee:	230e      	movs	r3, #14
 80044f0:	5ec9      	ldrsh	r1, [r1, r3]
 80044f2:	f000 f8a9 	bl	8004648 <_close_r>
 80044f6:	bd10      	pop	{r4, pc}

080044f8 <__swbuf_r>:
 80044f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fa:	0006      	movs	r6, r0
 80044fc:	000d      	movs	r5, r1
 80044fe:	0014      	movs	r4, r2
 8004500:	2800      	cmp	r0, #0
 8004502:	d004      	beq.n	800450e <__swbuf_r+0x16>
 8004504:	6a03      	ldr	r3, [r0, #32]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <__swbuf_r+0x16>
 800450a:	f7ff ff05 	bl	8004318 <__sinit>
 800450e:	69a3      	ldr	r3, [r4, #24]
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	071b      	lsls	r3, r3, #28
 8004516:	d502      	bpl.n	800451e <__swbuf_r+0x26>
 8004518:	6923      	ldr	r3, [r4, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <__swbuf_r+0x3a>
 800451e:	0021      	movs	r1, r4
 8004520:	0030      	movs	r0, r6
 8004522:	f000 f82b 	bl	800457c <__swsetup_r>
 8004526:	2800      	cmp	r0, #0
 8004528:	d003      	beq.n	8004532 <__swbuf_r+0x3a>
 800452a:	2501      	movs	r5, #1
 800452c:	426d      	negs	r5, r5
 800452e:	0028      	movs	r0, r5
 8004530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	b2ef      	uxtb	r7, r5
 8004538:	1ac0      	subs	r0, r0, r3
 800453a:	6963      	ldr	r3, [r4, #20]
 800453c:	b2ed      	uxtb	r5, r5
 800453e:	4283      	cmp	r3, r0
 8004540:	dc05      	bgt.n	800454e <__swbuf_r+0x56>
 8004542:	0021      	movs	r1, r4
 8004544:	0030      	movs	r0, r6
 8004546:	f000 fd3d 	bl	8004fc4 <_fflush_r>
 800454a:	2800      	cmp	r0, #0
 800454c:	d1ed      	bne.n	800452a <__swbuf_r+0x32>
 800454e:	68a3      	ldr	r3, [r4, #8]
 8004550:	3001      	adds	r0, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	60a3      	str	r3, [r4, #8]
 8004556:	6823      	ldr	r3, [r4, #0]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	701f      	strb	r7, [r3, #0]
 800455e:	6963      	ldr	r3, [r4, #20]
 8004560:	4283      	cmp	r3, r0
 8004562:	d004      	beq.n	800456e <__swbuf_r+0x76>
 8004564:	89a3      	ldrh	r3, [r4, #12]
 8004566:	07db      	lsls	r3, r3, #31
 8004568:	d5e1      	bpl.n	800452e <__swbuf_r+0x36>
 800456a:	2d0a      	cmp	r5, #10
 800456c:	d1df      	bne.n	800452e <__swbuf_r+0x36>
 800456e:	0021      	movs	r1, r4
 8004570:	0030      	movs	r0, r6
 8004572:	f000 fd27 	bl	8004fc4 <_fflush_r>
 8004576:	2800      	cmp	r0, #0
 8004578:	d0d9      	beq.n	800452e <__swbuf_r+0x36>
 800457a:	e7d6      	b.n	800452a <__swbuf_r+0x32>

0800457c <__swsetup_r>:
 800457c:	4b2d      	ldr	r3, [pc, #180]	@ (8004634 <__swsetup_r+0xb8>)
 800457e:	b570      	push	{r4, r5, r6, lr}
 8004580:	0005      	movs	r5, r0
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	000c      	movs	r4, r1
 8004586:	2800      	cmp	r0, #0
 8004588:	d004      	beq.n	8004594 <__swsetup_r+0x18>
 800458a:	6a03      	ldr	r3, [r0, #32]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <__swsetup_r+0x18>
 8004590:	f7ff fec2 	bl	8004318 <__sinit>
 8004594:	220c      	movs	r2, #12
 8004596:	5ea3      	ldrsh	r3, [r4, r2]
 8004598:	071a      	lsls	r2, r3, #28
 800459a:	d423      	bmi.n	80045e4 <__swsetup_r+0x68>
 800459c:	06da      	lsls	r2, r3, #27
 800459e:	d407      	bmi.n	80045b0 <__swsetup_r+0x34>
 80045a0:	2209      	movs	r2, #9
 80045a2:	602a      	str	r2, [r5, #0]
 80045a4:	2240      	movs	r2, #64	@ 0x40
 80045a6:	2001      	movs	r0, #1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	81a3      	strh	r3, [r4, #12]
 80045ac:	4240      	negs	r0, r0
 80045ae:	e03a      	b.n	8004626 <__swsetup_r+0xaa>
 80045b0:	075b      	lsls	r3, r3, #29
 80045b2:	d513      	bpl.n	80045dc <__swsetup_r+0x60>
 80045b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80045b6:	2900      	cmp	r1, #0
 80045b8:	d008      	beq.n	80045cc <__swsetup_r+0x50>
 80045ba:	0023      	movs	r3, r4
 80045bc:	3344      	adds	r3, #68	@ 0x44
 80045be:	4299      	cmp	r1, r3
 80045c0:	d002      	beq.n	80045c8 <__swsetup_r+0x4c>
 80045c2:	0028      	movs	r0, r5
 80045c4:	f000 f8bc 	bl	8004740 <_free_r>
 80045c8:	2300      	movs	r3, #0
 80045ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80045cc:	2224      	movs	r2, #36	@ 0x24
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	4393      	bics	r3, r2
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	2300      	movs	r3, #0
 80045d6:	6063      	str	r3, [r4, #4]
 80045d8:	6923      	ldr	r3, [r4, #16]
 80045da:	6023      	str	r3, [r4, #0]
 80045dc:	2308      	movs	r3, #8
 80045de:	89a2      	ldrh	r2, [r4, #12]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	81a3      	strh	r3, [r4, #12]
 80045e4:	6923      	ldr	r3, [r4, #16]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10b      	bne.n	8004602 <__swsetup_r+0x86>
 80045ea:	21a0      	movs	r1, #160	@ 0xa0
 80045ec:	2280      	movs	r2, #128	@ 0x80
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	0089      	lsls	r1, r1, #2
 80045f2:	0092      	lsls	r2, r2, #2
 80045f4:	400b      	ands	r3, r1
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <__swsetup_r+0x86>
 80045fa:	0021      	movs	r1, r4
 80045fc:	0028      	movs	r0, r5
 80045fe:	f000 fd37 	bl	8005070 <__smakebuf_r>
 8004602:	220c      	movs	r2, #12
 8004604:	5ea3      	ldrsh	r3, [r4, r2]
 8004606:	2101      	movs	r1, #1
 8004608:	001a      	movs	r2, r3
 800460a:	400a      	ands	r2, r1
 800460c:	420b      	tst	r3, r1
 800460e:	d00b      	beq.n	8004628 <__swsetup_r+0xac>
 8004610:	2200      	movs	r2, #0
 8004612:	60a2      	str	r2, [r4, #8]
 8004614:	6962      	ldr	r2, [r4, #20]
 8004616:	4252      	negs	r2, r2
 8004618:	61a2      	str	r2, [r4, #24]
 800461a:	2000      	movs	r0, #0
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	4282      	cmp	r2, r0
 8004620:	d101      	bne.n	8004626 <__swsetup_r+0xaa>
 8004622:	061a      	lsls	r2, r3, #24
 8004624:	d4be      	bmi.n	80045a4 <__swsetup_r+0x28>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	0799      	lsls	r1, r3, #30
 800462a:	d400      	bmi.n	800462e <__swsetup_r+0xb2>
 800462c:	6962      	ldr	r2, [r4, #20]
 800462e:	60a2      	str	r2, [r4, #8]
 8004630:	e7f3      	b.n	800461a <__swsetup_r+0x9e>
 8004632:	46c0      	nop			@ (mov r8, r8)
 8004634:	20000030 	.word	0x20000030

08004638 <memset>:
 8004638:	0003      	movs	r3, r0
 800463a:	1882      	adds	r2, r0, r2
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	7019      	strb	r1, [r3, #0]
 8004644:	3301      	adds	r3, #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <_close_r>:
 8004648:	2300      	movs	r3, #0
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	4d06      	ldr	r5, [pc, #24]	@ (8004668 <_close_r+0x20>)
 800464e:	0004      	movs	r4, r0
 8004650:	0008      	movs	r0, r1
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	f7fc fa00 	bl	8000a58 <_close>
 8004658:	1c43      	adds	r3, r0, #1
 800465a:	d103      	bne.n	8004664 <_close_r+0x1c>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d000      	beq.n	8004664 <_close_r+0x1c>
 8004662:	6023      	str	r3, [r4, #0]
 8004664:	bd70      	pop	{r4, r5, r6, pc}
 8004666:	46c0      	nop			@ (mov r8, r8)
 8004668:	200004a8 	.word	0x200004a8

0800466c <_lseek_r>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	0004      	movs	r4, r0
 8004670:	0008      	movs	r0, r1
 8004672:	0011      	movs	r1, r2
 8004674:	001a      	movs	r2, r3
 8004676:	2300      	movs	r3, #0
 8004678:	4d05      	ldr	r5, [pc, #20]	@ (8004690 <_lseek_r+0x24>)
 800467a:	602b      	str	r3, [r5, #0]
 800467c:	f7fc fa0d 	bl	8000a9a <_lseek>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d103      	bne.n	800468c <_lseek_r+0x20>
 8004684:	682b      	ldr	r3, [r5, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d000      	beq.n	800468c <_lseek_r+0x20>
 800468a:	6023      	str	r3, [r4, #0]
 800468c:	bd70      	pop	{r4, r5, r6, pc}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	200004a8 	.word	0x200004a8

08004694 <_read_r>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	0004      	movs	r4, r0
 8004698:	0008      	movs	r0, r1
 800469a:	0011      	movs	r1, r2
 800469c:	001a      	movs	r2, r3
 800469e:	2300      	movs	r3, #0
 80046a0:	4d05      	ldr	r5, [pc, #20]	@ (80046b8 <_read_r+0x24>)
 80046a2:	602b      	str	r3, [r5, #0]
 80046a4:	f7fc f99f 	bl	80009e6 <_read>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d103      	bne.n	80046b4 <_read_r+0x20>
 80046ac:	682b      	ldr	r3, [r5, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d000      	beq.n	80046b4 <_read_r+0x20>
 80046b2:	6023      	str	r3, [r4, #0]
 80046b4:	bd70      	pop	{r4, r5, r6, pc}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	200004a8 	.word	0x200004a8

080046bc <_write_r>:
 80046bc:	b570      	push	{r4, r5, r6, lr}
 80046be:	0004      	movs	r4, r0
 80046c0:	0008      	movs	r0, r1
 80046c2:	0011      	movs	r1, r2
 80046c4:	001a      	movs	r2, r3
 80046c6:	2300      	movs	r3, #0
 80046c8:	4d05      	ldr	r5, [pc, #20]	@ (80046e0 <_write_r+0x24>)
 80046ca:	602b      	str	r3, [r5, #0]
 80046cc:	f7fc f9a8 	bl	8000a20 <_write>
 80046d0:	1c43      	adds	r3, r0, #1
 80046d2:	d103      	bne.n	80046dc <_write_r+0x20>
 80046d4:	682b      	ldr	r3, [r5, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d000      	beq.n	80046dc <_write_r+0x20>
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	46c0      	nop			@ (mov r8, r8)
 80046e0:	200004a8 	.word	0x200004a8

080046e4 <__errno>:
 80046e4:	4b01      	ldr	r3, [pc, #4]	@ (80046ec <__errno+0x8>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	4770      	bx	lr
 80046ea:	46c0      	nop			@ (mov r8, r8)
 80046ec:	20000030 	.word	0x20000030

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	2600      	movs	r6, #0
 80046f4:	4c0c      	ldr	r4, [pc, #48]	@ (8004728 <__libc_init_array+0x38>)
 80046f6:	4d0d      	ldr	r5, [pc, #52]	@ (800472c <__libc_init_array+0x3c>)
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	2600      	movs	r6, #0
 8004702:	f000 fd39 	bl	8005178 <_init>
 8004706:	4c0a      	ldr	r4, [pc, #40]	@ (8004730 <__libc_init_array+0x40>)
 8004708:	4d0a      	ldr	r5, [pc, #40]	@ (8004734 <__libc_init_array+0x44>)
 800470a:	1b64      	subs	r4, r4, r5
 800470c:	10a4      	asrs	r4, r4, #2
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	00b3      	lsls	r3, r6, #2
 8004716:	58eb      	ldr	r3, [r5, r3]
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	00b3      	lsls	r3, r6, #2
 8004720:	58eb      	ldr	r3, [r5, r3]
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	080054a8 	.word	0x080054a8
 800472c:	080054a8 	.word	0x080054a8
 8004730:	080054ac 	.word	0x080054ac
 8004734:	080054a8 	.word	0x080054a8

08004738 <__retarget_lock_init_recursive>:
 8004738:	4770      	bx	lr

0800473a <__retarget_lock_acquire_recursive>:
 800473a:	4770      	bx	lr

0800473c <__retarget_lock_release_recursive>:
 800473c:	4770      	bx	lr
	...

08004740 <_free_r>:
 8004740:	b570      	push	{r4, r5, r6, lr}
 8004742:	0005      	movs	r5, r0
 8004744:	1e0c      	subs	r4, r1, #0
 8004746:	d010      	beq.n	800476a <_free_r+0x2a>
 8004748:	3c04      	subs	r4, #4
 800474a:	6823      	ldr	r3, [r4, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	da00      	bge.n	8004752 <_free_r+0x12>
 8004750:	18e4      	adds	r4, r4, r3
 8004752:	0028      	movs	r0, r5
 8004754:	f000 f8e0 	bl	8004918 <__malloc_lock>
 8004758:	4a1d      	ldr	r2, [pc, #116]	@ (80047d0 <_free_r+0x90>)
 800475a:	6813      	ldr	r3, [r2, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d105      	bne.n	800476c <_free_r+0x2c>
 8004760:	6063      	str	r3, [r4, #4]
 8004762:	6014      	str	r4, [r2, #0]
 8004764:	0028      	movs	r0, r5
 8004766:	f000 f8df 	bl	8004928 <__malloc_unlock>
 800476a:	bd70      	pop	{r4, r5, r6, pc}
 800476c:	42a3      	cmp	r3, r4
 800476e:	d908      	bls.n	8004782 <_free_r+0x42>
 8004770:	6820      	ldr	r0, [r4, #0]
 8004772:	1821      	adds	r1, r4, r0
 8004774:	428b      	cmp	r3, r1
 8004776:	d1f3      	bne.n	8004760 <_free_r+0x20>
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	1809      	adds	r1, r1, r0
 800477e:	6021      	str	r1, [r4, #0]
 8004780:	e7ee      	b.n	8004760 <_free_r+0x20>
 8004782:	001a      	movs	r2, r3
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <_free_r+0x4e>
 800478a:	42a3      	cmp	r3, r4
 800478c:	d9f9      	bls.n	8004782 <_free_r+0x42>
 800478e:	6811      	ldr	r1, [r2, #0]
 8004790:	1850      	adds	r0, r2, r1
 8004792:	42a0      	cmp	r0, r4
 8004794:	d10b      	bne.n	80047ae <_free_r+0x6e>
 8004796:	6820      	ldr	r0, [r4, #0]
 8004798:	1809      	adds	r1, r1, r0
 800479a:	1850      	adds	r0, r2, r1
 800479c:	6011      	str	r1, [r2, #0]
 800479e:	4283      	cmp	r3, r0
 80047a0:	d1e0      	bne.n	8004764 <_free_r+0x24>
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	1841      	adds	r1, r0, r1
 80047a8:	6011      	str	r1, [r2, #0]
 80047aa:	6053      	str	r3, [r2, #4]
 80047ac:	e7da      	b.n	8004764 <_free_r+0x24>
 80047ae:	42a0      	cmp	r0, r4
 80047b0:	d902      	bls.n	80047b8 <_free_r+0x78>
 80047b2:	230c      	movs	r3, #12
 80047b4:	602b      	str	r3, [r5, #0]
 80047b6:	e7d5      	b.n	8004764 <_free_r+0x24>
 80047b8:	6820      	ldr	r0, [r4, #0]
 80047ba:	1821      	adds	r1, r4, r0
 80047bc:	428b      	cmp	r3, r1
 80047be:	d103      	bne.n	80047c8 <_free_r+0x88>
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	1809      	adds	r1, r1, r0
 80047c6:	6021      	str	r1, [r4, #0]
 80047c8:	6063      	str	r3, [r4, #4]
 80047ca:	6054      	str	r4, [r2, #4]
 80047cc:	e7ca      	b.n	8004764 <_free_r+0x24>
 80047ce:	46c0      	nop			@ (mov r8, r8)
 80047d0:	200004b4 	.word	0x200004b4

080047d4 <sbrk_aligned>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004814 <sbrk_aligned+0x40>)
 80047d8:	000d      	movs	r5, r1
 80047da:	6831      	ldr	r1, [r6, #0]
 80047dc:	0004      	movs	r4, r0
 80047de:	2900      	cmp	r1, #0
 80047e0:	d102      	bne.n	80047e8 <sbrk_aligned+0x14>
 80047e2:	f000 fcab 	bl	800513c <_sbrk_r>
 80047e6:	6030      	str	r0, [r6, #0]
 80047e8:	0029      	movs	r1, r5
 80047ea:	0020      	movs	r0, r4
 80047ec:	f000 fca6 	bl	800513c <_sbrk_r>
 80047f0:	1c43      	adds	r3, r0, #1
 80047f2:	d103      	bne.n	80047fc <sbrk_aligned+0x28>
 80047f4:	2501      	movs	r5, #1
 80047f6:	426d      	negs	r5, r5
 80047f8:	0028      	movs	r0, r5
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	2303      	movs	r3, #3
 80047fe:	1cc5      	adds	r5, r0, #3
 8004800:	439d      	bics	r5, r3
 8004802:	42a8      	cmp	r0, r5
 8004804:	d0f8      	beq.n	80047f8 <sbrk_aligned+0x24>
 8004806:	1a29      	subs	r1, r5, r0
 8004808:	0020      	movs	r0, r4
 800480a:	f000 fc97 	bl	800513c <_sbrk_r>
 800480e:	3001      	adds	r0, #1
 8004810:	d1f2      	bne.n	80047f8 <sbrk_aligned+0x24>
 8004812:	e7ef      	b.n	80047f4 <sbrk_aligned+0x20>
 8004814:	200004b0 	.word	0x200004b0

08004818 <_malloc_r>:
 8004818:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800481a:	2203      	movs	r2, #3
 800481c:	1ccb      	adds	r3, r1, #3
 800481e:	4393      	bics	r3, r2
 8004820:	3308      	adds	r3, #8
 8004822:	0005      	movs	r5, r0
 8004824:	001f      	movs	r7, r3
 8004826:	2b0c      	cmp	r3, #12
 8004828:	d234      	bcs.n	8004894 <_malloc_r+0x7c>
 800482a:	270c      	movs	r7, #12
 800482c:	42b9      	cmp	r1, r7
 800482e:	d833      	bhi.n	8004898 <_malloc_r+0x80>
 8004830:	0028      	movs	r0, r5
 8004832:	f000 f871 	bl	8004918 <__malloc_lock>
 8004836:	4e37      	ldr	r6, [pc, #220]	@ (8004914 <_malloc_r+0xfc>)
 8004838:	6833      	ldr	r3, [r6, #0]
 800483a:	001c      	movs	r4, r3
 800483c:	2c00      	cmp	r4, #0
 800483e:	d12f      	bne.n	80048a0 <_malloc_r+0x88>
 8004840:	0039      	movs	r1, r7
 8004842:	0028      	movs	r0, r5
 8004844:	f7ff ffc6 	bl	80047d4 <sbrk_aligned>
 8004848:	0004      	movs	r4, r0
 800484a:	1c43      	adds	r3, r0, #1
 800484c:	d15f      	bne.n	800490e <_malloc_r+0xf6>
 800484e:	6834      	ldr	r4, [r6, #0]
 8004850:	9400      	str	r4, [sp, #0]
 8004852:	9b00      	ldr	r3, [sp, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d14a      	bne.n	80048ee <_malloc_r+0xd6>
 8004858:	2c00      	cmp	r4, #0
 800485a:	d052      	beq.n	8004902 <_malloc_r+0xea>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	0028      	movs	r0, r5
 8004860:	18e3      	adds	r3, r4, r3
 8004862:	9900      	ldr	r1, [sp, #0]
 8004864:	9301      	str	r3, [sp, #4]
 8004866:	f000 fc69 	bl	800513c <_sbrk_r>
 800486a:	9b01      	ldr	r3, [sp, #4]
 800486c:	4283      	cmp	r3, r0
 800486e:	d148      	bne.n	8004902 <_malloc_r+0xea>
 8004870:	6823      	ldr	r3, [r4, #0]
 8004872:	0028      	movs	r0, r5
 8004874:	1aff      	subs	r7, r7, r3
 8004876:	0039      	movs	r1, r7
 8004878:	f7ff ffac 	bl	80047d4 <sbrk_aligned>
 800487c:	3001      	adds	r0, #1
 800487e:	d040      	beq.n	8004902 <_malloc_r+0xea>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	19db      	adds	r3, r3, r7
 8004884:	6023      	str	r3, [r4, #0]
 8004886:	6833      	ldr	r3, [r6, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	2a00      	cmp	r2, #0
 800488c:	d133      	bne.n	80048f6 <_malloc_r+0xde>
 800488e:	9b00      	ldr	r3, [sp, #0]
 8004890:	6033      	str	r3, [r6, #0]
 8004892:	e019      	b.n	80048c8 <_malloc_r+0xb0>
 8004894:	2b00      	cmp	r3, #0
 8004896:	dac9      	bge.n	800482c <_malloc_r+0x14>
 8004898:	230c      	movs	r3, #12
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	2000      	movs	r0, #0
 800489e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048a0:	6821      	ldr	r1, [r4, #0]
 80048a2:	1bc9      	subs	r1, r1, r7
 80048a4:	d420      	bmi.n	80048e8 <_malloc_r+0xd0>
 80048a6:	290b      	cmp	r1, #11
 80048a8:	d90a      	bls.n	80048c0 <_malloc_r+0xa8>
 80048aa:	19e2      	adds	r2, r4, r7
 80048ac:	6027      	str	r7, [r4, #0]
 80048ae:	42a3      	cmp	r3, r4
 80048b0:	d104      	bne.n	80048bc <_malloc_r+0xa4>
 80048b2:	6032      	str	r2, [r6, #0]
 80048b4:	6863      	ldr	r3, [r4, #4]
 80048b6:	6011      	str	r1, [r2, #0]
 80048b8:	6053      	str	r3, [r2, #4]
 80048ba:	e005      	b.n	80048c8 <_malloc_r+0xb0>
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	e7f9      	b.n	80048b4 <_malloc_r+0x9c>
 80048c0:	6862      	ldr	r2, [r4, #4]
 80048c2:	42a3      	cmp	r3, r4
 80048c4:	d10e      	bne.n	80048e4 <_malloc_r+0xcc>
 80048c6:	6032      	str	r2, [r6, #0]
 80048c8:	0028      	movs	r0, r5
 80048ca:	f000 f82d 	bl	8004928 <__malloc_unlock>
 80048ce:	0020      	movs	r0, r4
 80048d0:	2207      	movs	r2, #7
 80048d2:	300b      	adds	r0, #11
 80048d4:	1d23      	adds	r3, r4, #4
 80048d6:	4390      	bics	r0, r2
 80048d8:	1ac2      	subs	r2, r0, r3
 80048da:	4298      	cmp	r0, r3
 80048dc:	d0df      	beq.n	800489e <_malloc_r+0x86>
 80048de:	1a1b      	subs	r3, r3, r0
 80048e0:	50a3      	str	r3, [r4, r2]
 80048e2:	e7dc      	b.n	800489e <_malloc_r+0x86>
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	e7ef      	b.n	80048c8 <_malloc_r+0xb0>
 80048e8:	0023      	movs	r3, r4
 80048ea:	6864      	ldr	r4, [r4, #4]
 80048ec:	e7a6      	b.n	800483c <_malloc_r+0x24>
 80048ee:	9c00      	ldr	r4, [sp, #0]
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	e7ad      	b.n	8004852 <_malloc_r+0x3a>
 80048f6:	001a      	movs	r2, r3
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	42a3      	cmp	r3, r4
 80048fc:	d1fb      	bne.n	80048f6 <_malloc_r+0xde>
 80048fe:	2300      	movs	r3, #0
 8004900:	e7da      	b.n	80048b8 <_malloc_r+0xa0>
 8004902:	230c      	movs	r3, #12
 8004904:	0028      	movs	r0, r5
 8004906:	602b      	str	r3, [r5, #0]
 8004908:	f000 f80e 	bl	8004928 <__malloc_unlock>
 800490c:	e7c6      	b.n	800489c <_malloc_r+0x84>
 800490e:	6007      	str	r7, [r0, #0]
 8004910:	e7da      	b.n	80048c8 <_malloc_r+0xb0>
 8004912:	46c0      	nop			@ (mov r8, r8)
 8004914:	200004b4 	.word	0x200004b4

08004918 <__malloc_lock>:
 8004918:	b510      	push	{r4, lr}
 800491a:	4802      	ldr	r0, [pc, #8]	@ (8004924 <__malloc_lock+0xc>)
 800491c:	f7ff ff0d 	bl	800473a <__retarget_lock_acquire_recursive>
 8004920:	bd10      	pop	{r4, pc}
 8004922:	46c0      	nop			@ (mov r8, r8)
 8004924:	200004ac 	.word	0x200004ac

08004928 <__malloc_unlock>:
 8004928:	b510      	push	{r4, lr}
 800492a:	4802      	ldr	r0, [pc, #8]	@ (8004934 <__malloc_unlock+0xc>)
 800492c:	f7ff ff06 	bl	800473c <__retarget_lock_release_recursive>
 8004930:	bd10      	pop	{r4, pc}
 8004932:	46c0      	nop			@ (mov r8, r8)
 8004934:	200004ac 	.word	0x200004ac

08004938 <__sfputc_r>:
 8004938:	6893      	ldr	r3, [r2, #8]
 800493a:	b510      	push	{r4, lr}
 800493c:	3b01      	subs	r3, #1
 800493e:	6093      	str	r3, [r2, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	da04      	bge.n	800494e <__sfputc_r+0x16>
 8004944:	6994      	ldr	r4, [r2, #24]
 8004946:	42a3      	cmp	r3, r4
 8004948:	db07      	blt.n	800495a <__sfputc_r+0x22>
 800494a:	290a      	cmp	r1, #10
 800494c:	d005      	beq.n	800495a <__sfputc_r+0x22>
 800494e:	6813      	ldr	r3, [r2, #0]
 8004950:	1c58      	adds	r0, r3, #1
 8004952:	6010      	str	r0, [r2, #0]
 8004954:	7019      	strb	r1, [r3, #0]
 8004956:	0008      	movs	r0, r1
 8004958:	bd10      	pop	{r4, pc}
 800495a:	f7ff fdcd 	bl	80044f8 <__swbuf_r>
 800495e:	0001      	movs	r1, r0
 8004960:	e7f9      	b.n	8004956 <__sfputc_r+0x1e>

08004962 <__sfputs_r>:
 8004962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004964:	0006      	movs	r6, r0
 8004966:	000f      	movs	r7, r1
 8004968:	0014      	movs	r4, r2
 800496a:	18d5      	adds	r5, r2, r3
 800496c:	42ac      	cmp	r4, r5
 800496e:	d101      	bne.n	8004974 <__sfputs_r+0x12>
 8004970:	2000      	movs	r0, #0
 8004972:	e007      	b.n	8004984 <__sfputs_r+0x22>
 8004974:	7821      	ldrb	r1, [r4, #0]
 8004976:	003a      	movs	r2, r7
 8004978:	0030      	movs	r0, r6
 800497a:	f7ff ffdd 	bl	8004938 <__sfputc_r>
 800497e:	3401      	adds	r4, #1
 8004980:	1c43      	adds	r3, r0, #1
 8004982:	d1f3      	bne.n	800496c <__sfputs_r+0xa>
 8004984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004988 <_vfiprintf_r>:
 8004988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800498a:	b0a1      	sub	sp, #132	@ 0x84
 800498c:	000f      	movs	r7, r1
 800498e:	0015      	movs	r5, r2
 8004990:	001e      	movs	r6, r3
 8004992:	9003      	str	r0, [sp, #12]
 8004994:	2800      	cmp	r0, #0
 8004996:	d004      	beq.n	80049a2 <_vfiprintf_r+0x1a>
 8004998:	6a03      	ldr	r3, [r0, #32]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <_vfiprintf_r+0x1a>
 800499e:	f7ff fcbb 	bl	8004318 <__sinit>
 80049a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049a4:	07db      	lsls	r3, r3, #31
 80049a6:	d405      	bmi.n	80049b4 <_vfiprintf_r+0x2c>
 80049a8:	89bb      	ldrh	r3, [r7, #12]
 80049aa:	059b      	lsls	r3, r3, #22
 80049ac:	d402      	bmi.n	80049b4 <_vfiprintf_r+0x2c>
 80049ae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049b0:	f7ff fec3 	bl	800473a <__retarget_lock_acquire_recursive>
 80049b4:	89bb      	ldrh	r3, [r7, #12]
 80049b6:	071b      	lsls	r3, r3, #28
 80049b8:	d502      	bpl.n	80049c0 <_vfiprintf_r+0x38>
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <_vfiprintf_r+0x60>
 80049c0:	0039      	movs	r1, r7
 80049c2:	9803      	ldr	r0, [sp, #12]
 80049c4:	f7ff fdda 	bl	800457c <__swsetup_r>
 80049c8:	2800      	cmp	r0, #0
 80049ca:	d00d      	beq.n	80049e8 <_vfiprintf_r+0x60>
 80049cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ce:	07db      	lsls	r3, r3, #31
 80049d0:	d503      	bpl.n	80049da <_vfiprintf_r+0x52>
 80049d2:	2001      	movs	r0, #1
 80049d4:	4240      	negs	r0, r0
 80049d6:	b021      	add	sp, #132	@ 0x84
 80049d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049da:	89bb      	ldrh	r3, [r7, #12]
 80049dc:	059b      	lsls	r3, r3, #22
 80049de:	d4f8      	bmi.n	80049d2 <_vfiprintf_r+0x4a>
 80049e0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80049e2:	f7ff feab 	bl	800473c <__retarget_lock_release_recursive>
 80049e6:	e7f4      	b.n	80049d2 <_vfiprintf_r+0x4a>
 80049e8:	2300      	movs	r3, #0
 80049ea:	ac08      	add	r4, sp, #32
 80049ec:	6163      	str	r3, [r4, #20]
 80049ee:	3320      	adds	r3, #32
 80049f0:	7663      	strb	r3, [r4, #25]
 80049f2:	3310      	adds	r3, #16
 80049f4:	76a3      	strb	r3, [r4, #26]
 80049f6:	9607      	str	r6, [sp, #28]
 80049f8:	002e      	movs	r6, r5
 80049fa:	7833      	ldrb	r3, [r6, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d001      	beq.n	8004a04 <_vfiprintf_r+0x7c>
 8004a00:	2b25      	cmp	r3, #37	@ 0x25
 8004a02:	d148      	bne.n	8004a96 <_vfiprintf_r+0x10e>
 8004a04:	1b73      	subs	r3, r6, r5
 8004a06:	9305      	str	r3, [sp, #20]
 8004a08:	42ae      	cmp	r6, r5
 8004a0a:	d00b      	beq.n	8004a24 <_vfiprintf_r+0x9c>
 8004a0c:	002a      	movs	r2, r5
 8004a0e:	0039      	movs	r1, r7
 8004a10:	9803      	ldr	r0, [sp, #12]
 8004a12:	f7ff ffa6 	bl	8004962 <__sfputs_r>
 8004a16:	3001      	adds	r0, #1
 8004a18:	d100      	bne.n	8004a1c <_vfiprintf_r+0x94>
 8004a1a:	e0ae      	b.n	8004b7a <_vfiprintf_r+0x1f2>
 8004a1c:	6963      	ldr	r3, [r4, #20]
 8004a1e:	9a05      	ldr	r2, [sp, #20]
 8004a20:	189b      	adds	r3, r3, r2
 8004a22:	6163      	str	r3, [r4, #20]
 8004a24:	7833      	ldrb	r3, [r6, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d100      	bne.n	8004a2c <_vfiprintf_r+0xa4>
 8004a2a:	e0a6      	b.n	8004b7a <_vfiprintf_r+0x1f2>
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	2300      	movs	r3, #0
 8004a30:	4252      	negs	r2, r2
 8004a32:	6062      	str	r2, [r4, #4]
 8004a34:	a904      	add	r1, sp, #16
 8004a36:	3254      	adds	r2, #84	@ 0x54
 8004a38:	1852      	adds	r2, r2, r1
 8004a3a:	1c75      	adds	r5, r6, #1
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	60e3      	str	r3, [r4, #12]
 8004a40:	60a3      	str	r3, [r4, #8]
 8004a42:	7013      	strb	r3, [r2, #0]
 8004a44:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004a46:	4b59      	ldr	r3, [pc, #356]	@ (8004bac <_vfiprintf_r+0x224>)
 8004a48:	2205      	movs	r2, #5
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	7829      	ldrb	r1, [r5, #0]
 8004a4e:	9305      	str	r3, [sp, #20]
 8004a50:	f000 fb86 	bl	8005160 <memchr>
 8004a54:	1c6e      	adds	r6, r5, #1
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d11f      	bne.n	8004a9a <_vfiprintf_r+0x112>
 8004a5a:	6822      	ldr	r2, [r4, #0]
 8004a5c:	06d3      	lsls	r3, r2, #27
 8004a5e:	d504      	bpl.n	8004a6a <_vfiprintf_r+0xe2>
 8004a60:	2353      	movs	r3, #83	@ 0x53
 8004a62:	a904      	add	r1, sp, #16
 8004a64:	185b      	adds	r3, r3, r1
 8004a66:	2120      	movs	r1, #32
 8004a68:	7019      	strb	r1, [r3, #0]
 8004a6a:	0713      	lsls	r3, r2, #28
 8004a6c:	d504      	bpl.n	8004a78 <_vfiprintf_r+0xf0>
 8004a6e:	2353      	movs	r3, #83	@ 0x53
 8004a70:	a904      	add	r1, sp, #16
 8004a72:	185b      	adds	r3, r3, r1
 8004a74:	212b      	movs	r1, #43	@ 0x2b
 8004a76:	7019      	strb	r1, [r3, #0]
 8004a78:	782b      	ldrb	r3, [r5, #0]
 8004a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a7c:	d016      	beq.n	8004aac <_vfiprintf_r+0x124>
 8004a7e:	002e      	movs	r6, r5
 8004a80:	2100      	movs	r1, #0
 8004a82:	200a      	movs	r0, #10
 8004a84:	68e3      	ldr	r3, [r4, #12]
 8004a86:	7832      	ldrb	r2, [r6, #0]
 8004a88:	1c75      	adds	r5, r6, #1
 8004a8a:	3a30      	subs	r2, #48	@ 0x30
 8004a8c:	2a09      	cmp	r2, #9
 8004a8e:	d950      	bls.n	8004b32 <_vfiprintf_r+0x1aa>
 8004a90:	2900      	cmp	r1, #0
 8004a92:	d111      	bne.n	8004ab8 <_vfiprintf_r+0x130>
 8004a94:	e017      	b.n	8004ac6 <_vfiprintf_r+0x13e>
 8004a96:	3601      	adds	r6, #1
 8004a98:	e7af      	b.n	80049fa <_vfiprintf_r+0x72>
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	1ac0      	subs	r0, r0, r3
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4083      	lsls	r3, r0
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	0035      	movs	r5, r6
 8004aa8:	6023      	str	r3, [r4, #0]
 8004aaa:	e7cc      	b.n	8004a46 <_vfiprintf_r+0xbe>
 8004aac:	9b07      	ldr	r3, [sp, #28]
 8004aae:	1d19      	adds	r1, r3, #4
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	9107      	str	r1, [sp, #28]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	db01      	blt.n	8004abc <_vfiprintf_r+0x134>
 8004ab8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004aba:	e004      	b.n	8004ac6 <_vfiprintf_r+0x13e>
 8004abc:	425b      	negs	r3, r3
 8004abe:	60e3      	str	r3, [r4, #12]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	7833      	ldrb	r3, [r6, #0]
 8004ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004aca:	d10c      	bne.n	8004ae6 <_vfiprintf_r+0x15e>
 8004acc:	7873      	ldrb	r3, [r6, #1]
 8004ace:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ad0:	d134      	bne.n	8004b3c <_vfiprintf_r+0x1b4>
 8004ad2:	9b07      	ldr	r3, [sp, #28]
 8004ad4:	3602      	adds	r6, #2
 8004ad6:	1d1a      	adds	r2, r3, #4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	9207      	str	r2, [sp, #28]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	da01      	bge.n	8004ae4 <_vfiprintf_r+0x15c>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	425b      	negs	r3, r3
 8004ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ae6:	4d32      	ldr	r5, [pc, #200]	@ (8004bb0 <_vfiprintf_r+0x228>)
 8004ae8:	2203      	movs	r2, #3
 8004aea:	0028      	movs	r0, r5
 8004aec:	7831      	ldrb	r1, [r6, #0]
 8004aee:	f000 fb37 	bl	8005160 <memchr>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d006      	beq.n	8004b04 <_vfiprintf_r+0x17c>
 8004af6:	2340      	movs	r3, #64	@ 0x40
 8004af8:	1b40      	subs	r0, r0, r5
 8004afa:	4083      	lsls	r3, r0
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	3601      	adds	r6, #1
 8004b00:	4313      	orrs	r3, r2
 8004b02:	6023      	str	r3, [r4, #0]
 8004b04:	7831      	ldrb	r1, [r6, #0]
 8004b06:	2206      	movs	r2, #6
 8004b08:	482a      	ldr	r0, [pc, #168]	@ (8004bb4 <_vfiprintf_r+0x22c>)
 8004b0a:	1c75      	adds	r5, r6, #1
 8004b0c:	7621      	strb	r1, [r4, #24]
 8004b0e:	f000 fb27 	bl	8005160 <memchr>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d040      	beq.n	8004b98 <_vfiprintf_r+0x210>
 8004b16:	4b28      	ldr	r3, [pc, #160]	@ (8004bb8 <_vfiprintf_r+0x230>)
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d122      	bne.n	8004b62 <_vfiprintf_r+0x1da>
 8004b1c:	2207      	movs	r2, #7
 8004b1e:	9b07      	ldr	r3, [sp, #28]
 8004b20:	3307      	adds	r3, #7
 8004b22:	4393      	bics	r3, r2
 8004b24:	3308      	adds	r3, #8
 8004b26:	9307      	str	r3, [sp, #28]
 8004b28:	6963      	ldr	r3, [r4, #20]
 8004b2a:	9a04      	ldr	r2, [sp, #16]
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	6163      	str	r3, [r4, #20]
 8004b30:	e762      	b.n	80049f8 <_vfiprintf_r+0x70>
 8004b32:	4343      	muls	r3, r0
 8004b34:	002e      	movs	r6, r5
 8004b36:	2101      	movs	r1, #1
 8004b38:	189b      	adds	r3, r3, r2
 8004b3a:	e7a4      	b.n	8004a86 <_vfiprintf_r+0xfe>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	200a      	movs	r0, #10
 8004b40:	0019      	movs	r1, r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	6063      	str	r3, [r4, #4]
 8004b46:	7832      	ldrb	r2, [r6, #0]
 8004b48:	1c75      	adds	r5, r6, #1
 8004b4a:	3a30      	subs	r2, #48	@ 0x30
 8004b4c:	2a09      	cmp	r2, #9
 8004b4e:	d903      	bls.n	8004b58 <_vfiprintf_r+0x1d0>
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d0c8      	beq.n	8004ae6 <_vfiprintf_r+0x15e>
 8004b54:	9109      	str	r1, [sp, #36]	@ 0x24
 8004b56:	e7c6      	b.n	8004ae6 <_vfiprintf_r+0x15e>
 8004b58:	4341      	muls	r1, r0
 8004b5a:	002e      	movs	r6, r5
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	1889      	adds	r1, r1, r2
 8004b60:	e7f1      	b.n	8004b46 <_vfiprintf_r+0x1be>
 8004b62:	aa07      	add	r2, sp, #28
 8004b64:	9200      	str	r2, [sp, #0]
 8004b66:	0021      	movs	r1, r4
 8004b68:	003a      	movs	r2, r7
 8004b6a:	4b14      	ldr	r3, [pc, #80]	@ (8004bbc <_vfiprintf_r+0x234>)
 8004b6c:	9803      	ldr	r0, [sp, #12]
 8004b6e:	e000      	b.n	8004b72 <_vfiprintf_r+0x1ea>
 8004b70:	bf00      	nop
 8004b72:	9004      	str	r0, [sp, #16]
 8004b74:	9b04      	ldr	r3, [sp, #16]
 8004b76:	3301      	adds	r3, #1
 8004b78:	d1d6      	bne.n	8004b28 <_vfiprintf_r+0x1a0>
 8004b7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b7c:	07db      	lsls	r3, r3, #31
 8004b7e:	d405      	bmi.n	8004b8c <_vfiprintf_r+0x204>
 8004b80:	89bb      	ldrh	r3, [r7, #12]
 8004b82:	059b      	lsls	r3, r3, #22
 8004b84:	d402      	bmi.n	8004b8c <_vfiprintf_r+0x204>
 8004b86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004b88:	f7ff fdd8 	bl	800473c <__retarget_lock_release_recursive>
 8004b8c:	89bb      	ldrh	r3, [r7, #12]
 8004b8e:	065b      	lsls	r3, r3, #25
 8004b90:	d500      	bpl.n	8004b94 <_vfiprintf_r+0x20c>
 8004b92:	e71e      	b.n	80049d2 <_vfiprintf_r+0x4a>
 8004b94:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004b96:	e71e      	b.n	80049d6 <_vfiprintf_r+0x4e>
 8004b98:	aa07      	add	r2, sp, #28
 8004b9a:	9200      	str	r2, [sp, #0]
 8004b9c:	0021      	movs	r1, r4
 8004b9e:	003a      	movs	r2, r7
 8004ba0:	4b06      	ldr	r3, [pc, #24]	@ (8004bbc <_vfiprintf_r+0x234>)
 8004ba2:	9803      	ldr	r0, [sp, #12]
 8004ba4:	f000 f87c 	bl	8004ca0 <_printf_i>
 8004ba8:	e7e3      	b.n	8004b72 <_vfiprintf_r+0x1ea>
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	08005474 	.word	0x08005474
 8004bb0:	0800547a 	.word	0x0800547a
 8004bb4:	0800547e 	.word	0x0800547e
 8004bb8:	00000000 	.word	0x00000000
 8004bbc:	08004963 	.word	0x08004963

08004bc0 <_printf_common>:
 8004bc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bc2:	0016      	movs	r6, r2
 8004bc4:	9301      	str	r3, [sp, #4]
 8004bc6:	688a      	ldr	r2, [r1, #8]
 8004bc8:	690b      	ldr	r3, [r1, #16]
 8004bca:	000c      	movs	r4, r1
 8004bcc:	9000      	str	r0, [sp, #0]
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	da00      	bge.n	8004bd4 <_printf_common+0x14>
 8004bd2:	0013      	movs	r3, r2
 8004bd4:	0022      	movs	r2, r4
 8004bd6:	6033      	str	r3, [r6, #0]
 8004bd8:	3243      	adds	r2, #67	@ 0x43
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	d001      	beq.n	8004be4 <_printf_common+0x24>
 8004be0:	3301      	adds	r3, #1
 8004be2:	6033      	str	r3, [r6, #0]
 8004be4:	6823      	ldr	r3, [r4, #0]
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	d502      	bpl.n	8004bf0 <_printf_common+0x30>
 8004bea:	6833      	ldr	r3, [r6, #0]
 8004bec:	3302      	adds	r3, #2
 8004bee:	6033      	str	r3, [r6, #0]
 8004bf0:	6822      	ldr	r2, [r4, #0]
 8004bf2:	2306      	movs	r3, #6
 8004bf4:	0015      	movs	r5, r2
 8004bf6:	401d      	ands	r5, r3
 8004bf8:	421a      	tst	r2, r3
 8004bfa:	d027      	beq.n	8004c4c <_printf_common+0x8c>
 8004bfc:	0023      	movs	r3, r4
 8004bfe:	3343      	adds	r3, #67	@ 0x43
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	1e5a      	subs	r2, r3, #1
 8004c04:	4193      	sbcs	r3, r2
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	0692      	lsls	r2, r2, #26
 8004c0a:	d430      	bmi.n	8004c6e <_printf_common+0xae>
 8004c0c:	0022      	movs	r2, r4
 8004c0e:	9901      	ldr	r1, [sp, #4]
 8004c10:	9800      	ldr	r0, [sp, #0]
 8004c12:	9d08      	ldr	r5, [sp, #32]
 8004c14:	3243      	adds	r2, #67	@ 0x43
 8004c16:	47a8      	blx	r5
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d025      	beq.n	8004c68 <_printf_common+0xa8>
 8004c1c:	2206      	movs	r2, #6
 8004c1e:	6823      	ldr	r3, [r4, #0]
 8004c20:	2500      	movs	r5, #0
 8004c22:	4013      	ands	r3, r2
 8004c24:	2b04      	cmp	r3, #4
 8004c26:	d105      	bne.n	8004c34 <_printf_common+0x74>
 8004c28:	6833      	ldr	r3, [r6, #0]
 8004c2a:	68e5      	ldr	r5, [r4, #12]
 8004c2c:	1aed      	subs	r5, r5, r3
 8004c2e:	43eb      	mvns	r3, r5
 8004c30:	17db      	asrs	r3, r3, #31
 8004c32:	401d      	ands	r5, r3
 8004c34:	68a3      	ldr	r3, [r4, #8]
 8004c36:	6922      	ldr	r2, [r4, #16]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	dd01      	ble.n	8004c40 <_printf_common+0x80>
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	18ed      	adds	r5, r5, r3
 8004c40:	2600      	movs	r6, #0
 8004c42:	42b5      	cmp	r5, r6
 8004c44:	d120      	bne.n	8004c88 <_printf_common+0xc8>
 8004c46:	2000      	movs	r0, #0
 8004c48:	e010      	b.n	8004c6c <_printf_common+0xac>
 8004c4a:	3501      	adds	r5, #1
 8004c4c:	68e3      	ldr	r3, [r4, #12]
 8004c4e:	6832      	ldr	r2, [r6, #0]
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	42ab      	cmp	r3, r5
 8004c54:	ddd2      	ble.n	8004bfc <_printf_common+0x3c>
 8004c56:	0022      	movs	r2, r4
 8004c58:	2301      	movs	r3, #1
 8004c5a:	9901      	ldr	r1, [sp, #4]
 8004c5c:	9800      	ldr	r0, [sp, #0]
 8004c5e:	9f08      	ldr	r7, [sp, #32]
 8004c60:	3219      	adds	r2, #25
 8004c62:	47b8      	blx	r7
 8004c64:	3001      	adds	r0, #1
 8004c66:	d1f0      	bne.n	8004c4a <_printf_common+0x8a>
 8004c68:	2001      	movs	r0, #1
 8004c6a:	4240      	negs	r0, r0
 8004c6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c6e:	2030      	movs	r0, #48	@ 0x30
 8004c70:	18e1      	adds	r1, r4, r3
 8004c72:	3143      	adds	r1, #67	@ 0x43
 8004c74:	7008      	strb	r0, [r1, #0]
 8004c76:	0021      	movs	r1, r4
 8004c78:	1c5a      	adds	r2, r3, #1
 8004c7a:	3145      	adds	r1, #69	@ 0x45
 8004c7c:	7809      	ldrb	r1, [r1, #0]
 8004c7e:	18a2      	adds	r2, r4, r2
 8004c80:	3243      	adds	r2, #67	@ 0x43
 8004c82:	3302      	adds	r3, #2
 8004c84:	7011      	strb	r1, [r2, #0]
 8004c86:	e7c1      	b.n	8004c0c <_printf_common+0x4c>
 8004c88:	0022      	movs	r2, r4
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	9901      	ldr	r1, [sp, #4]
 8004c8e:	9800      	ldr	r0, [sp, #0]
 8004c90:	9f08      	ldr	r7, [sp, #32]
 8004c92:	321a      	adds	r2, #26
 8004c94:	47b8      	blx	r7
 8004c96:	3001      	adds	r0, #1
 8004c98:	d0e6      	beq.n	8004c68 <_printf_common+0xa8>
 8004c9a:	3601      	adds	r6, #1
 8004c9c:	e7d1      	b.n	8004c42 <_printf_common+0x82>
	...

08004ca0 <_printf_i>:
 8004ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca2:	b08b      	sub	sp, #44	@ 0x2c
 8004ca4:	9206      	str	r2, [sp, #24]
 8004ca6:	000a      	movs	r2, r1
 8004ca8:	3243      	adds	r2, #67	@ 0x43
 8004caa:	9307      	str	r3, [sp, #28]
 8004cac:	9005      	str	r0, [sp, #20]
 8004cae:	9203      	str	r2, [sp, #12]
 8004cb0:	7e0a      	ldrb	r2, [r1, #24]
 8004cb2:	000c      	movs	r4, r1
 8004cb4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004cb6:	2a78      	cmp	r2, #120	@ 0x78
 8004cb8:	d809      	bhi.n	8004cce <_printf_i+0x2e>
 8004cba:	2a62      	cmp	r2, #98	@ 0x62
 8004cbc:	d80b      	bhi.n	8004cd6 <_printf_i+0x36>
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	d100      	bne.n	8004cc4 <_printf_i+0x24>
 8004cc2:	e0ba      	b.n	8004e3a <_printf_i+0x19a>
 8004cc4:	497a      	ldr	r1, [pc, #488]	@ (8004eb0 <_printf_i+0x210>)
 8004cc6:	9104      	str	r1, [sp, #16]
 8004cc8:	2a58      	cmp	r2, #88	@ 0x58
 8004cca:	d100      	bne.n	8004cce <_printf_i+0x2e>
 8004ccc:	e08e      	b.n	8004dec <_printf_i+0x14c>
 8004cce:	0025      	movs	r5, r4
 8004cd0:	3542      	adds	r5, #66	@ 0x42
 8004cd2:	702a      	strb	r2, [r5, #0]
 8004cd4:	e022      	b.n	8004d1c <_printf_i+0x7c>
 8004cd6:	0010      	movs	r0, r2
 8004cd8:	3863      	subs	r0, #99	@ 0x63
 8004cda:	2815      	cmp	r0, #21
 8004cdc:	d8f7      	bhi.n	8004cce <_printf_i+0x2e>
 8004cde:	f7fb fa13 	bl	8000108 <__gnu_thumb1_case_shi>
 8004ce2:	0016      	.short	0x0016
 8004ce4:	fff6001f 	.word	0xfff6001f
 8004ce8:	fff6fff6 	.word	0xfff6fff6
 8004cec:	001ffff6 	.word	0x001ffff6
 8004cf0:	fff6fff6 	.word	0xfff6fff6
 8004cf4:	fff6fff6 	.word	0xfff6fff6
 8004cf8:	0036009f 	.word	0x0036009f
 8004cfc:	fff6007e 	.word	0xfff6007e
 8004d00:	00b0fff6 	.word	0x00b0fff6
 8004d04:	0036fff6 	.word	0x0036fff6
 8004d08:	fff6fff6 	.word	0xfff6fff6
 8004d0c:	0082      	.short	0x0082
 8004d0e:	0025      	movs	r5, r4
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	3542      	adds	r5, #66	@ 0x42
 8004d14:	1d11      	adds	r1, r2, #4
 8004d16:	6019      	str	r1, [r3, #0]
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	702b      	strb	r3, [r5, #0]
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e09e      	b.n	8004e5e <_printf_i+0x1be>
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	6809      	ldr	r1, [r1, #0]
 8004d24:	1d02      	adds	r2, r0, #4
 8004d26:	060d      	lsls	r5, r1, #24
 8004d28:	d50b      	bpl.n	8004d42 <_printf_i+0xa2>
 8004d2a:	6806      	ldr	r6, [r0, #0]
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	2e00      	cmp	r6, #0
 8004d30:	da03      	bge.n	8004d3a <_printf_i+0x9a>
 8004d32:	232d      	movs	r3, #45	@ 0x2d
 8004d34:	9a03      	ldr	r2, [sp, #12]
 8004d36:	4276      	negs	r6, r6
 8004d38:	7013      	strb	r3, [r2, #0]
 8004d3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004eb0 <_printf_i+0x210>)
 8004d3c:	270a      	movs	r7, #10
 8004d3e:	9304      	str	r3, [sp, #16]
 8004d40:	e018      	b.n	8004d74 <_printf_i+0xd4>
 8004d42:	6806      	ldr	r6, [r0, #0]
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	0649      	lsls	r1, r1, #25
 8004d48:	d5f1      	bpl.n	8004d2e <_printf_i+0x8e>
 8004d4a:	b236      	sxth	r6, r6
 8004d4c:	e7ef      	b.n	8004d2e <_printf_i+0x8e>
 8004d4e:	6808      	ldr	r0, [r1, #0]
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	c940      	ldmia	r1!, {r6}
 8004d54:	0605      	lsls	r5, r0, #24
 8004d56:	d402      	bmi.n	8004d5e <_printf_i+0xbe>
 8004d58:	0640      	lsls	r0, r0, #25
 8004d5a:	d500      	bpl.n	8004d5e <_printf_i+0xbe>
 8004d5c:	b2b6      	uxth	r6, r6
 8004d5e:	6019      	str	r1, [r3, #0]
 8004d60:	4b53      	ldr	r3, [pc, #332]	@ (8004eb0 <_printf_i+0x210>)
 8004d62:	270a      	movs	r7, #10
 8004d64:	9304      	str	r3, [sp, #16]
 8004d66:	2a6f      	cmp	r2, #111	@ 0x6f
 8004d68:	d100      	bne.n	8004d6c <_printf_i+0xcc>
 8004d6a:	3f02      	subs	r7, #2
 8004d6c:	0023      	movs	r3, r4
 8004d6e:	2200      	movs	r2, #0
 8004d70:	3343      	adds	r3, #67	@ 0x43
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	6863      	ldr	r3, [r4, #4]
 8004d76:	60a3      	str	r3, [r4, #8]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	db06      	blt.n	8004d8a <_printf_i+0xea>
 8004d7c:	2104      	movs	r1, #4
 8004d7e:	6822      	ldr	r2, [r4, #0]
 8004d80:	9d03      	ldr	r5, [sp, #12]
 8004d82:	438a      	bics	r2, r1
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	4333      	orrs	r3, r6
 8004d88:	d00c      	beq.n	8004da4 <_printf_i+0x104>
 8004d8a:	9d03      	ldr	r5, [sp, #12]
 8004d8c:	0030      	movs	r0, r6
 8004d8e:	0039      	movs	r1, r7
 8004d90:	f7fb fa4a 	bl	8000228 <__aeabi_uidivmod>
 8004d94:	9b04      	ldr	r3, [sp, #16]
 8004d96:	3d01      	subs	r5, #1
 8004d98:	5c5b      	ldrb	r3, [r3, r1]
 8004d9a:	702b      	strb	r3, [r5, #0]
 8004d9c:	0033      	movs	r3, r6
 8004d9e:	0006      	movs	r6, r0
 8004da0:	429f      	cmp	r7, r3
 8004da2:	d9f3      	bls.n	8004d8c <_printf_i+0xec>
 8004da4:	2f08      	cmp	r7, #8
 8004da6:	d109      	bne.n	8004dbc <_printf_i+0x11c>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	07db      	lsls	r3, r3, #31
 8004dac:	d506      	bpl.n	8004dbc <_printf_i+0x11c>
 8004dae:	6862      	ldr	r2, [r4, #4]
 8004db0:	6923      	ldr	r3, [r4, #16]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	dc02      	bgt.n	8004dbc <_printf_i+0x11c>
 8004db6:	2330      	movs	r3, #48	@ 0x30
 8004db8:	3d01      	subs	r5, #1
 8004dba:	702b      	strb	r3, [r5, #0]
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	1b5b      	subs	r3, r3, r5
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	9b07      	ldr	r3, [sp, #28]
 8004dc4:	0021      	movs	r1, r4
 8004dc6:	9300      	str	r3, [sp, #0]
 8004dc8:	9805      	ldr	r0, [sp, #20]
 8004dca:	9b06      	ldr	r3, [sp, #24]
 8004dcc:	aa09      	add	r2, sp, #36	@ 0x24
 8004dce:	f7ff fef7 	bl	8004bc0 <_printf_common>
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	d148      	bne.n	8004e68 <_printf_i+0x1c8>
 8004dd6:	2001      	movs	r0, #1
 8004dd8:	4240      	negs	r0, r0
 8004dda:	b00b      	add	sp, #44	@ 0x2c
 8004ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dde:	2220      	movs	r2, #32
 8004de0:	6809      	ldr	r1, [r1, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	6022      	str	r2, [r4, #0]
 8004de6:	2278      	movs	r2, #120	@ 0x78
 8004de8:	4932      	ldr	r1, [pc, #200]	@ (8004eb4 <_printf_i+0x214>)
 8004dea:	9104      	str	r1, [sp, #16]
 8004dec:	0021      	movs	r1, r4
 8004dee:	3145      	adds	r1, #69	@ 0x45
 8004df0:	700a      	strb	r2, [r1, #0]
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6822      	ldr	r2, [r4, #0]
 8004df6:	c940      	ldmia	r1!, {r6}
 8004df8:	0610      	lsls	r0, r2, #24
 8004dfa:	d402      	bmi.n	8004e02 <_printf_i+0x162>
 8004dfc:	0650      	lsls	r0, r2, #25
 8004dfe:	d500      	bpl.n	8004e02 <_printf_i+0x162>
 8004e00:	b2b6      	uxth	r6, r6
 8004e02:	6019      	str	r1, [r3, #0]
 8004e04:	07d3      	lsls	r3, r2, #31
 8004e06:	d502      	bpl.n	8004e0e <_printf_i+0x16e>
 8004e08:	2320      	movs	r3, #32
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d001      	beq.n	8004e16 <_printf_i+0x176>
 8004e12:	2710      	movs	r7, #16
 8004e14:	e7aa      	b.n	8004d6c <_printf_i+0xcc>
 8004e16:	2220      	movs	r2, #32
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	4393      	bics	r3, r2
 8004e1c:	6023      	str	r3, [r4, #0]
 8004e1e:	e7f8      	b.n	8004e12 <_printf_i+0x172>
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	680d      	ldr	r5, [r1, #0]
 8004e24:	1d10      	adds	r0, r2, #4
 8004e26:	6949      	ldr	r1, [r1, #20]
 8004e28:	6018      	str	r0, [r3, #0]
 8004e2a:	6813      	ldr	r3, [r2, #0]
 8004e2c:	062e      	lsls	r6, r5, #24
 8004e2e:	d501      	bpl.n	8004e34 <_printf_i+0x194>
 8004e30:	6019      	str	r1, [r3, #0]
 8004e32:	e002      	b.n	8004e3a <_printf_i+0x19a>
 8004e34:	066d      	lsls	r5, r5, #25
 8004e36:	d5fb      	bpl.n	8004e30 <_printf_i+0x190>
 8004e38:	8019      	strh	r1, [r3, #0]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9d03      	ldr	r5, [sp, #12]
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	e7bf      	b.n	8004dc2 <_printf_i+0x122>
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	1d11      	adds	r1, r2, #4
 8004e46:	6019      	str	r1, [r3, #0]
 8004e48:	6815      	ldr	r5, [r2, #0]
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	0028      	movs	r0, r5
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	f000 f986 	bl	8005160 <memchr>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d001      	beq.n	8004e5c <_printf_i+0x1bc>
 8004e58:	1b40      	subs	r0, r0, r5
 8004e5a:	6060      	str	r0, [r4, #4]
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	6123      	str	r3, [r4, #16]
 8004e60:	2300      	movs	r3, #0
 8004e62:	9a03      	ldr	r2, [sp, #12]
 8004e64:	7013      	strb	r3, [r2, #0]
 8004e66:	e7ac      	b.n	8004dc2 <_printf_i+0x122>
 8004e68:	002a      	movs	r2, r5
 8004e6a:	6923      	ldr	r3, [r4, #16]
 8004e6c:	9906      	ldr	r1, [sp, #24]
 8004e6e:	9805      	ldr	r0, [sp, #20]
 8004e70:	9d07      	ldr	r5, [sp, #28]
 8004e72:	47a8      	blx	r5
 8004e74:	3001      	adds	r0, #1
 8004e76:	d0ae      	beq.n	8004dd6 <_printf_i+0x136>
 8004e78:	6823      	ldr	r3, [r4, #0]
 8004e7a:	079b      	lsls	r3, r3, #30
 8004e7c:	d415      	bmi.n	8004eaa <_printf_i+0x20a>
 8004e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e80:	68e0      	ldr	r0, [r4, #12]
 8004e82:	4298      	cmp	r0, r3
 8004e84:	daa9      	bge.n	8004dda <_printf_i+0x13a>
 8004e86:	0018      	movs	r0, r3
 8004e88:	e7a7      	b.n	8004dda <_printf_i+0x13a>
 8004e8a:	0022      	movs	r2, r4
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	9906      	ldr	r1, [sp, #24]
 8004e90:	9805      	ldr	r0, [sp, #20]
 8004e92:	9e07      	ldr	r6, [sp, #28]
 8004e94:	3219      	adds	r2, #25
 8004e96:	47b0      	blx	r6
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d09c      	beq.n	8004dd6 <_printf_i+0x136>
 8004e9c:	3501      	adds	r5, #1
 8004e9e:	68e3      	ldr	r3, [r4, #12]
 8004ea0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ea2:	1a9b      	subs	r3, r3, r2
 8004ea4:	42ab      	cmp	r3, r5
 8004ea6:	dcf0      	bgt.n	8004e8a <_printf_i+0x1ea>
 8004ea8:	e7e9      	b.n	8004e7e <_printf_i+0x1de>
 8004eaa:	2500      	movs	r5, #0
 8004eac:	e7f7      	b.n	8004e9e <_printf_i+0x1fe>
 8004eae:	46c0      	nop			@ (mov r8, r8)
 8004eb0:	08005485 	.word	0x08005485
 8004eb4:	08005496 	.word	0x08005496

08004eb8 <__sflush_r>:
 8004eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004eba:	220c      	movs	r2, #12
 8004ebc:	5e8b      	ldrsh	r3, [r1, r2]
 8004ebe:	0005      	movs	r5, r0
 8004ec0:	000c      	movs	r4, r1
 8004ec2:	071a      	lsls	r2, r3, #28
 8004ec4:	d456      	bmi.n	8004f74 <__sflush_r+0xbc>
 8004ec6:	684a      	ldr	r2, [r1, #4]
 8004ec8:	2a00      	cmp	r2, #0
 8004eca:	dc02      	bgt.n	8004ed2 <__sflush_r+0x1a>
 8004ecc:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004ece:	2a00      	cmp	r2, #0
 8004ed0:	dd4e      	ble.n	8004f70 <__sflush_r+0xb8>
 8004ed2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004ed4:	2f00      	cmp	r7, #0
 8004ed6:	d04b      	beq.n	8004f70 <__sflush_r+0xb8>
 8004ed8:	2200      	movs	r2, #0
 8004eda:	2080      	movs	r0, #128	@ 0x80
 8004edc:	682e      	ldr	r6, [r5, #0]
 8004ede:	602a      	str	r2, [r5, #0]
 8004ee0:	001a      	movs	r2, r3
 8004ee2:	0140      	lsls	r0, r0, #5
 8004ee4:	6a21      	ldr	r1, [r4, #32]
 8004ee6:	4002      	ands	r2, r0
 8004ee8:	4203      	tst	r3, r0
 8004eea:	d033      	beq.n	8004f54 <__sflush_r+0x9c>
 8004eec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004eee:	89a3      	ldrh	r3, [r4, #12]
 8004ef0:	075b      	lsls	r3, r3, #29
 8004ef2:	d506      	bpl.n	8004f02 <__sflush_r+0x4a>
 8004ef4:	6863      	ldr	r3, [r4, #4]
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <__sflush_r+0x4a>
 8004efe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	2300      	movs	r3, #0
 8004f04:	0028      	movs	r0, r5
 8004f06:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004f08:	6a21      	ldr	r1, [r4, #32]
 8004f0a:	47b8      	blx	r7
 8004f0c:	89a2      	ldrh	r2, [r4, #12]
 8004f0e:	1c43      	adds	r3, r0, #1
 8004f10:	d106      	bne.n	8004f20 <__sflush_r+0x68>
 8004f12:	6829      	ldr	r1, [r5, #0]
 8004f14:	291d      	cmp	r1, #29
 8004f16:	d846      	bhi.n	8004fa6 <__sflush_r+0xee>
 8004f18:	4b29      	ldr	r3, [pc, #164]	@ (8004fc0 <__sflush_r+0x108>)
 8004f1a:	40cb      	lsrs	r3, r1
 8004f1c:	07db      	lsls	r3, r3, #31
 8004f1e:	d542      	bpl.n	8004fa6 <__sflush_r+0xee>
 8004f20:	2300      	movs	r3, #0
 8004f22:	6063      	str	r3, [r4, #4]
 8004f24:	6923      	ldr	r3, [r4, #16]
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	04d2      	lsls	r2, r2, #19
 8004f2a:	d505      	bpl.n	8004f38 <__sflush_r+0x80>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <__sflush_r+0x7e>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d100      	bne.n	8004f38 <__sflush_r+0x80>
 8004f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f3a:	602e      	str	r6, [r5, #0]
 8004f3c:	2900      	cmp	r1, #0
 8004f3e:	d017      	beq.n	8004f70 <__sflush_r+0xb8>
 8004f40:	0023      	movs	r3, r4
 8004f42:	3344      	adds	r3, #68	@ 0x44
 8004f44:	4299      	cmp	r1, r3
 8004f46:	d002      	beq.n	8004f4e <__sflush_r+0x96>
 8004f48:	0028      	movs	r0, r5
 8004f4a:	f7ff fbf9 	bl	8004740 <_free_r>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f52:	e00d      	b.n	8004f70 <__sflush_r+0xb8>
 8004f54:	2301      	movs	r3, #1
 8004f56:	0028      	movs	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	0002      	movs	r2, r0
 8004f5c:	1c43      	adds	r3, r0, #1
 8004f5e:	d1c6      	bne.n	8004eee <__sflush_r+0x36>
 8004f60:	682b      	ldr	r3, [r5, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0c3      	beq.n	8004eee <__sflush_r+0x36>
 8004f66:	2b1d      	cmp	r3, #29
 8004f68:	d001      	beq.n	8004f6e <__sflush_r+0xb6>
 8004f6a:	2b16      	cmp	r3, #22
 8004f6c:	d11a      	bne.n	8004fa4 <__sflush_r+0xec>
 8004f6e:	602e      	str	r6, [r5, #0]
 8004f70:	2000      	movs	r0, #0
 8004f72:	e01e      	b.n	8004fb2 <__sflush_r+0xfa>
 8004f74:	690e      	ldr	r6, [r1, #16]
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	d0fa      	beq.n	8004f70 <__sflush_r+0xb8>
 8004f7a:	680f      	ldr	r7, [r1, #0]
 8004f7c:	600e      	str	r6, [r1, #0]
 8004f7e:	1bba      	subs	r2, r7, r6
 8004f80:	9201      	str	r2, [sp, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	079b      	lsls	r3, r3, #30
 8004f86:	d100      	bne.n	8004f8a <__sflush_r+0xd2>
 8004f88:	694a      	ldr	r2, [r1, #20]
 8004f8a:	60a2      	str	r2, [r4, #8]
 8004f8c:	9b01      	ldr	r3, [sp, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	ddee      	ble.n	8004f70 <__sflush_r+0xb8>
 8004f92:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004f94:	0032      	movs	r2, r6
 8004f96:	001f      	movs	r7, r3
 8004f98:	0028      	movs	r0, r5
 8004f9a:	9b01      	ldr	r3, [sp, #4]
 8004f9c:	6a21      	ldr	r1, [r4, #32]
 8004f9e:	47b8      	blx	r7
 8004fa0:	2800      	cmp	r0, #0
 8004fa2:	dc07      	bgt.n	8004fb4 <__sflush_r+0xfc>
 8004fa4:	89a2      	ldrh	r2, [r4, #12]
 8004fa6:	2340      	movs	r3, #64	@ 0x40
 8004fa8:	2001      	movs	r0, #1
 8004faa:	4313      	orrs	r3, r2
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	81a3      	strh	r3, [r4, #12]
 8004fb0:	4240      	negs	r0, r0
 8004fb2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fb4:	9b01      	ldr	r3, [sp, #4]
 8004fb6:	1836      	adds	r6, r6, r0
 8004fb8:	1a1b      	subs	r3, r3, r0
 8004fba:	9301      	str	r3, [sp, #4]
 8004fbc:	e7e6      	b.n	8004f8c <__sflush_r+0xd4>
 8004fbe:	46c0      	nop			@ (mov r8, r8)
 8004fc0:	20400001 	.word	0x20400001

08004fc4 <_fflush_r>:
 8004fc4:	690b      	ldr	r3, [r1, #16]
 8004fc6:	b570      	push	{r4, r5, r6, lr}
 8004fc8:	0005      	movs	r5, r0
 8004fca:	000c      	movs	r4, r1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <_fflush_r+0x12>
 8004fd0:	2500      	movs	r5, #0
 8004fd2:	0028      	movs	r0, r5
 8004fd4:	bd70      	pop	{r4, r5, r6, pc}
 8004fd6:	2800      	cmp	r0, #0
 8004fd8:	d004      	beq.n	8004fe4 <_fflush_r+0x20>
 8004fda:	6a03      	ldr	r3, [r0, #32]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <_fflush_r+0x20>
 8004fe0:	f7ff f99a 	bl	8004318 <__sinit>
 8004fe4:	220c      	movs	r2, #12
 8004fe6:	5ea3      	ldrsh	r3, [r4, r2]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d0f1      	beq.n	8004fd0 <_fflush_r+0xc>
 8004fec:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004fee:	07d2      	lsls	r2, r2, #31
 8004ff0:	d404      	bmi.n	8004ffc <_fflush_r+0x38>
 8004ff2:	059b      	lsls	r3, r3, #22
 8004ff4:	d402      	bmi.n	8004ffc <_fflush_r+0x38>
 8004ff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ff8:	f7ff fb9f 	bl	800473a <__retarget_lock_acquire_recursive>
 8004ffc:	0028      	movs	r0, r5
 8004ffe:	0021      	movs	r1, r4
 8005000:	f7ff ff5a 	bl	8004eb8 <__sflush_r>
 8005004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005006:	0005      	movs	r5, r0
 8005008:	07db      	lsls	r3, r3, #31
 800500a:	d4e2      	bmi.n	8004fd2 <_fflush_r+0xe>
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	059b      	lsls	r3, r3, #22
 8005010:	d4df      	bmi.n	8004fd2 <_fflush_r+0xe>
 8005012:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005014:	f7ff fb92 	bl	800473c <__retarget_lock_release_recursive>
 8005018:	e7db      	b.n	8004fd2 <_fflush_r+0xe>
	...

0800501c <__swhatbuf_r>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	000e      	movs	r6, r1
 8005020:	001d      	movs	r5, r3
 8005022:	230e      	movs	r3, #14
 8005024:	5ec9      	ldrsh	r1, [r1, r3]
 8005026:	0014      	movs	r4, r2
 8005028:	b096      	sub	sp, #88	@ 0x58
 800502a:	2900      	cmp	r1, #0
 800502c:	da0c      	bge.n	8005048 <__swhatbuf_r+0x2c>
 800502e:	89b2      	ldrh	r2, [r6, #12]
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	0011      	movs	r1, r2
 8005034:	4019      	ands	r1, r3
 8005036:	421a      	tst	r2, r3
 8005038:	d114      	bne.n	8005064 <__swhatbuf_r+0x48>
 800503a:	2380      	movs	r3, #128	@ 0x80
 800503c:	00db      	lsls	r3, r3, #3
 800503e:	2000      	movs	r0, #0
 8005040:	6029      	str	r1, [r5, #0]
 8005042:	6023      	str	r3, [r4, #0]
 8005044:	b016      	add	sp, #88	@ 0x58
 8005046:	bd70      	pop	{r4, r5, r6, pc}
 8005048:	466a      	mov	r2, sp
 800504a:	f000 f853 	bl	80050f4 <_fstat_r>
 800504e:	2800      	cmp	r0, #0
 8005050:	dbed      	blt.n	800502e <__swhatbuf_r+0x12>
 8005052:	23f0      	movs	r3, #240	@ 0xf0
 8005054:	9901      	ldr	r1, [sp, #4]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	4019      	ands	r1, r3
 800505a:	4b04      	ldr	r3, [pc, #16]	@ (800506c <__swhatbuf_r+0x50>)
 800505c:	18c9      	adds	r1, r1, r3
 800505e:	424b      	negs	r3, r1
 8005060:	4159      	adcs	r1, r3
 8005062:	e7ea      	b.n	800503a <__swhatbuf_r+0x1e>
 8005064:	2100      	movs	r1, #0
 8005066:	2340      	movs	r3, #64	@ 0x40
 8005068:	e7e9      	b.n	800503e <__swhatbuf_r+0x22>
 800506a:	46c0      	nop			@ (mov r8, r8)
 800506c:	ffffe000 	.word	0xffffe000

08005070 <__smakebuf_r>:
 8005070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005072:	2602      	movs	r6, #2
 8005074:	898b      	ldrh	r3, [r1, #12]
 8005076:	0005      	movs	r5, r0
 8005078:	000c      	movs	r4, r1
 800507a:	b085      	sub	sp, #20
 800507c:	4233      	tst	r3, r6
 800507e:	d007      	beq.n	8005090 <__smakebuf_r+0x20>
 8005080:	0023      	movs	r3, r4
 8005082:	3347      	adds	r3, #71	@ 0x47
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	6123      	str	r3, [r4, #16]
 8005088:	2301      	movs	r3, #1
 800508a:	6163      	str	r3, [r4, #20]
 800508c:	b005      	add	sp, #20
 800508e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005090:	ab03      	add	r3, sp, #12
 8005092:	aa02      	add	r2, sp, #8
 8005094:	f7ff ffc2 	bl	800501c <__swhatbuf_r>
 8005098:	9f02      	ldr	r7, [sp, #8]
 800509a:	9001      	str	r0, [sp, #4]
 800509c:	0039      	movs	r1, r7
 800509e:	0028      	movs	r0, r5
 80050a0:	f7ff fbba 	bl	8004818 <_malloc_r>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d108      	bne.n	80050ba <__smakebuf_r+0x4a>
 80050a8:	220c      	movs	r2, #12
 80050aa:	5ea3      	ldrsh	r3, [r4, r2]
 80050ac:	059a      	lsls	r2, r3, #22
 80050ae:	d4ed      	bmi.n	800508c <__smakebuf_r+0x1c>
 80050b0:	2203      	movs	r2, #3
 80050b2:	4393      	bics	r3, r2
 80050b4:	431e      	orrs	r6, r3
 80050b6:	81a6      	strh	r6, [r4, #12]
 80050b8:	e7e2      	b.n	8005080 <__smakebuf_r+0x10>
 80050ba:	2380      	movs	r3, #128	@ 0x80
 80050bc:	89a2      	ldrh	r2, [r4, #12]
 80050be:	6020      	str	r0, [r4, #0]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	6120      	str	r0, [r4, #16]
 80050c8:	6167      	str	r7, [r4, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00c      	beq.n	80050e8 <__smakebuf_r+0x78>
 80050ce:	0028      	movs	r0, r5
 80050d0:	230e      	movs	r3, #14
 80050d2:	5ee1      	ldrsh	r1, [r4, r3]
 80050d4:	f000 f820 	bl	8005118 <_isatty_r>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d005      	beq.n	80050e8 <__smakebuf_r+0x78>
 80050dc:	2303      	movs	r3, #3
 80050de:	89a2      	ldrh	r2, [r4, #12]
 80050e0:	439a      	bics	r2, r3
 80050e2:	3b02      	subs	r3, #2
 80050e4:	4313      	orrs	r3, r2
 80050e6:	81a3      	strh	r3, [r4, #12]
 80050e8:	89a3      	ldrh	r3, [r4, #12]
 80050ea:	9a01      	ldr	r2, [sp, #4]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	81a3      	strh	r3, [r4, #12]
 80050f0:	e7cc      	b.n	800508c <__smakebuf_r+0x1c>
	...

080050f4 <_fstat_r>:
 80050f4:	2300      	movs	r3, #0
 80050f6:	b570      	push	{r4, r5, r6, lr}
 80050f8:	4d06      	ldr	r5, [pc, #24]	@ (8005114 <_fstat_r+0x20>)
 80050fa:	0004      	movs	r4, r0
 80050fc:	0008      	movs	r0, r1
 80050fe:	0011      	movs	r1, r2
 8005100:	602b      	str	r3, [r5, #0]
 8005102:	f7fb fcb3 	bl	8000a6c <_fstat>
 8005106:	1c43      	adds	r3, r0, #1
 8005108:	d103      	bne.n	8005112 <_fstat_r+0x1e>
 800510a:	682b      	ldr	r3, [r5, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d000      	beq.n	8005112 <_fstat_r+0x1e>
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	200004a8 	.word	0x200004a8

08005118 <_isatty_r>:
 8005118:	2300      	movs	r3, #0
 800511a:	b570      	push	{r4, r5, r6, lr}
 800511c:	4d06      	ldr	r5, [pc, #24]	@ (8005138 <_isatty_r+0x20>)
 800511e:	0004      	movs	r4, r0
 8005120:	0008      	movs	r0, r1
 8005122:	602b      	str	r3, [r5, #0]
 8005124:	f7fb fcb0 	bl	8000a88 <_isatty>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d103      	bne.n	8005134 <_isatty_r+0x1c>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d000      	beq.n	8005134 <_isatty_r+0x1c>
 8005132:	6023      	str	r3, [r4, #0]
 8005134:	bd70      	pop	{r4, r5, r6, pc}
 8005136:	46c0      	nop			@ (mov r8, r8)
 8005138:	200004a8 	.word	0x200004a8

0800513c <_sbrk_r>:
 800513c:	2300      	movs	r3, #0
 800513e:	b570      	push	{r4, r5, r6, lr}
 8005140:	4d06      	ldr	r5, [pc, #24]	@ (800515c <_sbrk_r+0x20>)
 8005142:	0004      	movs	r4, r0
 8005144:	0008      	movs	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fb fcb2 	bl	8000ab0 <_sbrk>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d103      	bne.n	8005158 <_sbrk_r+0x1c>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d000      	beq.n	8005158 <_sbrk_r+0x1c>
 8005156:	6023      	str	r3, [r4, #0]
 8005158:	bd70      	pop	{r4, r5, r6, pc}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	200004a8 	.word	0x200004a8

08005160 <memchr>:
 8005160:	b2c9      	uxtb	r1, r1
 8005162:	1882      	adds	r2, r0, r2
 8005164:	4290      	cmp	r0, r2
 8005166:	d101      	bne.n	800516c <memchr+0xc>
 8005168:	2000      	movs	r0, #0
 800516a:	4770      	bx	lr
 800516c:	7803      	ldrb	r3, [r0, #0]
 800516e:	428b      	cmp	r3, r1
 8005170:	d0fb      	beq.n	800516a <memchr+0xa>
 8005172:	3001      	adds	r0, #1
 8005174:	e7f6      	b.n	8005164 <memchr+0x4>
	...

08005178 <_init>:
 8005178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517a:	46c0      	nop			@ (mov r8, r8)
 800517c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800517e:	bc08      	pop	{r3}
 8005180:	469e      	mov	lr, r3
 8005182:	4770      	bx	lr

08005184 <_fini>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	46c0      	nop			@ (mov r8, r8)
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr
